
cv11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ab4  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08008c68  08008c68  00018c68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ea0  08008ea0  0002011c  2**0
                  CONTENTS
  4 .ARM          00000008  08008ea0  08008ea0  00018ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ea8  08008ea8  0002011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ea8  08008ea8  00018ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008eac  08008eac  00018eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000011c  20000000  08008eb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002011c  2**0
                  CONTENTS
 10 .bss          00000a64  2000011c  2000011c  0002011c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b80  20000b80  0002011c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011159  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a8f  00000000  00000000  000312a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d00  00000000  00000000  00033d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bf8  00000000  00000000  00034a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025812  00000000  00000000  00035630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010efd  00000000  00000000  0005ae42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5f72  00000000  00000000  0006bd3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00141cb1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000038f0  00000000  00000000  00141d04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000011c 	.word	0x2000011c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008c4c 	.word	0x08008c4c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000120 	.word	0x20000120
 80001ec:	08008c4c 	.word	0x08008c4c

080001f0 <__aeabi_dmul>:
 80001f0:	b570      	push	{r4, r5, r6, lr}
 80001f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001fe:	bf1d      	ittte	ne
 8000200:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000204:	ea94 0f0c 	teqne	r4, ip
 8000208:	ea95 0f0c 	teqne	r5, ip
 800020c:	f000 f8de 	bleq	80003cc <__aeabi_dmul+0x1dc>
 8000210:	442c      	add	r4, r5
 8000212:	ea81 0603 	eor.w	r6, r1, r3
 8000216:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800021a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800021e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000222:	bf18      	it	ne
 8000224:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000228:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800022c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000230:	d038      	beq.n	80002a4 <__aeabi_dmul+0xb4>
 8000232:	fba0 ce02 	umull	ip, lr, r0, r2
 8000236:	f04f 0500 	mov.w	r5, #0
 800023a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800023e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000242:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000246:	f04f 0600 	mov.w	r6, #0
 800024a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800024e:	f09c 0f00 	teq	ip, #0
 8000252:	bf18      	it	ne
 8000254:	f04e 0e01 	orrne.w	lr, lr, #1
 8000258:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800025c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000260:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000264:	d204      	bcs.n	8000270 <__aeabi_dmul+0x80>
 8000266:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800026a:	416d      	adcs	r5, r5
 800026c:	eb46 0606 	adc.w	r6, r6, r6
 8000270:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000274:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000278:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800027c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000280:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000284:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000288:	bf88      	it	hi
 800028a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800028e:	d81e      	bhi.n	80002ce <__aeabi_dmul+0xde>
 8000290:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000294:	bf08      	it	eq
 8000296:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800029a:	f150 0000 	adcs.w	r0, r0, #0
 800029e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002a2:	bd70      	pop	{r4, r5, r6, pc}
 80002a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002a8:	ea46 0101 	orr.w	r1, r6, r1
 80002ac:	ea40 0002 	orr.w	r0, r0, r2
 80002b0:	ea81 0103 	eor.w	r1, r1, r3
 80002b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002b8:	bfc2      	ittt	gt
 80002ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002c2:	bd70      	popgt	{r4, r5, r6, pc}
 80002c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002c8:	f04f 0e00 	mov.w	lr, #0
 80002cc:	3c01      	subs	r4, #1
 80002ce:	f300 80ab 	bgt.w	8000428 <__aeabi_dmul+0x238>
 80002d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002d6:	bfde      	ittt	le
 80002d8:	2000      	movle	r0, #0
 80002da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002de:	bd70      	pople	{r4, r5, r6, pc}
 80002e0:	f1c4 0400 	rsb	r4, r4, #0
 80002e4:	3c20      	subs	r4, #32
 80002e6:	da35      	bge.n	8000354 <__aeabi_dmul+0x164>
 80002e8:	340c      	adds	r4, #12
 80002ea:	dc1b      	bgt.n	8000324 <__aeabi_dmul+0x134>
 80002ec:	f104 0414 	add.w	r4, r4, #20
 80002f0:	f1c4 0520 	rsb	r5, r4, #32
 80002f4:	fa00 f305 	lsl.w	r3, r0, r5
 80002f8:	fa20 f004 	lsr.w	r0, r0, r4
 80002fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000300:	ea40 0002 	orr.w	r0, r0, r2
 8000304:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000308:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800030c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000310:	fa21 f604 	lsr.w	r6, r1, r4
 8000314:	eb42 0106 	adc.w	r1, r2, r6
 8000318:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800031c:	bf08      	it	eq
 800031e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f1c4 040c 	rsb	r4, r4, #12
 8000328:	f1c4 0520 	rsb	r5, r4, #32
 800032c:	fa00 f304 	lsl.w	r3, r0, r4
 8000330:	fa20 f005 	lsr.w	r0, r0, r5
 8000334:	fa01 f204 	lsl.w	r2, r1, r4
 8000338:	ea40 0002 	orr.w	r0, r0, r2
 800033c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000340:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000344:	f141 0100 	adc.w	r1, r1, #0
 8000348:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800034c:	bf08      	it	eq
 800034e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f1c4 0520 	rsb	r5, r4, #32
 8000358:	fa00 f205 	lsl.w	r2, r0, r5
 800035c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000360:	fa20 f304 	lsr.w	r3, r0, r4
 8000364:	fa01 f205 	lsl.w	r2, r1, r5
 8000368:	ea43 0302 	orr.w	r3, r3, r2
 800036c:	fa21 f004 	lsr.w	r0, r1, r4
 8000370:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000374:	fa21 f204 	lsr.w	r2, r1, r4
 8000378:	ea20 0002 	bic.w	r0, r0, r2
 800037c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000380:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000384:	bf08      	it	eq
 8000386:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f094 0f00 	teq	r4, #0
 8000390:	d10f      	bne.n	80003b2 <__aeabi_dmul+0x1c2>
 8000392:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000396:	0040      	lsls	r0, r0, #1
 8000398:	eb41 0101 	adc.w	r1, r1, r1
 800039c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003a0:	bf08      	it	eq
 80003a2:	3c01      	subeq	r4, #1
 80003a4:	d0f7      	beq.n	8000396 <__aeabi_dmul+0x1a6>
 80003a6:	ea41 0106 	orr.w	r1, r1, r6
 80003aa:	f095 0f00 	teq	r5, #0
 80003ae:	bf18      	it	ne
 80003b0:	4770      	bxne	lr
 80003b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003b6:	0052      	lsls	r2, r2, #1
 80003b8:	eb43 0303 	adc.w	r3, r3, r3
 80003bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003c0:	bf08      	it	eq
 80003c2:	3d01      	subeq	r5, #1
 80003c4:	d0f7      	beq.n	80003b6 <__aeabi_dmul+0x1c6>
 80003c6:	ea43 0306 	orr.w	r3, r3, r6
 80003ca:	4770      	bx	lr
 80003cc:	ea94 0f0c 	teq	r4, ip
 80003d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003d4:	bf18      	it	ne
 80003d6:	ea95 0f0c 	teqne	r5, ip
 80003da:	d00c      	beq.n	80003f6 <__aeabi_dmul+0x206>
 80003dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e0:	bf18      	it	ne
 80003e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e6:	d1d1      	bne.n	800038c <__aeabi_dmul+0x19c>
 80003e8:	ea81 0103 	eor.w	r1, r1, r3
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f0:	f04f 0000 	mov.w	r0, #0
 80003f4:	bd70      	pop	{r4, r5, r6, pc}
 80003f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003fa:	bf06      	itte	eq
 80003fc:	4610      	moveq	r0, r2
 80003fe:	4619      	moveq	r1, r3
 8000400:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000404:	d019      	beq.n	800043a <__aeabi_dmul+0x24a>
 8000406:	ea94 0f0c 	teq	r4, ip
 800040a:	d102      	bne.n	8000412 <__aeabi_dmul+0x222>
 800040c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000410:	d113      	bne.n	800043a <__aeabi_dmul+0x24a>
 8000412:	ea95 0f0c 	teq	r5, ip
 8000416:	d105      	bne.n	8000424 <__aeabi_dmul+0x234>
 8000418:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800041c:	bf1c      	itt	ne
 800041e:	4610      	movne	r0, r2
 8000420:	4619      	movne	r1, r3
 8000422:	d10a      	bne.n	800043a <__aeabi_dmul+0x24a>
 8000424:	ea81 0103 	eor.w	r1, r1, r3
 8000428:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800042c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd70      	pop	{r4, r5, r6, pc}
 800043a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800043e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000442:	bd70      	pop	{r4, r5, r6, pc}

08000444 <__aeabi_drsub>:
 8000444:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000448:	e002      	b.n	8000450 <__adddf3>
 800044a:	bf00      	nop

0800044c <__aeabi_dsub>:
 800044c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000450 <__adddf3>:
 8000450:	b530      	push	{r4, r5, lr}
 8000452:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000456:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800045a:	ea94 0f05 	teq	r4, r5
 800045e:	bf08      	it	eq
 8000460:	ea90 0f02 	teqeq	r0, r2
 8000464:	bf1f      	itttt	ne
 8000466:	ea54 0c00 	orrsne.w	ip, r4, r0
 800046a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800046e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000472:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000476:	f000 80e2 	beq.w	800063e <__adddf3+0x1ee>
 800047a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800047e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000482:	bfb8      	it	lt
 8000484:	426d      	neglt	r5, r5
 8000486:	dd0c      	ble.n	80004a2 <__adddf3+0x52>
 8000488:	442c      	add	r4, r5
 800048a:	ea80 0202 	eor.w	r2, r0, r2
 800048e:	ea81 0303 	eor.w	r3, r1, r3
 8000492:	ea82 0000 	eor.w	r0, r2, r0
 8000496:	ea83 0101 	eor.w	r1, r3, r1
 800049a:	ea80 0202 	eor.w	r2, r0, r2
 800049e:	ea81 0303 	eor.w	r3, r1, r3
 80004a2:	2d36      	cmp	r5, #54	; 0x36
 80004a4:	bf88      	it	hi
 80004a6:	bd30      	pophi	{r4, r5, pc}
 80004a8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004b0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b8:	d002      	beq.n	80004c0 <__adddf3+0x70>
 80004ba:	4240      	negs	r0, r0
 80004bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004cc:	d002      	beq.n	80004d4 <__adddf3+0x84>
 80004ce:	4252      	negs	r2, r2
 80004d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004d4:	ea94 0f05 	teq	r4, r5
 80004d8:	f000 80a7 	beq.w	800062a <__adddf3+0x1da>
 80004dc:	f1a4 0401 	sub.w	r4, r4, #1
 80004e0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004e4:	db0d      	blt.n	8000502 <__adddf3+0xb2>
 80004e6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004ea:	fa22 f205 	lsr.w	r2, r2, r5
 80004ee:	1880      	adds	r0, r0, r2
 80004f0:	f141 0100 	adc.w	r1, r1, #0
 80004f4:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f8:	1880      	adds	r0, r0, r2
 80004fa:	fa43 f305 	asr.w	r3, r3, r5
 80004fe:	4159      	adcs	r1, r3
 8000500:	e00e      	b.n	8000520 <__adddf3+0xd0>
 8000502:	f1a5 0520 	sub.w	r5, r5, #32
 8000506:	f10e 0e20 	add.w	lr, lr, #32
 800050a:	2a01      	cmp	r2, #1
 800050c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000510:	bf28      	it	cs
 8000512:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000516:	fa43 f305 	asr.w	r3, r3, r5
 800051a:	18c0      	adds	r0, r0, r3
 800051c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	d507      	bpl.n	8000536 <__adddf3+0xe6>
 8000526:	f04f 0e00 	mov.w	lr, #0
 800052a:	f1dc 0c00 	rsbs	ip, ip, #0
 800052e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000532:	eb6e 0101 	sbc.w	r1, lr, r1
 8000536:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800053a:	d31b      	bcc.n	8000574 <__adddf3+0x124>
 800053c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000540:	d30c      	bcc.n	800055c <__adddf3+0x10c>
 8000542:	0849      	lsrs	r1, r1, #1
 8000544:	ea5f 0030 	movs.w	r0, r0, rrx
 8000548:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800054c:	f104 0401 	add.w	r4, r4, #1
 8000550:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000554:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000558:	f080 809a 	bcs.w	8000690 <__adddf3+0x240>
 800055c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000560:	bf08      	it	eq
 8000562:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000566:	f150 0000 	adcs.w	r0, r0, #0
 800056a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800056e:	ea41 0105 	orr.w	r1, r1, r5
 8000572:	bd30      	pop	{r4, r5, pc}
 8000574:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000578:	4140      	adcs	r0, r0
 800057a:	eb41 0101 	adc.w	r1, r1, r1
 800057e:	3c01      	subs	r4, #1
 8000580:	bf28      	it	cs
 8000582:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000586:	d2e9      	bcs.n	800055c <__adddf3+0x10c>
 8000588:	f091 0f00 	teq	r1, #0
 800058c:	bf04      	itt	eq
 800058e:	4601      	moveq	r1, r0
 8000590:	2000      	moveq	r0, #0
 8000592:	fab1 f381 	clz	r3, r1
 8000596:	bf08      	it	eq
 8000598:	3320      	addeq	r3, #32
 800059a:	f1a3 030b 	sub.w	r3, r3, #11
 800059e:	f1b3 0220 	subs.w	r2, r3, #32
 80005a2:	da0c      	bge.n	80005be <__adddf3+0x16e>
 80005a4:	320c      	adds	r2, #12
 80005a6:	dd08      	ble.n	80005ba <__adddf3+0x16a>
 80005a8:	f102 0c14 	add.w	ip, r2, #20
 80005ac:	f1c2 020c 	rsb	r2, r2, #12
 80005b0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005b4:	fa21 f102 	lsr.w	r1, r1, r2
 80005b8:	e00c      	b.n	80005d4 <__adddf3+0x184>
 80005ba:	f102 0214 	add.w	r2, r2, #20
 80005be:	bfd8      	it	le
 80005c0:	f1c2 0c20 	rsble	ip, r2, #32
 80005c4:	fa01 f102 	lsl.w	r1, r1, r2
 80005c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005cc:	bfdc      	itt	le
 80005ce:	ea41 010c 	orrle.w	r1, r1, ip
 80005d2:	4090      	lslle	r0, r2
 80005d4:	1ae4      	subs	r4, r4, r3
 80005d6:	bfa2      	ittt	ge
 80005d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005dc:	4329      	orrge	r1, r5
 80005de:	bd30      	popge	{r4, r5, pc}
 80005e0:	ea6f 0404 	mvn.w	r4, r4
 80005e4:	3c1f      	subs	r4, #31
 80005e6:	da1c      	bge.n	8000622 <__adddf3+0x1d2>
 80005e8:	340c      	adds	r4, #12
 80005ea:	dc0e      	bgt.n	800060a <__adddf3+0x1ba>
 80005ec:	f104 0414 	add.w	r4, r4, #20
 80005f0:	f1c4 0220 	rsb	r2, r4, #32
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f302 	lsl.w	r3, r1, r2
 80005fc:	ea40 0003 	orr.w	r0, r0, r3
 8000600:	fa21 f304 	lsr.w	r3, r1, r4
 8000604:	ea45 0103 	orr.w	r1, r5, r3
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	f1c4 040c 	rsb	r4, r4, #12
 800060e:	f1c4 0220 	rsb	r2, r4, #32
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 f304 	lsl.w	r3, r1, r4
 800061a:	ea40 0003 	orr.w	r0, r0, r3
 800061e:	4629      	mov	r1, r5
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	fa21 f004 	lsr.w	r0, r1, r4
 8000626:	4629      	mov	r1, r5
 8000628:	bd30      	pop	{r4, r5, pc}
 800062a:	f094 0f00 	teq	r4, #0
 800062e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000632:	bf06      	itte	eq
 8000634:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000638:	3401      	addeq	r4, #1
 800063a:	3d01      	subne	r5, #1
 800063c:	e74e      	b.n	80004dc <__adddf3+0x8c>
 800063e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000642:	bf18      	it	ne
 8000644:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000648:	d029      	beq.n	800069e <__adddf3+0x24e>
 800064a:	ea94 0f05 	teq	r4, r5
 800064e:	bf08      	it	eq
 8000650:	ea90 0f02 	teqeq	r0, r2
 8000654:	d005      	beq.n	8000662 <__adddf3+0x212>
 8000656:	ea54 0c00 	orrs.w	ip, r4, r0
 800065a:	bf04      	itt	eq
 800065c:	4619      	moveq	r1, r3
 800065e:	4610      	moveq	r0, r2
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	ea91 0f03 	teq	r1, r3
 8000666:	bf1e      	ittt	ne
 8000668:	2100      	movne	r1, #0
 800066a:	2000      	movne	r0, #0
 800066c:	bd30      	popne	{r4, r5, pc}
 800066e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000672:	d105      	bne.n	8000680 <__adddf3+0x230>
 8000674:	0040      	lsls	r0, r0, #1
 8000676:	4149      	adcs	r1, r1
 8000678:	bf28      	it	cs
 800067a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd30      	pop	{r4, r5, pc}
 8000680:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000684:	bf3c      	itt	cc
 8000686:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800068a:	bd30      	popcc	{r4, r5, pc}
 800068c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000690:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000694:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000698:	f04f 0000 	mov.w	r0, #0
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006a2:	bf1a      	itte	ne
 80006a4:	4619      	movne	r1, r3
 80006a6:	4610      	movne	r0, r2
 80006a8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006ac:	bf1c      	itt	ne
 80006ae:	460b      	movne	r3, r1
 80006b0:	4602      	movne	r2, r0
 80006b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006b6:	bf06      	itte	eq
 80006b8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006bc:	ea91 0f03 	teqeq	r1, r3
 80006c0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	bf00      	nop

080006c8 <__aeabi_ui2d>:
 80006c8:	f090 0f00 	teq	r0, #0
 80006cc:	bf04      	itt	eq
 80006ce:	2100      	moveq	r1, #0
 80006d0:	4770      	bxeq	lr
 80006d2:	b530      	push	{r4, r5, lr}
 80006d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006dc:	f04f 0500 	mov.w	r5, #0
 80006e0:	f04f 0100 	mov.w	r1, #0
 80006e4:	e750      	b.n	8000588 <__adddf3+0x138>
 80006e6:	bf00      	nop

080006e8 <__aeabi_i2d>:
 80006e8:	f090 0f00 	teq	r0, #0
 80006ec:	bf04      	itt	eq
 80006ee:	2100      	moveq	r1, #0
 80006f0:	4770      	bxeq	lr
 80006f2:	b530      	push	{r4, r5, lr}
 80006f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006fc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000700:	bf48      	it	mi
 8000702:	4240      	negmi	r0, r0
 8000704:	f04f 0100 	mov.w	r1, #0
 8000708:	e73e      	b.n	8000588 <__adddf3+0x138>
 800070a:	bf00      	nop

0800070c <__aeabi_f2d>:
 800070c:	0042      	lsls	r2, r0, #1
 800070e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000712:	ea4f 0131 	mov.w	r1, r1, rrx
 8000716:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800071a:	bf1f      	itttt	ne
 800071c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000720:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000724:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000728:	4770      	bxne	lr
 800072a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800072e:	bf08      	it	eq
 8000730:	4770      	bxeq	lr
 8000732:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000736:	bf04      	itt	eq
 8000738:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800073c:	4770      	bxeq	lr
 800073e:	b530      	push	{r4, r5, lr}
 8000740:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000744:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	e71c      	b.n	8000588 <__adddf3+0x138>
 800074e:	bf00      	nop

08000750 <__aeabi_ul2d>:
 8000750:	ea50 0201 	orrs.w	r2, r0, r1
 8000754:	bf08      	it	eq
 8000756:	4770      	bxeq	lr
 8000758:	b530      	push	{r4, r5, lr}
 800075a:	f04f 0500 	mov.w	r5, #0
 800075e:	e00a      	b.n	8000776 <__aeabi_l2d+0x16>

08000760 <__aeabi_l2d>:
 8000760:	ea50 0201 	orrs.w	r2, r0, r1
 8000764:	bf08      	it	eq
 8000766:	4770      	bxeq	lr
 8000768:	b530      	push	{r4, r5, lr}
 800076a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800076e:	d502      	bpl.n	8000776 <__aeabi_l2d+0x16>
 8000770:	4240      	negs	r0, r0
 8000772:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000776:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800077a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000782:	f43f aed8 	beq.w	8000536 <__adddf3+0xe6>
 8000786:	f04f 0203 	mov.w	r2, #3
 800078a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078e:	bf18      	it	ne
 8000790:	3203      	addne	r2, #3
 8000792:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000796:	bf18      	it	ne
 8000798:	3203      	addne	r2, #3
 800079a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800079e:	f1c2 0320 	rsb	r3, r2, #32
 80007a2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007a6:	fa20 f002 	lsr.w	r0, r0, r2
 80007aa:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ae:	ea40 000e 	orr.w	r0, r0, lr
 80007b2:	fa21 f102 	lsr.w	r1, r1, r2
 80007b6:	4414      	add	r4, r2
 80007b8:	e6bd      	b.n	8000536 <__adddf3+0xe6>
 80007ba:	bf00      	nop

080007bc <__gedf2>:
 80007bc:	f04f 3cff 	mov.w	ip, #4294967295
 80007c0:	e006      	b.n	80007d0 <__cmpdf2+0x4>
 80007c2:	bf00      	nop

080007c4 <__ledf2>:
 80007c4:	f04f 0c01 	mov.w	ip, #1
 80007c8:	e002      	b.n	80007d0 <__cmpdf2+0x4>
 80007ca:	bf00      	nop

080007cc <__cmpdf2>:
 80007cc:	f04f 0c01 	mov.w	ip, #1
 80007d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007e6:	d01b      	beq.n	8000820 <__cmpdf2+0x54>
 80007e8:	b001      	add	sp, #4
 80007ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007ee:	bf0c      	ite	eq
 80007f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007f4:	ea91 0f03 	teqne	r1, r3
 80007f8:	bf02      	ittt	eq
 80007fa:	ea90 0f02 	teqeq	r0, r2
 80007fe:	2000      	moveq	r0, #0
 8000800:	4770      	bxeq	lr
 8000802:	f110 0f00 	cmn.w	r0, #0
 8000806:	ea91 0f03 	teq	r1, r3
 800080a:	bf58      	it	pl
 800080c:	4299      	cmppl	r1, r3
 800080e:	bf08      	it	eq
 8000810:	4290      	cmpeq	r0, r2
 8000812:	bf2c      	ite	cs
 8000814:	17d8      	asrcs	r0, r3, #31
 8000816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800081a:	f040 0001 	orr.w	r0, r0, #1
 800081e:	4770      	bx	lr
 8000820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000828:	d102      	bne.n	8000830 <__cmpdf2+0x64>
 800082a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800082e:	d107      	bne.n	8000840 <__cmpdf2+0x74>
 8000830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000838:	d1d6      	bne.n	80007e8 <__cmpdf2+0x1c>
 800083a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800083e:	d0d3      	beq.n	80007e8 <__cmpdf2+0x1c>
 8000840:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop

08000848 <__aeabi_cdrcmple>:
 8000848:	4684      	mov	ip, r0
 800084a:	4610      	mov	r0, r2
 800084c:	4662      	mov	r2, ip
 800084e:	468c      	mov	ip, r1
 8000850:	4619      	mov	r1, r3
 8000852:	4663      	mov	r3, ip
 8000854:	e000      	b.n	8000858 <__aeabi_cdcmpeq>
 8000856:	bf00      	nop

08000858 <__aeabi_cdcmpeq>:
 8000858:	b501      	push	{r0, lr}
 800085a:	f7ff ffb7 	bl	80007cc <__cmpdf2>
 800085e:	2800      	cmp	r0, #0
 8000860:	bf48      	it	mi
 8000862:	f110 0f00 	cmnmi.w	r0, #0
 8000866:	bd01      	pop	{r0, pc}

08000868 <__aeabi_dcmpeq>:
 8000868:	f84d ed08 	str.w	lr, [sp, #-8]!
 800086c:	f7ff fff4 	bl	8000858 <__aeabi_cdcmpeq>
 8000870:	bf0c      	ite	eq
 8000872:	2001      	moveq	r0, #1
 8000874:	2000      	movne	r0, #0
 8000876:	f85d fb08 	ldr.w	pc, [sp], #8
 800087a:	bf00      	nop

0800087c <__aeabi_dcmplt>:
 800087c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000880:	f7ff ffea 	bl	8000858 <__aeabi_cdcmpeq>
 8000884:	bf34      	ite	cc
 8000886:	2001      	movcc	r0, #1
 8000888:	2000      	movcs	r0, #0
 800088a:	f85d fb08 	ldr.w	pc, [sp], #8
 800088e:	bf00      	nop

08000890 <__aeabi_dcmple>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff ffe0 	bl	8000858 <__aeabi_cdcmpeq>
 8000898:	bf94      	ite	ls
 800089a:	2001      	movls	r0, #1
 800089c:	2000      	movhi	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_dcmpge>:
 80008a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a8:	f7ff ffce 	bl	8000848 <__aeabi_cdrcmple>
 80008ac:	bf94      	ite	ls
 80008ae:	2001      	movls	r0, #1
 80008b0:	2000      	movhi	r0, #0
 80008b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008b6:	bf00      	nop

080008b8 <__aeabi_dcmpgt>:
 80008b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008bc:	f7ff ffc4 	bl	8000848 <__aeabi_cdrcmple>
 80008c0:	bf34      	ite	cc
 80008c2:	2001      	movcc	r0, #1
 80008c4:	2000      	movcs	r0, #0
 80008c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ca:	bf00      	nop

080008cc <__aeabi_d2iz>:
 80008cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008d4:	d215      	bcs.n	8000902 <__aeabi_d2iz+0x36>
 80008d6:	d511      	bpl.n	80008fc <__aeabi_d2iz+0x30>
 80008d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008e0:	d912      	bls.n	8000908 <__aeabi_d2iz+0x3c>
 80008e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80008f2:	fa23 f002 	lsr.w	r0, r3, r2
 80008f6:	bf18      	it	ne
 80008f8:	4240      	negne	r0, r0
 80008fa:	4770      	bx	lr
 80008fc:	f04f 0000 	mov.w	r0, #0
 8000900:	4770      	bx	lr
 8000902:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000906:	d105      	bne.n	8000914 <__aeabi_d2iz+0x48>
 8000908:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800090c:	bf08      	it	eq
 800090e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop

0800091c <__aeabi_d2f>:
 800091c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000920:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000924:	bf24      	itt	cs
 8000926:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800092a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800092e:	d90d      	bls.n	800094c <__aeabi_d2f+0x30>
 8000930:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000934:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000938:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800093c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000940:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000944:	bf08      	it	eq
 8000946:	f020 0001 	biceq.w	r0, r0, #1
 800094a:	4770      	bx	lr
 800094c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000950:	d121      	bne.n	8000996 <__aeabi_d2f+0x7a>
 8000952:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000956:	bfbc      	itt	lt
 8000958:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800095c:	4770      	bxlt	lr
 800095e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000962:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000966:	f1c2 0218 	rsb	r2, r2, #24
 800096a:	f1c2 0c20 	rsb	ip, r2, #32
 800096e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000972:	fa20 f002 	lsr.w	r0, r0, r2
 8000976:	bf18      	it	ne
 8000978:	f040 0001 	orrne.w	r0, r0, #1
 800097c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000980:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000984:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000988:	ea40 000c 	orr.w	r0, r0, ip
 800098c:	fa23 f302 	lsr.w	r3, r3, r2
 8000990:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000994:	e7cc      	b.n	8000930 <__aeabi_d2f+0x14>
 8000996:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800099a:	d107      	bne.n	80009ac <__aeabi_d2f+0x90>
 800099c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009a0:	bf1e      	ittt	ne
 80009a2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009a6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009aa:	4770      	bxne	lr
 80009ac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_uldivmod>:
 80009bc:	b953      	cbnz	r3, 80009d4 <__aeabi_uldivmod+0x18>
 80009be:	b94a      	cbnz	r2, 80009d4 <__aeabi_uldivmod+0x18>
 80009c0:	2900      	cmp	r1, #0
 80009c2:	bf08      	it	eq
 80009c4:	2800      	cmpeq	r0, #0
 80009c6:	bf1c      	itt	ne
 80009c8:	f04f 31ff 	movne.w	r1, #4294967295
 80009cc:	f04f 30ff 	movne.w	r0, #4294967295
 80009d0:	f000 b974 	b.w	8000cbc <__aeabi_idiv0>
 80009d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009dc:	f000 f806 	bl	80009ec <__udivmoddi4>
 80009e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e8:	b004      	add	sp, #16
 80009ea:	4770      	bx	lr

080009ec <__udivmoddi4>:
 80009ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f0:	9d08      	ldr	r5, [sp, #32]
 80009f2:	4604      	mov	r4, r0
 80009f4:	468e      	mov	lr, r1
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d14d      	bne.n	8000a96 <__udivmoddi4+0xaa>
 80009fa:	428a      	cmp	r2, r1
 80009fc:	4694      	mov	ip, r2
 80009fe:	d969      	bls.n	8000ad4 <__udivmoddi4+0xe8>
 8000a00:	fab2 f282 	clz	r2, r2
 8000a04:	b152      	cbz	r2, 8000a1c <__udivmoddi4+0x30>
 8000a06:	fa01 f302 	lsl.w	r3, r1, r2
 8000a0a:	f1c2 0120 	rsb	r1, r2, #32
 8000a0e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a12:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a16:	ea41 0e03 	orr.w	lr, r1, r3
 8000a1a:	4094      	lsls	r4, r2
 8000a1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a20:	0c21      	lsrs	r1, r4, #16
 8000a22:	fbbe f6f8 	udiv	r6, lr, r8
 8000a26:	fa1f f78c 	uxth.w	r7, ip
 8000a2a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a2e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a32:	fb06 f107 	mul.w	r1, r6, r7
 8000a36:	4299      	cmp	r1, r3
 8000a38:	d90a      	bls.n	8000a50 <__udivmoddi4+0x64>
 8000a3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a3e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a42:	f080 811f 	bcs.w	8000c84 <__udivmoddi4+0x298>
 8000a46:	4299      	cmp	r1, r3
 8000a48:	f240 811c 	bls.w	8000c84 <__udivmoddi4+0x298>
 8000a4c:	3e02      	subs	r6, #2
 8000a4e:	4463      	add	r3, ip
 8000a50:	1a5b      	subs	r3, r3, r1
 8000a52:	b2a4      	uxth	r4, r4
 8000a54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a58:	fb08 3310 	mls	r3, r8, r0, r3
 8000a5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a60:	fb00 f707 	mul.w	r7, r0, r7
 8000a64:	42a7      	cmp	r7, r4
 8000a66:	d90a      	bls.n	8000a7e <__udivmoddi4+0x92>
 8000a68:	eb1c 0404 	adds.w	r4, ip, r4
 8000a6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a70:	f080 810a 	bcs.w	8000c88 <__udivmoddi4+0x29c>
 8000a74:	42a7      	cmp	r7, r4
 8000a76:	f240 8107 	bls.w	8000c88 <__udivmoddi4+0x29c>
 8000a7a:	4464      	add	r4, ip
 8000a7c:	3802      	subs	r0, #2
 8000a7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a82:	1be4      	subs	r4, r4, r7
 8000a84:	2600      	movs	r6, #0
 8000a86:	b11d      	cbz	r5, 8000a90 <__udivmoddi4+0xa4>
 8000a88:	40d4      	lsrs	r4, r2
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	e9c5 4300 	strd	r4, r3, [r5]
 8000a90:	4631      	mov	r1, r6
 8000a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a96:	428b      	cmp	r3, r1
 8000a98:	d909      	bls.n	8000aae <__udivmoddi4+0xc2>
 8000a9a:	2d00      	cmp	r5, #0
 8000a9c:	f000 80ef 	beq.w	8000c7e <__udivmoddi4+0x292>
 8000aa0:	2600      	movs	r6, #0
 8000aa2:	e9c5 0100 	strd	r0, r1, [r5]
 8000aa6:	4630      	mov	r0, r6
 8000aa8:	4631      	mov	r1, r6
 8000aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aae:	fab3 f683 	clz	r6, r3
 8000ab2:	2e00      	cmp	r6, #0
 8000ab4:	d14a      	bne.n	8000b4c <__udivmoddi4+0x160>
 8000ab6:	428b      	cmp	r3, r1
 8000ab8:	d302      	bcc.n	8000ac0 <__udivmoddi4+0xd4>
 8000aba:	4282      	cmp	r2, r0
 8000abc:	f200 80f9 	bhi.w	8000cb2 <__udivmoddi4+0x2c6>
 8000ac0:	1a84      	subs	r4, r0, r2
 8000ac2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	469e      	mov	lr, r3
 8000aca:	2d00      	cmp	r5, #0
 8000acc:	d0e0      	beq.n	8000a90 <__udivmoddi4+0xa4>
 8000ace:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ad2:	e7dd      	b.n	8000a90 <__udivmoddi4+0xa4>
 8000ad4:	b902      	cbnz	r2, 8000ad8 <__udivmoddi4+0xec>
 8000ad6:	deff      	udf	#255	; 0xff
 8000ad8:	fab2 f282 	clz	r2, r2
 8000adc:	2a00      	cmp	r2, #0
 8000ade:	f040 8092 	bne.w	8000c06 <__udivmoddi4+0x21a>
 8000ae2:	eba1 010c 	sub.w	r1, r1, ip
 8000ae6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aea:	fa1f fe8c 	uxth.w	lr, ip
 8000aee:	2601      	movs	r6, #1
 8000af0:	0c20      	lsrs	r0, r4, #16
 8000af2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000af6:	fb07 1113 	mls	r1, r7, r3, r1
 8000afa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000afe:	fb0e f003 	mul.w	r0, lr, r3
 8000b02:	4288      	cmp	r0, r1
 8000b04:	d908      	bls.n	8000b18 <__udivmoddi4+0x12c>
 8000b06:	eb1c 0101 	adds.w	r1, ip, r1
 8000b0a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b0e:	d202      	bcs.n	8000b16 <__udivmoddi4+0x12a>
 8000b10:	4288      	cmp	r0, r1
 8000b12:	f200 80cb 	bhi.w	8000cac <__udivmoddi4+0x2c0>
 8000b16:	4643      	mov	r3, r8
 8000b18:	1a09      	subs	r1, r1, r0
 8000b1a:	b2a4      	uxth	r4, r4
 8000b1c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b20:	fb07 1110 	mls	r1, r7, r0, r1
 8000b24:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b28:	fb0e fe00 	mul.w	lr, lr, r0
 8000b2c:	45a6      	cmp	lr, r4
 8000b2e:	d908      	bls.n	8000b42 <__udivmoddi4+0x156>
 8000b30:	eb1c 0404 	adds.w	r4, ip, r4
 8000b34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b38:	d202      	bcs.n	8000b40 <__udivmoddi4+0x154>
 8000b3a:	45a6      	cmp	lr, r4
 8000b3c:	f200 80bb 	bhi.w	8000cb6 <__udivmoddi4+0x2ca>
 8000b40:	4608      	mov	r0, r1
 8000b42:	eba4 040e 	sub.w	r4, r4, lr
 8000b46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b4a:	e79c      	b.n	8000a86 <__udivmoddi4+0x9a>
 8000b4c:	f1c6 0720 	rsb	r7, r6, #32
 8000b50:	40b3      	lsls	r3, r6
 8000b52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b5a:	fa20 f407 	lsr.w	r4, r0, r7
 8000b5e:	fa01 f306 	lsl.w	r3, r1, r6
 8000b62:	431c      	orrs	r4, r3
 8000b64:	40f9      	lsrs	r1, r7
 8000b66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b6a:	fa00 f306 	lsl.w	r3, r0, r6
 8000b6e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b72:	0c20      	lsrs	r0, r4, #16
 8000b74:	fa1f fe8c 	uxth.w	lr, ip
 8000b78:	fb09 1118 	mls	r1, r9, r8, r1
 8000b7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b80:	fb08 f00e 	mul.w	r0, r8, lr
 8000b84:	4288      	cmp	r0, r1
 8000b86:	fa02 f206 	lsl.w	r2, r2, r6
 8000b8a:	d90b      	bls.n	8000ba4 <__udivmoddi4+0x1b8>
 8000b8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b94:	f080 8088 	bcs.w	8000ca8 <__udivmoddi4+0x2bc>
 8000b98:	4288      	cmp	r0, r1
 8000b9a:	f240 8085 	bls.w	8000ca8 <__udivmoddi4+0x2bc>
 8000b9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000ba2:	4461      	add	r1, ip
 8000ba4:	1a09      	subs	r1, r1, r0
 8000ba6:	b2a4      	uxth	r4, r4
 8000ba8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bac:	fb09 1110 	mls	r1, r9, r0, r1
 8000bb0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bb4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bb8:	458e      	cmp	lr, r1
 8000bba:	d908      	bls.n	8000bce <__udivmoddi4+0x1e2>
 8000bbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000bc0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bc4:	d26c      	bcs.n	8000ca0 <__udivmoddi4+0x2b4>
 8000bc6:	458e      	cmp	lr, r1
 8000bc8:	d96a      	bls.n	8000ca0 <__udivmoddi4+0x2b4>
 8000bca:	3802      	subs	r0, #2
 8000bcc:	4461      	add	r1, ip
 8000bce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bd2:	fba0 9402 	umull	r9, r4, r0, r2
 8000bd6:	eba1 010e 	sub.w	r1, r1, lr
 8000bda:	42a1      	cmp	r1, r4
 8000bdc:	46c8      	mov	r8, r9
 8000bde:	46a6      	mov	lr, r4
 8000be0:	d356      	bcc.n	8000c90 <__udivmoddi4+0x2a4>
 8000be2:	d053      	beq.n	8000c8c <__udivmoddi4+0x2a0>
 8000be4:	b15d      	cbz	r5, 8000bfe <__udivmoddi4+0x212>
 8000be6:	ebb3 0208 	subs.w	r2, r3, r8
 8000bea:	eb61 010e 	sbc.w	r1, r1, lr
 8000bee:	fa01 f707 	lsl.w	r7, r1, r7
 8000bf2:	fa22 f306 	lsr.w	r3, r2, r6
 8000bf6:	40f1      	lsrs	r1, r6
 8000bf8:	431f      	orrs	r7, r3
 8000bfa:	e9c5 7100 	strd	r7, r1, [r5]
 8000bfe:	2600      	movs	r6, #0
 8000c00:	4631      	mov	r1, r6
 8000c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c06:	f1c2 0320 	rsb	r3, r2, #32
 8000c0a:	40d8      	lsrs	r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	fa21 f303 	lsr.w	r3, r1, r3
 8000c14:	4091      	lsls	r1, r2
 8000c16:	4301      	orrs	r1, r0
 8000c18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1c:	fa1f fe8c 	uxth.w	lr, ip
 8000c20:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c24:	fb07 3610 	mls	r6, r7, r0, r3
 8000c28:	0c0b      	lsrs	r3, r1, #16
 8000c2a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c2e:	fb00 f60e 	mul.w	r6, r0, lr
 8000c32:	429e      	cmp	r6, r3
 8000c34:	fa04 f402 	lsl.w	r4, r4, r2
 8000c38:	d908      	bls.n	8000c4c <__udivmoddi4+0x260>
 8000c3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c42:	d22f      	bcs.n	8000ca4 <__udivmoddi4+0x2b8>
 8000c44:	429e      	cmp	r6, r3
 8000c46:	d92d      	bls.n	8000ca4 <__udivmoddi4+0x2b8>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1b9b      	subs	r3, r3, r6
 8000c4e:	b289      	uxth	r1, r1
 8000c50:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c54:	fb07 3316 	mls	r3, r7, r6, r3
 8000c58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c5c:	fb06 f30e 	mul.w	r3, r6, lr
 8000c60:	428b      	cmp	r3, r1
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x28a>
 8000c64:	eb1c 0101 	adds.w	r1, ip, r1
 8000c68:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c6c:	d216      	bcs.n	8000c9c <__udivmoddi4+0x2b0>
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d914      	bls.n	8000c9c <__udivmoddi4+0x2b0>
 8000c72:	3e02      	subs	r6, #2
 8000c74:	4461      	add	r1, ip
 8000c76:	1ac9      	subs	r1, r1, r3
 8000c78:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c7c:	e738      	b.n	8000af0 <__udivmoddi4+0x104>
 8000c7e:	462e      	mov	r6, r5
 8000c80:	4628      	mov	r0, r5
 8000c82:	e705      	b.n	8000a90 <__udivmoddi4+0xa4>
 8000c84:	4606      	mov	r6, r0
 8000c86:	e6e3      	b.n	8000a50 <__udivmoddi4+0x64>
 8000c88:	4618      	mov	r0, r3
 8000c8a:	e6f8      	b.n	8000a7e <__udivmoddi4+0x92>
 8000c8c:	454b      	cmp	r3, r9
 8000c8e:	d2a9      	bcs.n	8000be4 <__udivmoddi4+0x1f8>
 8000c90:	ebb9 0802 	subs.w	r8, r9, r2
 8000c94:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c98:	3801      	subs	r0, #1
 8000c9a:	e7a3      	b.n	8000be4 <__udivmoddi4+0x1f8>
 8000c9c:	4646      	mov	r6, r8
 8000c9e:	e7ea      	b.n	8000c76 <__udivmoddi4+0x28a>
 8000ca0:	4620      	mov	r0, r4
 8000ca2:	e794      	b.n	8000bce <__udivmoddi4+0x1e2>
 8000ca4:	4640      	mov	r0, r8
 8000ca6:	e7d1      	b.n	8000c4c <__udivmoddi4+0x260>
 8000ca8:	46d0      	mov	r8, sl
 8000caa:	e77b      	b.n	8000ba4 <__udivmoddi4+0x1b8>
 8000cac:	3b02      	subs	r3, #2
 8000cae:	4461      	add	r1, ip
 8000cb0:	e732      	b.n	8000b18 <__udivmoddi4+0x12c>
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	e709      	b.n	8000aca <__udivmoddi4+0xde>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	e742      	b.n	8000b42 <__udivmoddi4+0x156>

08000cbc <__aeabi_idiv0>:
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop

08000cc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cc4:	f000 fbda 	bl	800147c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cc8:	f000 f856 	bl	8000d78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ccc:	f000 f8e8 	bl	8000ea0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000cd0:	f000 f8bc 	bl	8000e4c <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8000cd4:	f006 faa8 	bl	8007228 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(Butt_GPIO_Port, Butt_Pin)){
 8000cd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cdc:	4825      	ldr	r0, [pc, #148]	; (8000d74 <main+0xb4>)
 8000cde:	f000 ff21 	bl	8001b24 <HAL_GPIO_ReadPin>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d03e      	beq.n	8000d66 <main+0xa6>
		  circle(160);
 8000ce8:	20a0      	movs	r0, #160	; 0xa0
 8000cea:	f000 f9ef 	bl	80010cc <circle>
		  step(0,0,0);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	f000 f9c4 	bl	8001080 <step>
		  step(-50,-40,0);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f06f 0127 	mvn.w	r1, #39	; 0x27
 8000cfe:	f06f 0031 	mvn.w	r0, #49	; 0x31
 8000d02:	f000 f9bd 	bl	8001080 <step>
		  circle(45);
 8000d06:	202d      	movs	r0, #45	; 0x2d
 8000d08:	f000 f9e0 	bl	80010cc <circle>
		  step(0,0,0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2100      	movs	r1, #0
 8000d10:	2000      	movs	r0, #0
 8000d12:	f000 f9b5 	bl	8001080 <step>
		  step(-100,0,0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2100      	movs	r1, #0
 8000d1a:	f06f 0063 	mvn.w	r0, #99	; 0x63
 8000d1e:	f000 f9af 	bl	8001080 <step>
		  circle(45);
 8000d22:	202d      	movs	r0, #45	; 0x2d
 8000d24:	f000 f9d2 	bl	80010cc <circle>
		  step(0,0,0);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	f000 f9a7 	bl	8001080 <step>
		  step(0,100,0);
 8000d32:	2200      	movs	r2, #0
 8000d34:	2164      	movs	r1, #100	; 0x64
 8000d36:	2000      	movs	r0, #0
 8000d38:	f000 f9a2 	bl	8001080 <step>
		  step(100,0,0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2100      	movs	r1, #0
 8000d40:	2064      	movs	r0, #100	; 0x64
 8000d42:	f000 f99d 	bl	8001080 <step>
		  step(0,0,1);
 8000d46:	2201      	movs	r2, #1
 8000d48:	2100      	movs	r1, #0
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	f000 f998 	bl	8001080 <step>
		  step(150,0,1);
 8000d50:	2201      	movs	r2, #1
 8000d52:	2100      	movs	r1, #0
 8000d54:	2096      	movs	r0, #150	; 0x96
 8000d56:	f000 f993 	bl	8001080 <step>
		  step(0,0,0);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	2000      	movs	r0, #0
 8000d60:	f000 f98e 	bl	8001080 <step>
 8000d64:	e7b8      	b.n	8000cd8 <main+0x18>
	  }else{
		  step(0,0,0);
 8000d66:	2200      	movs	r2, #0
 8000d68:	2100      	movs	r1, #0
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	f000 f988 	bl	8001080 <step>
	  if(HAL_GPIO_ReadPin(Butt_GPIO_Port, Butt_Pin)){
 8000d70:	e7b2      	b.n	8000cd8 <main+0x18>
 8000d72:	bf00      	nop
 8000d74:	40020800 	.word	0x40020800

08000d78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b094      	sub	sp, #80	; 0x50
 8000d7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d7e:	f107 0320 	add.w	r3, r7, #32
 8000d82:	2230      	movs	r2, #48	; 0x30
 8000d84:	2100      	movs	r1, #0
 8000d86:	4618      	mov	r0, r3
 8000d88:	f006 feb8 	bl	8007afc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d8c:	f107 030c 	add.w	r3, r7, #12
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60bb      	str	r3, [r7, #8]
 8000da0:	4b28      	ldr	r3, [pc, #160]	; (8000e44 <SystemClock_Config+0xcc>)
 8000da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da4:	4a27      	ldr	r2, [pc, #156]	; (8000e44 <SystemClock_Config+0xcc>)
 8000da6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000daa:	6413      	str	r3, [r2, #64]	; 0x40
 8000dac:	4b25      	ldr	r3, [pc, #148]	; (8000e44 <SystemClock_Config+0xcc>)
 8000dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db4:	60bb      	str	r3, [r7, #8]
 8000db6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000db8:	2300      	movs	r3, #0
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	4b22      	ldr	r3, [pc, #136]	; (8000e48 <SystemClock_Config+0xd0>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a21      	ldr	r2, [pc, #132]	; (8000e48 <SystemClock_Config+0xd0>)
 8000dc2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dc6:	6013      	str	r3, [r2, #0]
 8000dc8:	4b1f      	ldr	r3, [pc, #124]	; (8000e48 <SystemClock_Config+0xd0>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000dd8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ddc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dde:	2302      	movs	r3, #2
 8000de0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000de2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000de6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000de8:	2304      	movs	r3, #4
 8000dea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000dec:	23a8      	movs	r3, #168	; 0xa8
 8000dee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000df0:	2302      	movs	r3, #2
 8000df2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000df4:	2307      	movs	r3, #7
 8000df6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df8:	f107 0320 	add.w	r3, r7, #32
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f002 f927 	bl	8003050 <HAL_RCC_OscConfig>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e08:	f000 fa52 	bl	80012b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e0c:	230f      	movs	r3, #15
 8000e0e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e10:	2302      	movs	r3, #2
 8000e12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e18:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e22:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e24:	f107 030c 	add.w	r3, r7, #12
 8000e28:	2105      	movs	r1, #5
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f002 fb88 	bl	8003540 <HAL_RCC_ClockConfig>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000e36:	f000 fa3b 	bl	80012b0 <Error_Handler>
  }
}
 8000e3a:	bf00      	nop
 8000e3c:	3750      	adds	r7, #80	; 0x50
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40007000 	.word	0x40007000

08000e4c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e50:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <MX_USART3_UART_Init+0x4c>)
 8000e52:	4a12      	ldr	r2, [pc, #72]	; (8000e9c <MX_USART3_UART_Init+0x50>)
 8000e54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e56:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <MX_USART3_UART_Init+0x4c>)
 8000e58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <MX_USART3_UART_Init+0x4c>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <MX_USART3_UART_Init+0x4c>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e6a:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <MX_USART3_UART_Init+0x4c>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e70:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <MX_USART3_UART_Init+0x4c>)
 8000e72:	220c      	movs	r2, #12
 8000e74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e76:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <MX_USART3_UART_Init+0x4c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <MX_USART3_UART_Init+0x4c>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e82:	4805      	ldr	r0, [pc, #20]	; (8000e98 <MX_USART3_UART_Init+0x4c>)
 8000e84:	f002 fd7c 	bl	8003980 <HAL_UART_Init>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000e8e:	f000 fa0f 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000138 	.word	0x20000138
 8000e9c:	40004800 	.word	0x40004800

08000ea0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08c      	sub	sp, #48	; 0x30
 8000ea4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea6:	f107 031c 	add.w	r3, r7, #28
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	60da      	str	r2, [r3, #12]
 8000eb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61bb      	str	r3, [r7, #24]
 8000eba:	4b6c      	ldr	r3, [pc, #432]	; (800106c <MX_GPIO_Init+0x1cc>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4a6b      	ldr	r2, [pc, #428]	; (800106c <MX_GPIO_Init+0x1cc>)
 8000ec0:	f043 0304 	orr.w	r3, r3, #4
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4b69      	ldr	r3, [pc, #420]	; (800106c <MX_GPIO_Init+0x1cc>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f003 0304 	and.w	r3, r3, #4
 8000ece:	61bb      	str	r3, [r7, #24]
 8000ed0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
 8000ed6:	4b65      	ldr	r3, [pc, #404]	; (800106c <MX_GPIO_Init+0x1cc>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	4a64      	ldr	r2, [pc, #400]	; (800106c <MX_GPIO_Init+0x1cc>)
 8000edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee2:	4b62      	ldr	r3, [pc, #392]	; (800106c <MX_GPIO_Init+0x1cc>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eea:	617b      	str	r3, [r7, #20]
 8000eec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
 8000ef2:	4b5e      	ldr	r3, [pc, #376]	; (800106c <MX_GPIO_Init+0x1cc>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a5d      	ldr	r2, [pc, #372]	; (800106c <MX_GPIO_Init+0x1cc>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b5b      	ldr	r3, [pc, #364]	; (800106c <MX_GPIO_Init+0x1cc>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	613b      	str	r3, [r7, #16]
 8000f08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	4b57      	ldr	r3, [pc, #348]	; (800106c <MX_GPIO_Init+0x1cc>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4a56      	ldr	r2, [pc, #344]	; (800106c <MX_GPIO_Init+0x1cc>)
 8000f14:	f043 0302 	orr.w	r3, r3, #2
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1a:	4b54      	ldr	r3, [pc, #336]	; (800106c <MX_GPIO_Init+0x1cc>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	f003 0302 	and.w	r3, r3, #2
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	4b50      	ldr	r3, [pc, #320]	; (800106c <MX_GPIO_Init+0x1cc>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a4f      	ldr	r2, [pc, #316]	; (800106c <MX_GPIO_Init+0x1cc>)
 8000f30:	f043 0308 	orr.w	r3, r3, #8
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b4d      	ldr	r3, [pc, #308]	; (800106c <MX_GPIO_Init+0x1cc>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0308 	and.w	r3, r3, #8
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	607b      	str	r3, [r7, #4]
 8000f46:	4b49      	ldr	r3, [pc, #292]	; (800106c <MX_GPIO_Init+0x1cc>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a48      	ldr	r2, [pc, #288]	; (800106c <MX_GPIO_Init+0x1cc>)
 8000f4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b46      	ldr	r3, [pc, #280]	; (800106c <MX_GPIO_Init+0x1cc>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f244 0181 	movw	r1, #16513	; 0x4081
 8000f64:	4842      	ldr	r0, [pc, #264]	; (8001070 <MX_GPIO_Init+0x1d0>)
 8000f66:	f000 fdf5 	bl	8001b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2140      	movs	r1, #64	; 0x40
 8000f6e:	4841      	ldr	r0, [pc, #260]	; (8001074 <MX_GPIO_Init+0x1d4>)
 8000f70:	f000 fdf0 	bl	8001b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Butt_Pin */
  GPIO_InitStruct.Pin = Butt_Pin;
 8000f74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Butt_GPIO_Port, &GPIO_InitStruct);
 8000f82:	f107 031c 	add.w	r3, r7, #28
 8000f86:	4619      	mov	r1, r3
 8000f88:	483b      	ldr	r0, [pc, #236]	; (8001078 <MX_GPIO_Init+0x1d8>)
 8000f8a:	f000 fc1f 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f8e:	2332      	movs	r3, #50	; 0x32
 8000f90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f92:	2302      	movs	r3, #2
 8000f94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f9e:	230b      	movs	r3, #11
 8000fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa2:	f107 031c 	add.w	r3, r7, #28
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4833      	ldr	r0, [pc, #204]	; (8001078 <MX_GPIO_Init+0x1d8>)
 8000faa:	f000 fc0f 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000fae:	2386      	movs	r3, #134	; 0x86
 8000fb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fbe:	230b      	movs	r3, #11
 8000fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc2:	f107 031c 	add.w	r3, r7, #28
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	482c      	ldr	r0, [pc, #176]	; (800107c <MX_GPIO_Init+0x1dc>)
 8000fca:	f000 fbff 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000fce:	f244 0381 	movw	r3, #16513	; 0x4081
 8000fd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe0:	f107 031c 	add.w	r3, r7, #28
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4822      	ldr	r0, [pc, #136]	; (8001070 <MX_GPIO_Init+0x1d0>)
 8000fe8:	f000 fbf0 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000fec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ff0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ffe:	230b      	movs	r3, #11
 8001000:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001002:	f107 031c 	add.w	r3, r7, #28
 8001006:	4619      	mov	r1, r3
 8001008:	4819      	ldr	r0, [pc, #100]	; (8001070 <MX_GPIO_Init+0x1d0>)
 800100a:	f000 fbdf 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800100e:	2340      	movs	r3, #64	; 0x40
 8001010:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001012:	2301      	movs	r3, #1
 8001014:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	2300      	movs	r3, #0
 800101c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800101e:	f107 031c 	add.w	r3, r7, #28
 8001022:	4619      	mov	r1, r3
 8001024:	4813      	ldr	r0, [pc, #76]	; (8001074 <MX_GPIO_Init+0x1d4>)
 8001026:	f000 fbd1 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800102a:	2380      	movs	r3, #128	; 0x80
 800102c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800102e:	2300      	movs	r3, #0
 8001030:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001036:	f107 031c 	add.w	r3, r7, #28
 800103a:	4619      	mov	r1, r3
 800103c:	480d      	ldr	r0, [pc, #52]	; (8001074 <MX_GPIO_Init+0x1d4>)
 800103e:	f000 fbc5 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001042:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001046:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001048:	2302      	movs	r3, #2
 800104a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001050:	2303      	movs	r3, #3
 8001052:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001054:	230b      	movs	r3, #11
 8001056:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001058:	f107 031c 	add.w	r3, r7, #28
 800105c:	4619      	mov	r1, r3
 800105e:	4805      	ldr	r0, [pc, #20]	; (8001074 <MX_GPIO_Init+0x1d4>)
 8001060:	f000 fbb4 	bl	80017cc <HAL_GPIO_Init>

}
 8001064:	bf00      	nop
 8001066:	3730      	adds	r7, #48	; 0x30
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40023800 	.word	0x40023800
 8001070:	40020400 	.word	0x40020400
 8001074:	40021800 	.word	0x40021800
 8001078:	40020800 	.word	0x40020800
 800107c:	40020000 	.word	0x40020000

08001080 <step>:

/* USER CODE BEGIN 4 */
void step(int x, int y, int btn){
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
		  uint8_t buff[4];
		  buff[0] = btn; // stiskni leve tlacitko
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	b2db      	uxtb	r3, r3
 8001090:	753b      	strb	r3, [r7, #20]
		  buff[1] = (int8_t)(x); // posun X +10
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	b2db      	uxtb	r3, r3
 8001096:	757b      	strb	r3, [r7, #21]
		  buff[2] = (int8_t)(y); // posun Y -3
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	b2db      	uxtb	r3, r3
 800109c:	75bb      	strb	r3, [r7, #22]
		  buff[3] = 0; // bez scrollu
 800109e:	2300      	movs	r3, #0
 80010a0:	75fb      	strb	r3, [r7, #23]
		  USBD_HID_SendReport(&hUsbDeviceFS, buff, sizeof(buff));
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	2204      	movs	r2, #4
 80010a8:	4619      	mov	r1, r3
 80010aa:	4807      	ldr	r0, [pc, #28]	; (80010c8 <step+0x48>)
 80010ac:	f004 fd2e 	bl	8005b0c <USBD_HID_SendReport>
		  HAL_Delay(USBD_HID_GetPollingInterval(&hUsbDeviceFS));
 80010b0:	4805      	ldr	r0, [pc, #20]	; (80010c8 <step+0x48>)
 80010b2:	f004 fd5b 	bl	8005b6c <USBD_HID_GetPollingInterval>
 80010b6:	4603      	mov	r3, r0
 80010b8:	4618      	mov	r0, r3
 80010ba:	f000 fa51 	bl	8001560 <HAL_Delay>
	  }
 80010be:	bf00      	nop
 80010c0:	3718      	adds	r7, #24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000184 	.word	0x20000184

080010cc <circle>:

void circle(int radius){
 80010cc:	b5b0      	push	{r4, r5, r7, lr}
 80010ce:	b08c      	sub	sp, #48	; 0x30
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	float angle = 0;
 80010d4:	f04f 0300 	mov.w	r3, #0
 80010d8:	623b      	str	r3, [r7, #32]
	float pi = 3.14159265359;
 80010da:	4b73      	ldr	r3, [pc, #460]	; (80012a8 <circle+0x1dc>)
 80010dc:	61fb      	str	r3, [r7, #28]
	float del_angle = 2*pi/STEPSIZE;
 80010de:	edd7 7a07 	vldr	s15, [r7, #28]
 80010e2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80010e6:	eddf 6a71 	vldr	s13, [pc, #452]	; 80012ac <circle+0x1e0>
 80010ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010ee:	edc7 7a06 	vstr	s15, [r7, #24]
	uint8_t i = 1;
 80010f2:	2301      	movs	r3, #1
 80010f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	float x = 0;
 80010f8:	f04f 0300 	mov.w	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
	float y = 0;
 80010fe:	f04f 0300 	mov.w	r3, #0
 8001102:	613b      	str	r3, [r7, #16]
	float delx = 0;
 8001104:	f04f 0300 	mov.w	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
	float dely = 0;
 800110a:	f04f 0300 	mov.w	r3, #0
 800110e:	60bb      	str	r3, [r7, #8]
	float sx = radius*cos(angle);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff fae9 	bl	80006e8 <__aeabi_i2d>
 8001116:	4604      	mov	r4, r0
 8001118:	460d      	mov	r5, r1
 800111a:	6a38      	ldr	r0, [r7, #32]
 800111c:	f7ff faf6 	bl	800070c <__aeabi_f2d>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	ec43 2b10 	vmov	d0, r2, r3
 8001128:	f006 fcf2 	bl	8007b10 <cos>
 800112c:	ec53 2b10 	vmov	r2, r3, d0
 8001130:	4620      	mov	r0, r4
 8001132:	4629      	mov	r1, r5
 8001134:	f7ff f85c 	bl	80001f0 <__aeabi_dmul>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	4610      	mov	r0, r2
 800113e:	4619      	mov	r1, r3
 8001140:	f7ff fbec 	bl	800091c <__aeabi_d2f>
 8001144:	4603      	mov	r3, r0
 8001146:	62bb      	str	r3, [r7, #40]	; 0x28
	float sy = radius*sin(angle);
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff facd 	bl	80006e8 <__aeabi_i2d>
 800114e:	4604      	mov	r4, r0
 8001150:	460d      	mov	r5, r1
 8001152:	6a38      	ldr	r0, [r7, #32]
 8001154:	f7ff fada 	bl	800070c <__aeabi_f2d>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	ec43 2b10 	vmov	d0, r2, r3
 8001160:	f006 fd2a 	bl	8007bb8 <sin>
 8001164:	ec53 2b10 	vmov	r2, r3, d0
 8001168:	4620      	mov	r0, r4
 800116a:	4629      	mov	r1, r5
 800116c:	f7ff f840 	bl	80001f0 <__aeabi_dmul>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	4610      	mov	r0, r2
 8001176:	4619      	mov	r1, r3
 8001178:	f7ff fbd0 	bl	800091c <__aeabi_d2f>
 800117c:	4603      	mov	r3, r0
 800117e:	627b      	str	r3, [r7, #36]	; 0x24

	step((int)delx,(int)dely,1);
 8001180:	edd7 7a03 	vldr	s15, [r7, #12]
 8001184:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001188:	edd7 7a02 	vldr	s15, [r7, #8]
 800118c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001190:	2201      	movs	r2, #1
 8001192:	ee17 1a90 	vmov	r1, s15
 8001196:	ee17 0a10 	vmov	r0, s14
 800119a:	f7ff ff71 	bl	8001080 <step>
	for(i=0; i<=STEPSIZE+1;i++){
 800119e:	2300      	movs	r3, #0
 80011a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80011a4:	e077      	b.n	8001296 <circle+0x1ca>
		angle = i*del_angle;
 80011a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011aa:	ee07 3a90 	vmov	s15, r3
 80011ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b2:	ed97 7a06 	vldr	s14, [r7, #24]
 80011b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ba:	edc7 7a08 	vstr	s15, [r7, #32]
		x = (float)radius*cos(angle);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	ee07 3a90 	vmov	s15, r3
 80011c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011c8:	ee17 0a90 	vmov	r0, s15
 80011cc:	f7ff fa9e 	bl	800070c <__aeabi_f2d>
 80011d0:	4604      	mov	r4, r0
 80011d2:	460d      	mov	r5, r1
 80011d4:	6a38      	ldr	r0, [r7, #32]
 80011d6:	f7ff fa99 	bl	800070c <__aeabi_f2d>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	ec43 2b10 	vmov	d0, r2, r3
 80011e2:	f006 fc95 	bl	8007b10 <cos>
 80011e6:	ec53 2b10 	vmov	r2, r3, d0
 80011ea:	4620      	mov	r0, r4
 80011ec:	4629      	mov	r1, r5
 80011ee:	f7fe ffff 	bl	80001f0 <__aeabi_dmul>
 80011f2:	4602      	mov	r2, r0
 80011f4:	460b      	mov	r3, r1
 80011f6:	4610      	mov	r0, r2
 80011f8:	4619      	mov	r1, r3
 80011fa:	f7ff fb8f 	bl	800091c <__aeabi_d2f>
 80011fe:	4603      	mov	r3, r0
 8001200:	617b      	str	r3, [r7, #20]
		y = (float)radius*sin(angle);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	ee07 3a90 	vmov	s15, r3
 8001208:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800120c:	ee17 0a90 	vmov	r0, s15
 8001210:	f7ff fa7c 	bl	800070c <__aeabi_f2d>
 8001214:	4604      	mov	r4, r0
 8001216:	460d      	mov	r5, r1
 8001218:	6a38      	ldr	r0, [r7, #32]
 800121a:	f7ff fa77 	bl	800070c <__aeabi_f2d>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	ec43 2b10 	vmov	d0, r2, r3
 8001226:	f006 fcc7 	bl	8007bb8 <sin>
 800122a:	ec53 2b10 	vmov	r2, r3, d0
 800122e:	4620      	mov	r0, r4
 8001230:	4629      	mov	r1, r5
 8001232:	f7fe ffdd 	bl	80001f0 <__aeabi_dmul>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	4610      	mov	r0, r2
 800123c:	4619      	mov	r1, r3
 800123e:	f7ff fb6d 	bl	800091c <__aeabi_d2f>
 8001242:	4603      	mov	r3, r0
 8001244:	613b      	str	r3, [r7, #16]
		delx = x-sx;
 8001246:	ed97 7a05 	vldr	s14, [r7, #20]
 800124a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800124e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001252:	edc7 7a03 	vstr	s15, [r7, #12]
		dely = y-sy;
 8001256:	ed97 7a04 	vldr	s14, [r7, #16]
 800125a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800125e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001262:	edc7 7a02 	vstr	s15, [r7, #8]
		step((int)delx,(int)dely,1);
 8001266:	edd7 7a03 	vldr	s15, [r7, #12]
 800126a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800126e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001272:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001276:	2201      	movs	r2, #1
 8001278:	ee17 1a90 	vmov	r1, s15
 800127c:	ee17 0a10 	vmov	r0, s14
 8001280:	f7ff fefe 	bl	8001080 <step>
		sx = x;
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	62bb      	str	r3, [r7, #40]	; 0x28
		sy = y;
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
	for(i=0; i<=STEPSIZE+1;i++){
 800128c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001290:	3301      	adds	r3, #1
 8001292:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001296:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800129a:	2b65      	cmp	r3, #101	; 0x65
 800129c:	d983      	bls.n	80011a6 <circle+0xda>
	}
}
 800129e:	bf00      	nop
 80012a0:	bf00      	nop
 80012a2:	3730      	adds	r7, #48	; 0x30
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bdb0      	pop	{r4, r5, r7, pc}
 80012a8:	40490fdb 	.word	0x40490fdb
 80012ac:	42c80000 	.word	0x42c80000

080012b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b4:	b672      	cpsid	i
}
 80012b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <Error_Handler+0x8>
	...

080012bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	4b10      	ldr	r3, [pc, #64]	; (8001308 <HAL_MspInit+0x4c>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ca:	4a0f      	ldr	r2, [pc, #60]	; (8001308 <HAL_MspInit+0x4c>)
 80012cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d0:	6453      	str	r3, [r2, #68]	; 0x44
 80012d2:	4b0d      	ldr	r3, [pc, #52]	; (8001308 <HAL_MspInit+0x4c>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	603b      	str	r3, [r7, #0]
 80012e2:	4b09      	ldr	r3, [pc, #36]	; (8001308 <HAL_MspInit+0x4c>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	4a08      	ldr	r2, [pc, #32]	; (8001308 <HAL_MspInit+0x4c>)
 80012e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ec:	6413      	str	r3, [r2, #64]	; 0x40
 80012ee:	4b06      	ldr	r3, [pc, #24]	; (8001308 <HAL_MspInit+0x4c>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f6:	603b      	str	r3, [r7, #0]
 80012f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012fa:	bf00      	nop
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	40023800 	.word	0x40023800

0800130c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08a      	sub	sp, #40	; 0x28
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a19      	ldr	r2, [pc, #100]	; (8001390 <HAL_UART_MspInit+0x84>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d12c      	bne.n	8001388 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	613b      	str	r3, [r7, #16]
 8001332:	4b18      	ldr	r3, [pc, #96]	; (8001394 <HAL_UART_MspInit+0x88>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	4a17      	ldr	r2, [pc, #92]	; (8001394 <HAL_UART_MspInit+0x88>)
 8001338:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800133c:	6413      	str	r3, [r2, #64]	; 0x40
 800133e:	4b15      	ldr	r3, [pc, #84]	; (8001394 <HAL_UART_MspInit+0x88>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001346:	613b      	str	r3, [r7, #16]
 8001348:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	4b11      	ldr	r3, [pc, #68]	; (8001394 <HAL_UART_MspInit+0x88>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a10      	ldr	r2, [pc, #64]	; (8001394 <HAL_UART_MspInit+0x88>)
 8001354:	f043 0308 	orr.w	r3, r3, #8
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <HAL_UART_MspInit+0x88>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0308 	and.w	r3, r3, #8
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001366:	f44f 7340 	mov.w	r3, #768	; 0x300
 800136a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136c:	2302      	movs	r3, #2
 800136e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001374:	2303      	movs	r3, #3
 8001376:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001378:	2307      	movs	r3, #7
 800137a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	4619      	mov	r1, r3
 8001382:	4805      	ldr	r0, [pc, #20]	; (8001398 <HAL_UART_MspInit+0x8c>)
 8001384:	f000 fa22 	bl	80017cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001388:	bf00      	nop
 800138a:	3728      	adds	r7, #40	; 0x28
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40004800 	.word	0x40004800
 8001394:	40023800 	.word	0x40023800
 8001398:	40020c00 	.word	0x40020c00

0800139c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <NMI_Handler+0x4>

080013a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013a6:	e7fe      	b.n	80013a6 <HardFault_Handler+0x4>

080013a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013ac:	e7fe      	b.n	80013ac <MemManage_Handler+0x4>

080013ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013b2:	e7fe      	b.n	80013b2 <BusFault_Handler+0x4>

080013b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <UsageFault_Handler+0x4>

080013ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013e8:	f000 f89a 	bl	8001520 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80013f4:	4802      	ldr	r0, [pc, #8]	; (8001400 <OTG_FS_IRQHandler+0x10>)
 80013f6:	f000 fd16 	bl	8001e26 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000660 	.word	0x20000660

08001404 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <SystemInit+0x20>)
 800140a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800140e:	4a05      	ldr	r2, [pc, #20]	; (8001424 <SystemInit+0x20>)
 8001410:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001414:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001428:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001460 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800142c:	480d      	ldr	r0, [pc, #52]	; (8001464 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800142e:	490e      	ldr	r1, [pc, #56]	; (8001468 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001430:	4a0e      	ldr	r2, [pc, #56]	; (800146c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001432:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001434:	e002      	b.n	800143c <LoopCopyDataInit>

08001436 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001436:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001438:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800143a:	3304      	adds	r3, #4

0800143c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800143c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800143e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001440:	d3f9      	bcc.n	8001436 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001442:	4a0b      	ldr	r2, [pc, #44]	; (8001470 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001444:	4c0b      	ldr	r4, [pc, #44]	; (8001474 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001446:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001448:	e001      	b.n	800144e <LoopFillZerobss>

0800144a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800144a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800144c:	3204      	adds	r2, #4

0800144e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800144e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001450:	d3fb      	bcc.n	800144a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001452:	f7ff ffd7 	bl	8001404 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001456:	f006 fb2d 	bl	8007ab4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800145a:	f7ff fc31 	bl	8000cc0 <main>
  bx  lr    
 800145e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001460:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001464:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001468:	2000011c 	.word	0x2000011c
  ldr r2, =_sidata
 800146c:	08008eb0 	.word	0x08008eb0
  ldr r2, =_sbss
 8001470:	2000011c 	.word	0x2000011c
  ldr r4, =_ebss
 8001474:	20000b80 	.word	0x20000b80

08001478 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001478:	e7fe      	b.n	8001478 <ADC_IRQHandler>
	...

0800147c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001480:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <HAL_Init+0x40>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a0d      	ldr	r2, [pc, #52]	; (80014bc <HAL_Init+0x40>)
 8001486:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800148a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800148c:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <HAL_Init+0x40>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a0a      	ldr	r2, [pc, #40]	; (80014bc <HAL_Init+0x40>)
 8001492:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001496:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001498:	4b08      	ldr	r3, [pc, #32]	; (80014bc <HAL_Init+0x40>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a07      	ldr	r2, [pc, #28]	; (80014bc <HAL_Init+0x40>)
 800149e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a4:	2003      	movs	r0, #3
 80014a6:	f000 f94f 	bl	8001748 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014aa:	2000      	movs	r0, #0
 80014ac:	f000 f808 	bl	80014c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014b0:	f7ff ff04 	bl	80012bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40023c00 	.word	0x40023c00

080014c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014c8:	4b12      	ldr	r3, [pc, #72]	; (8001514 <HAL_InitTick+0x54>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4b12      	ldr	r3, [pc, #72]	; (8001518 <HAL_InitTick+0x58>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	4619      	mov	r1, r3
 80014d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014da:	fbb2 f3f3 	udiv	r3, r2, r3
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 f967 	bl	80017b2 <HAL_SYSTICK_Config>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e00e      	b.n	800150c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2b0f      	cmp	r3, #15
 80014f2:	d80a      	bhi.n	800150a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014f4:	2200      	movs	r2, #0
 80014f6:	6879      	ldr	r1, [r7, #4]
 80014f8:	f04f 30ff 	mov.w	r0, #4294967295
 80014fc:	f000 f92f 	bl	800175e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001500:	4a06      	ldr	r2, [pc, #24]	; (800151c <HAL_InitTick+0x5c>)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001506:	2300      	movs	r3, #0
 8001508:	e000      	b.n	800150c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
}
 800150c:	4618      	mov	r0, r3
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000000 	.word	0x20000000
 8001518:	20000008 	.word	0x20000008
 800151c:	20000004 	.word	0x20000004

08001520 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <HAL_IncTick+0x20>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	461a      	mov	r2, r3
 800152a:	4b06      	ldr	r3, [pc, #24]	; (8001544 <HAL_IncTick+0x24>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4413      	add	r3, r2
 8001530:	4a04      	ldr	r2, [pc, #16]	; (8001544 <HAL_IncTick+0x24>)
 8001532:	6013      	str	r3, [r2, #0]
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	20000008 	.word	0x20000008
 8001544:	2000017c 	.word	0x2000017c

08001548 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  return uwTick;
 800154c:	4b03      	ldr	r3, [pc, #12]	; (800155c <HAL_GetTick+0x14>)
 800154e:	681b      	ldr	r3, [r3, #0]
}
 8001550:	4618      	mov	r0, r3
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	2000017c 	.word	0x2000017c

08001560 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001568:	f7ff ffee 	bl	8001548 <HAL_GetTick>
 800156c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001578:	d005      	beq.n	8001586 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800157a:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <HAL_Delay+0x44>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	461a      	mov	r2, r3
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	4413      	add	r3, r2
 8001584:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001586:	bf00      	nop
 8001588:	f7ff ffde 	bl	8001548 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	429a      	cmp	r2, r3
 8001596:	d8f7      	bhi.n	8001588 <HAL_Delay+0x28>
  {
  }
}
 8001598:	bf00      	nop
 800159a:	bf00      	nop
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000008 	.word	0x20000008

080015a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b8:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <__NVIC_SetPriorityGrouping+0x44>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015be:	68ba      	ldr	r2, [r7, #8]
 80015c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015c4:	4013      	ands	r3, r2
 80015c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015da:	4a04      	ldr	r2, [pc, #16]	; (80015ec <__NVIC_SetPriorityGrouping+0x44>)
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	60d3      	str	r3, [r2, #12]
}
 80015e0:	bf00      	nop
 80015e2:	3714      	adds	r7, #20
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015f4:	4b04      	ldr	r3, [pc, #16]	; (8001608 <__NVIC_GetPriorityGrouping+0x18>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	0a1b      	lsrs	r3, r3, #8
 80015fa:	f003 0307 	and.w	r3, r3, #7
}
 80015fe:	4618      	mov	r0, r3
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	2b00      	cmp	r3, #0
 800161c:	db0b      	blt.n	8001636 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	f003 021f 	and.w	r2, r3, #31
 8001624:	4907      	ldr	r1, [pc, #28]	; (8001644 <__NVIC_EnableIRQ+0x38>)
 8001626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162a:	095b      	lsrs	r3, r3, #5
 800162c:	2001      	movs	r0, #1
 800162e:	fa00 f202 	lsl.w	r2, r0, r2
 8001632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	e000e100 	.word	0xe000e100

08001648 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	6039      	str	r1, [r7, #0]
 8001652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001658:	2b00      	cmp	r3, #0
 800165a:	db0a      	blt.n	8001672 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	b2da      	uxtb	r2, r3
 8001660:	490c      	ldr	r1, [pc, #48]	; (8001694 <__NVIC_SetPriority+0x4c>)
 8001662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001666:	0112      	lsls	r2, r2, #4
 8001668:	b2d2      	uxtb	r2, r2
 800166a:	440b      	add	r3, r1
 800166c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001670:	e00a      	b.n	8001688 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	b2da      	uxtb	r2, r3
 8001676:	4908      	ldr	r1, [pc, #32]	; (8001698 <__NVIC_SetPriority+0x50>)
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	f003 030f 	and.w	r3, r3, #15
 800167e:	3b04      	subs	r3, #4
 8001680:	0112      	lsls	r2, r2, #4
 8001682:	b2d2      	uxtb	r2, r2
 8001684:	440b      	add	r3, r1
 8001686:	761a      	strb	r2, [r3, #24]
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	e000e100 	.word	0xe000e100
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800169c:	b480      	push	{r7}
 800169e:	b089      	sub	sp, #36	; 0x24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	f1c3 0307 	rsb	r3, r3, #7
 80016b6:	2b04      	cmp	r3, #4
 80016b8:	bf28      	it	cs
 80016ba:	2304      	movcs	r3, #4
 80016bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	3304      	adds	r3, #4
 80016c2:	2b06      	cmp	r3, #6
 80016c4:	d902      	bls.n	80016cc <NVIC_EncodePriority+0x30>
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	3b03      	subs	r3, #3
 80016ca:	e000      	b.n	80016ce <NVIC_EncodePriority+0x32>
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d0:	f04f 32ff 	mov.w	r2, #4294967295
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	43da      	mvns	r2, r3
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	401a      	ands	r2, r3
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016e4:	f04f 31ff 	mov.w	r1, #4294967295
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	fa01 f303 	lsl.w	r3, r1, r3
 80016ee:	43d9      	mvns	r1, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f4:	4313      	orrs	r3, r2
         );
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3724      	adds	r7, #36	; 0x24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
	...

08001704 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3b01      	subs	r3, #1
 8001710:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001714:	d301      	bcc.n	800171a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001716:	2301      	movs	r3, #1
 8001718:	e00f      	b.n	800173a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800171a:	4a0a      	ldr	r2, [pc, #40]	; (8001744 <SysTick_Config+0x40>)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3b01      	subs	r3, #1
 8001720:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001722:	210f      	movs	r1, #15
 8001724:	f04f 30ff 	mov.w	r0, #4294967295
 8001728:	f7ff ff8e 	bl	8001648 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800172c:	4b05      	ldr	r3, [pc, #20]	; (8001744 <SysTick_Config+0x40>)
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001732:	4b04      	ldr	r3, [pc, #16]	; (8001744 <SysTick_Config+0x40>)
 8001734:	2207      	movs	r2, #7
 8001736:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	e000e010 	.word	0xe000e010

08001748 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7ff ff29 	bl	80015a8 <__NVIC_SetPriorityGrouping>
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800175e:	b580      	push	{r7, lr}
 8001760:	b086      	sub	sp, #24
 8001762:	af00      	add	r7, sp, #0
 8001764:	4603      	mov	r3, r0
 8001766:	60b9      	str	r1, [r7, #8]
 8001768:	607a      	str	r2, [r7, #4]
 800176a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001770:	f7ff ff3e 	bl	80015f0 <__NVIC_GetPriorityGrouping>
 8001774:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	68b9      	ldr	r1, [r7, #8]
 800177a:	6978      	ldr	r0, [r7, #20]
 800177c:	f7ff ff8e 	bl	800169c <NVIC_EncodePriority>
 8001780:	4602      	mov	r2, r0
 8001782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001786:	4611      	mov	r1, r2
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff ff5d 	bl	8001648 <__NVIC_SetPriority>
}
 800178e:	bf00      	nop
 8001790:	3718      	adds	r7, #24
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	4603      	mov	r3, r0
 800179e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff ff31 	bl	800160c <__NVIC_EnableIRQ>
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b082      	sub	sp, #8
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f7ff ffa2 	bl	8001704 <SysTick_Config>
 80017c0:	4603      	mov	r3, r0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
	...

080017cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b089      	sub	sp, #36	; 0x24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017d6:	2300      	movs	r3, #0
 80017d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017da:	2300      	movs	r3, #0
 80017dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017de:	2300      	movs	r3, #0
 80017e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017e2:	2300      	movs	r3, #0
 80017e4:	61fb      	str	r3, [r7, #28]
 80017e6:	e177      	b.n	8001ad8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017e8:	2201      	movs	r2, #1
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	697a      	ldr	r2, [r7, #20]
 80017f8:	4013      	ands	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	429a      	cmp	r2, r3
 8001802:	f040 8166 	bne.w	8001ad2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f003 0303 	and.w	r3, r3, #3
 800180e:	2b01      	cmp	r3, #1
 8001810:	d005      	beq.n	800181e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800181a:	2b02      	cmp	r3, #2
 800181c:	d130      	bne.n	8001880 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	2203      	movs	r2, #3
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	43db      	mvns	r3, r3
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	4013      	ands	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	68da      	ldr	r2, [r3, #12]
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4313      	orrs	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001854:	2201      	movs	r2, #1
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	43db      	mvns	r3, r3
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	4013      	ands	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	091b      	lsrs	r3, r3, #4
 800186a:	f003 0201 	and.w	r2, r3, #1
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	4313      	orrs	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f003 0303 	and.w	r3, r3, #3
 8001888:	2b03      	cmp	r3, #3
 800188a:	d017      	beq.n	80018bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	2203      	movs	r2, #3
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4013      	ands	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	689a      	ldr	r2, [r3, #8]
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 0303 	and.w	r3, r3, #3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d123      	bne.n	8001910 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	08da      	lsrs	r2, r3, #3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3208      	adds	r2, #8
 80018d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	f003 0307 	and.w	r3, r3, #7
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	220f      	movs	r2, #15
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	43db      	mvns	r3, r3
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4013      	ands	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	691a      	ldr	r2, [r3, #16]
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	4313      	orrs	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	08da      	lsrs	r2, r3, #3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	3208      	adds	r2, #8
 800190a:	69b9      	ldr	r1, [r7, #24]
 800190c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	2203      	movs	r2, #3
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4013      	ands	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f003 0203 	and.w	r2, r3, #3
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	4313      	orrs	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800194c:	2b00      	cmp	r3, #0
 800194e:	f000 80c0 	beq.w	8001ad2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	4b66      	ldr	r3, [pc, #408]	; (8001af0 <HAL_GPIO_Init+0x324>)
 8001958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195a:	4a65      	ldr	r2, [pc, #404]	; (8001af0 <HAL_GPIO_Init+0x324>)
 800195c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001960:	6453      	str	r3, [r2, #68]	; 0x44
 8001962:	4b63      	ldr	r3, [pc, #396]	; (8001af0 <HAL_GPIO_Init+0x324>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800196e:	4a61      	ldr	r2, [pc, #388]	; (8001af4 <HAL_GPIO_Init+0x328>)
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	089b      	lsrs	r3, r3, #2
 8001974:	3302      	adds	r3, #2
 8001976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800197a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f003 0303 	and.w	r3, r3, #3
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	220f      	movs	r2, #15
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	43db      	mvns	r3, r3
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	4013      	ands	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a58      	ldr	r2, [pc, #352]	; (8001af8 <HAL_GPIO_Init+0x32c>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d037      	beq.n	8001a0a <HAL_GPIO_Init+0x23e>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a57      	ldr	r2, [pc, #348]	; (8001afc <HAL_GPIO_Init+0x330>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d031      	beq.n	8001a06 <HAL_GPIO_Init+0x23a>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a56      	ldr	r2, [pc, #344]	; (8001b00 <HAL_GPIO_Init+0x334>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d02b      	beq.n	8001a02 <HAL_GPIO_Init+0x236>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a55      	ldr	r2, [pc, #340]	; (8001b04 <HAL_GPIO_Init+0x338>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d025      	beq.n	80019fe <HAL_GPIO_Init+0x232>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a54      	ldr	r2, [pc, #336]	; (8001b08 <HAL_GPIO_Init+0x33c>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d01f      	beq.n	80019fa <HAL_GPIO_Init+0x22e>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a53      	ldr	r2, [pc, #332]	; (8001b0c <HAL_GPIO_Init+0x340>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d019      	beq.n	80019f6 <HAL_GPIO_Init+0x22a>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a52      	ldr	r2, [pc, #328]	; (8001b10 <HAL_GPIO_Init+0x344>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d013      	beq.n	80019f2 <HAL_GPIO_Init+0x226>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a51      	ldr	r2, [pc, #324]	; (8001b14 <HAL_GPIO_Init+0x348>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d00d      	beq.n	80019ee <HAL_GPIO_Init+0x222>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a50      	ldr	r2, [pc, #320]	; (8001b18 <HAL_GPIO_Init+0x34c>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d007      	beq.n	80019ea <HAL_GPIO_Init+0x21e>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a4f      	ldr	r2, [pc, #316]	; (8001b1c <HAL_GPIO_Init+0x350>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d101      	bne.n	80019e6 <HAL_GPIO_Init+0x21a>
 80019e2:	2309      	movs	r3, #9
 80019e4:	e012      	b.n	8001a0c <HAL_GPIO_Init+0x240>
 80019e6:	230a      	movs	r3, #10
 80019e8:	e010      	b.n	8001a0c <HAL_GPIO_Init+0x240>
 80019ea:	2308      	movs	r3, #8
 80019ec:	e00e      	b.n	8001a0c <HAL_GPIO_Init+0x240>
 80019ee:	2307      	movs	r3, #7
 80019f0:	e00c      	b.n	8001a0c <HAL_GPIO_Init+0x240>
 80019f2:	2306      	movs	r3, #6
 80019f4:	e00a      	b.n	8001a0c <HAL_GPIO_Init+0x240>
 80019f6:	2305      	movs	r3, #5
 80019f8:	e008      	b.n	8001a0c <HAL_GPIO_Init+0x240>
 80019fa:	2304      	movs	r3, #4
 80019fc:	e006      	b.n	8001a0c <HAL_GPIO_Init+0x240>
 80019fe:	2303      	movs	r3, #3
 8001a00:	e004      	b.n	8001a0c <HAL_GPIO_Init+0x240>
 8001a02:	2302      	movs	r3, #2
 8001a04:	e002      	b.n	8001a0c <HAL_GPIO_Init+0x240>
 8001a06:	2301      	movs	r3, #1
 8001a08:	e000      	b.n	8001a0c <HAL_GPIO_Init+0x240>
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	69fa      	ldr	r2, [r7, #28]
 8001a0e:	f002 0203 	and.w	r2, r2, #3
 8001a12:	0092      	lsls	r2, r2, #2
 8001a14:	4093      	lsls	r3, r2
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a1c:	4935      	ldr	r1, [pc, #212]	; (8001af4 <HAL_GPIO_Init+0x328>)
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	089b      	lsrs	r3, r3, #2
 8001a22:	3302      	adds	r3, #2
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a2a:	4b3d      	ldr	r3, [pc, #244]	; (8001b20 <HAL_GPIO_Init+0x354>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	43db      	mvns	r3, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4013      	ands	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a4e:	4a34      	ldr	r2, [pc, #208]	; (8001b20 <HAL_GPIO_Init+0x354>)
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a54:	4b32      	ldr	r3, [pc, #200]	; (8001b20 <HAL_GPIO_Init+0x354>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	4013      	ands	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d003      	beq.n	8001a78 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a78:	4a29      	ldr	r2, [pc, #164]	; (8001b20 <HAL_GPIO_Init+0x354>)
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a7e:	4b28      	ldr	r3, [pc, #160]	; (8001b20 <HAL_GPIO_Init+0x354>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	43db      	mvns	r3, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001aa2:	4a1f      	ldr	r2, [pc, #124]	; (8001b20 <HAL_GPIO_Init+0x354>)
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aa8:	4b1d      	ldr	r3, [pc, #116]	; (8001b20 <HAL_GPIO_Init+0x354>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d003      	beq.n	8001acc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001acc:	4a14      	ldr	r2, [pc, #80]	; (8001b20 <HAL_GPIO_Init+0x354>)
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	61fb      	str	r3, [r7, #28]
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	2b0f      	cmp	r3, #15
 8001adc:	f67f ae84 	bls.w	80017e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ae0:	bf00      	nop
 8001ae2:	bf00      	nop
 8001ae4:	3724      	adds	r7, #36	; 0x24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	40023800 	.word	0x40023800
 8001af4:	40013800 	.word	0x40013800
 8001af8:	40020000 	.word	0x40020000
 8001afc:	40020400 	.word	0x40020400
 8001b00:	40020800 	.word	0x40020800
 8001b04:	40020c00 	.word	0x40020c00
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	40021400 	.word	0x40021400
 8001b10:	40021800 	.word	0x40021800
 8001b14:	40021c00 	.word	0x40021c00
 8001b18:	40022000 	.word	0x40022000
 8001b1c:	40022400 	.word	0x40022400
 8001b20:	40013c00 	.word	0x40013c00

08001b24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	691a      	ldr	r2, [r3, #16]
 8001b34:	887b      	ldrh	r3, [r7, #2]
 8001b36:	4013      	ands	r3, r2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d002      	beq.n	8001b42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	73fb      	strb	r3, [r7, #15]
 8001b40:	e001      	b.n	8001b46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b42:	2300      	movs	r3, #0
 8001b44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	807b      	strh	r3, [r7, #2]
 8001b60:	4613      	mov	r3, r2
 8001b62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b64:	787b      	ldrb	r3, [r7, #1]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b6a:	887a      	ldrh	r2, [r7, #2]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b70:	e003      	b.n	8001b7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b72:	887b      	ldrh	r3, [r7, #2]
 8001b74:	041a      	lsls	r2, r3, #16
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	619a      	str	r2, [r3, #24]
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b88:	b08f      	sub	sp, #60	; 0x3c
 8001b8a:	af0a      	add	r7, sp, #40	; 0x28
 8001b8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d101      	bne.n	8001b98 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e10f      	b.n	8001db8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d106      	bne.n	8001bb8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f005 fc6e 	bl	8007494 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2203      	movs	r2, #3
 8001bbc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d102      	bne.n	8001bd2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f002 faa9 	bl	800412e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	603b      	str	r3, [r7, #0]
 8001be2:	687e      	ldr	r6, [r7, #4]
 8001be4:	466d      	mov	r5, sp
 8001be6:	f106 0410 	add.w	r4, r6, #16
 8001bea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bf0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bf2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bf6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001bfa:	1d33      	adds	r3, r6, #4
 8001bfc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bfe:	6838      	ldr	r0, [r7, #0]
 8001c00:	f002 f980 	bl	8003f04 <USB_CoreInit>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d005      	beq.n	8001c16 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2202      	movs	r2, #2
 8001c0e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e0d0      	b.n	8001db8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f002 fa97 	bl	8004150 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c22:	2300      	movs	r3, #0
 8001c24:	73fb      	strb	r3, [r7, #15]
 8001c26:	e04a      	b.n	8001cbe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c28:	7bfa      	ldrb	r2, [r7, #15]
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	4413      	add	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	440b      	add	r3, r1
 8001c36:	333d      	adds	r3, #61	; 0x3d
 8001c38:	2201      	movs	r2, #1
 8001c3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c3c:	7bfa      	ldrb	r2, [r7, #15]
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	4613      	mov	r3, r2
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	4413      	add	r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	440b      	add	r3, r1
 8001c4a:	333c      	adds	r3, #60	; 0x3c
 8001c4c:	7bfa      	ldrb	r2, [r7, #15]
 8001c4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c50:	7bfa      	ldrb	r2, [r7, #15]
 8001c52:	7bfb      	ldrb	r3, [r7, #15]
 8001c54:	b298      	uxth	r0, r3
 8001c56:	6879      	ldr	r1, [r7, #4]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	4413      	add	r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	440b      	add	r3, r1
 8001c62:	3344      	adds	r3, #68	; 0x44
 8001c64:	4602      	mov	r2, r0
 8001c66:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c68:	7bfa      	ldrb	r2, [r7, #15]
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	4413      	add	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	440b      	add	r3, r1
 8001c76:	3340      	adds	r3, #64	; 0x40
 8001c78:	2200      	movs	r2, #0
 8001c7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c7c:	7bfa      	ldrb	r2, [r7, #15]
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	4613      	mov	r3, r2
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	4413      	add	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	440b      	add	r3, r1
 8001c8a:	3348      	adds	r3, #72	; 0x48
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c90:	7bfa      	ldrb	r2, [r7, #15]
 8001c92:	6879      	ldr	r1, [r7, #4]
 8001c94:	4613      	mov	r3, r2
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	4413      	add	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	440b      	add	r3, r1
 8001c9e:	334c      	adds	r3, #76	; 0x4c
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ca4:	7bfa      	ldrb	r2, [r7, #15]
 8001ca6:	6879      	ldr	r1, [r7, #4]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	4413      	add	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	3354      	adds	r3, #84	; 0x54
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	73fb      	strb	r3, [r7, #15]
 8001cbe:	7bfa      	ldrb	r2, [r7, #15]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d3af      	bcc.n	8001c28 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cc8:	2300      	movs	r3, #0
 8001cca:	73fb      	strb	r3, [r7, #15]
 8001ccc:	e044      	b.n	8001d58 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001cce:	7bfa      	ldrb	r2, [r7, #15]
 8001cd0:	6879      	ldr	r1, [r7, #4]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	4413      	add	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	440b      	add	r3, r1
 8001cdc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ce4:	7bfa      	ldrb	r2, [r7, #15]
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	4413      	add	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	440b      	add	r3, r1
 8001cf2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001cf6:	7bfa      	ldrb	r2, [r7, #15]
 8001cf8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001cfa:	7bfa      	ldrb	r2, [r7, #15]
 8001cfc:	6879      	ldr	r1, [r7, #4]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	00db      	lsls	r3, r3, #3
 8001d02:	4413      	add	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	440b      	add	r3, r1
 8001d08:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d10:	7bfa      	ldrb	r2, [r7, #15]
 8001d12:	6879      	ldr	r1, [r7, #4]
 8001d14:	4613      	mov	r3, r2
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	4413      	add	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	440b      	add	r3, r1
 8001d1e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d26:	7bfa      	ldrb	r2, [r7, #15]
 8001d28:	6879      	ldr	r1, [r7, #4]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	4413      	add	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	440b      	add	r3, r1
 8001d34:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d3c:	7bfa      	ldrb	r2, [r7, #15]
 8001d3e:	6879      	ldr	r1, [r7, #4]
 8001d40:	4613      	mov	r3, r2
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	4413      	add	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	440b      	add	r3, r1
 8001d4a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d52:	7bfb      	ldrb	r3, [r7, #15]
 8001d54:	3301      	adds	r3, #1
 8001d56:	73fb      	strb	r3, [r7, #15]
 8001d58:	7bfa      	ldrb	r2, [r7, #15]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d3b5      	bcc.n	8001cce <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	603b      	str	r3, [r7, #0]
 8001d68:	687e      	ldr	r6, [r7, #4]
 8001d6a:	466d      	mov	r5, sp
 8001d6c:	f106 0410 	add.w	r4, r6, #16
 8001d70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d78:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d7c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d80:	1d33      	adds	r3, r6, #4
 8001d82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d84:	6838      	ldr	r0, [r7, #0]
 8001d86:	f002 fa2f 	bl	80041e8 <USB_DevInit>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d005      	beq.n	8001d9c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2202      	movs	r2, #2
 8001d94:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e00d      	b.n	8001db8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f003 fb7e 	bl	80054b2 <USB_DevDisconnect>

  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001dc0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d101      	bne.n	8001ddc <HAL_PCD_Start+0x1c>
 8001dd8:	2302      	movs	r3, #2
 8001dda:	e020      	b.n	8001e1e <HAL_PCD_Start+0x5e>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d109      	bne.n	8001e00 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d005      	beq.n	8001e00 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f002 f981 	bl	800410c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f003 fb2e 	bl	8005470 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e26:	b590      	push	{r4, r7, lr}
 8001e28:	b08d      	sub	sp, #52	; 0x34
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e34:	6a3b      	ldr	r3, [r7, #32]
 8001e36:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f003 fbec 	bl	800561a <USB_GetMode>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f040 848a 	bne.w	800275e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f003 fb50 	bl	80054f4 <USB_ReadInterrupts>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f000 8480 	beq.w	800275c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	0a1b      	lsrs	r3, r3, #8
 8001e66:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f003 fb3d 	bl	80054f4 <USB_ReadInterrupts>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d107      	bne.n	8001e94 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	695a      	ldr	r2, [r3, #20]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f002 0202 	and.w	r2, r2, #2
 8001e92:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f003 fb2b 	bl	80054f4 <USB_ReadInterrupts>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	f003 0310 	and.w	r3, r3, #16
 8001ea4:	2b10      	cmp	r3, #16
 8001ea6:	d161      	bne.n	8001f6c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	699a      	ldr	r2, [r3, #24]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f022 0210 	bic.w	r2, r2, #16
 8001eb6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001eb8:	6a3b      	ldr	r3, [r7, #32]
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	f003 020f 	and.w	r2, r3, #15
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	4413      	add	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	3304      	adds	r3, #4
 8001ed6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	0c5b      	lsrs	r3, r3, #17
 8001edc:	f003 030f 	and.w	r3, r3, #15
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d124      	bne.n	8001f2e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001eea:	4013      	ands	r3, r2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d035      	beq.n	8001f5c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	091b      	lsrs	r3, r3, #4
 8001ef8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001efa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	461a      	mov	r2, r3
 8001f02:	6a38      	ldr	r0, [r7, #32]
 8001f04:	f003 f962 	bl	80051cc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	691a      	ldr	r2, [r3, #16]
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	091b      	lsrs	r3, r3, #4
 8001f10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f14:	441a      	add	r2, r3
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	6a1a      	ldr	r2, [r3, #32]
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	091b      	lsrs	r3, r3, #4
 8001f22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f26:	441a      	add	r2, r3
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	621a      	str	r2, [r3, #32]
 8001f2c:	e016      	b.n	8001f5c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	0c5b      	lsrs	r3, r3, #17
 8001f32:	f003 030f 	and.w	r3, r3, #15
 8001f36:	2b06      	cmp	r3, #6
 8001f38:	d110      	bne.n	8001f5c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001f40:	2208      	movs	r2, #8
 8001f42:	4619      	mov	r1, r3
 8001f44:	6a38      	ldr	r0, [r7, #32]
 8001f46:	f003 f941 	bl	80051cc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	6a1a      	ldr	r2, [r3, #32]
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	091b      	lsrs	r3, r3, #4
 8001f52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f56:	441a      	add	r2, r3
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	699a      	ldr	r2, [r3, #24]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f042 0210 	orr.w	r2, r2, #16
 8001f6a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f003 fabf 	bl	80054f4 <USB_ReadInterrupts>
 8001f76:	4603      	mov	r3, r0
 8001f78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f7c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001f80:	f040 80a7 	bne.w	80020d2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001f84:	2300      	movs	r3, #0
 8001f86:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f003 fac4 	bl	800551a <USB_ReadDevAllOutEpInterrupt>
 8001f92:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001f94:	e099      	b.n	80020ca <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f000 808e 	beq.w	80020be <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fa8:	b2d2      	uxtb	r2, r2
 8001faa:	4611      	mov	r1, r2
 8001fac:	4618      	mov	r0, r3
 8001fae:	f003 fae8 	bl	8005582 <USB_ReadDevOutEPInterrupt>
 8001fb2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00c      	beq.n	8001fd8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc0:	015a      	lsls	r2, r3, #5
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fca:	461a      	mov	r2, r3
 8001fcc:	2301      	movs	r3, #1
 8001fce:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001fd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 feaa 	bl	8002d2c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00c      	beq.n	8001ffc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe4:	015a      	lsls	r2, r3, #5
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	4413      	add	r3, r2
 8001fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fee:	461a      	mov	r2, r3
 8001ff0:	2308      	movs	r3, #8
 8001ff2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001ff4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 ff80 	bl	8002efc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	f003 0310 	and.w	r3, r3, #16
 8002002:	2b00      	cmp	r3, #0
 8002004:	d008      	beq.n	8002018 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002008:	015a      	lsls	r2, r3, #5
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	4413      	add	r3, r2
 800200e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002012:	461a      	mov	r2, r3
 8002014:	2310      	movs	r3, #16
 8002016:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d030      	beq.n	8002084 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002022:	6a3b      	ldr	r3, [r7, #32]
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800202a:	2b80      	cmp	r3, #128	; 0x80
 800202c:	d109      	bne.n	8002042 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	69fa      	ldr	r2, [r7, #28]
 8002038:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800203c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002040:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002044:	4613      	mov	r3, r2
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	4413      	add	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	4413      	add	r3, r2
 8002054:	3304      	adds	r3, #4
 8002056:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	78db      	ldrb	r3, [r3, #3]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d108      	bne.n	8002072 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	2200      	movs	r2, #0
 8002064:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002068:	b2db      	uxtb	r3, r3
 800206a:	4619      	mov	r1, r3
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f005 fb25 	bl	80076bc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	015a      	lsls	r2, r3, #5
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	4413      	add	r3, r2
 800207a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800207e:	461a      	mov	r2, r3
 8002080:	2302      	movs	r3, #2
 8002082:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	f003 0320 	and.w	r3, r3, #32
 800208a:	2b00      	cmp	r3, #0
 800208c:	d008      	beq.n	80020a0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800208e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002090:	015a      	lsls	r2, r3, #5
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	4413      	add	r3, r2
 8002096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800209a:	461a      	mov	r2, r3
 800209c:	2320      	movs	r3, #32
 800209e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d009      	beq.n	80020be <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	015a      	lsls	r2, r3, #5
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	4413      	add	r3, r2
 80020b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020b6:	461a      	mov	r2, r3
 80020b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020bc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	3301      	adds	r3, #1
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80020c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c6:	085b      	lsrs	r3, r3, #1
 80020c8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80020ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f47f af62 	bne.w	8001f96 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f003 fa0c 	bl	80054f4 <USB_ReadInterrupts>
 80020dc:	4603      	mov	r3, r0
 80020de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80020e6:	f040 80db 	bne.w	80022a0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f003 fa2d 	bl	800554e <USB_ReadDevAllInEpInterrupt>
 80020f4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80020fa:	e0cd      	b.n	8002298 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80020fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	f000 80c2 	beq.w	800228c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800210e:	b2d2      	uxtb	r2, r2
 8002110:	4611      	mov	r1, r2
 8002112:	4618      	mov	r0, r3
 8002114:	f003 fa53 	bl	80055be <USB_ReadDevInEPInterrupt>
 8002118:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	2b00      	cmp	r3, #0
 8002122:	d057      	beq.n	80021d4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	f003 030f 	and.w	r3, r3, #15
 800212a:	2201      	movs	r2, #1
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002138:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	43db      	mvns	r3, r3
 800213e:	69f9      	ldr	r1, [r7, #28]
 8002140:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002144:	4013      	ands	r3, r2
 8002146:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214a:	015a      	lsls	r2, r3, #5
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	4413      	add	r3, r2
 8002150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002154:	461a      	mov	r2, r3
 8002156:	2301      	movs	r3, #1
 8002158:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d132      	bne.n	80021c8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002166:	4613      	mov	r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	4413      	add	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	440b      	add	r3, r1
 8002170:	334c      	adds	r3, #76	; 0x4c
 8002172:	6819      	ldr	r1, [r3, #0]
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002178:	4613      	mov	r3, r2
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	4413      	add	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4403      	add	r3, r0
 8002182:	3348      	adds	r3, #72	; 0x48
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4419      	add	r1, r3
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800218c:	4613      	mov	r3, r2
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	4413      	add	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4403      	add	r3, r0
 8002196:	334c      	adds	r3, #76	; 0x4c
 8002198:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	2b00      	cmp	r3, #0
 800219e:	d113      	bne.n	80021c8 <HAL_PCD_IRQHandler+0x3a2>
 80021a0:	6879      	ldr	r1, [r7, #4]
 80021a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021a4:	4613      	mov	r3, r2
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	4413      	add	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	440b      	add	r3, r1
 80021ae:	3354      	adds	r3, #84	; 0x54
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d108      	bne.n	80021c8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6818      	ldr	r0, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80021c0:	461a      	mov	r2, r3
 80021c2:	2101      	movs	r1, #1
 80021c4:	f003 fa5a 	bl	800567c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80021c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	4619      	mov	r1, r3
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f005 f9ef 	bl	80075b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	f003 0308 	and.w	r3, r3, #8
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d008      	beq.n	80021f0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	015a      	lsls	r2, r3, #5
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	4413      	add	r3, r2
 80021e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021ea:	461a      	mov	r2, r3
 80021ec:	2308      	movs	r3, #8
 80021ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	f003 0310 	and.w	r3, r3, #16
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d008      	beq.n	800220c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80021fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fc:	015a      	lsls	r2, r3, #5
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	4413      	add	r3, r2
 8002202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002206:	461a      	mov	r2, r3
 8002208:	2310      	movs	r3, #16
 800220a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002212:	2b00      	cmp	r3, #0
 8002214:	d008      	beq.n	8002228 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002218:	015a      	lsls	r2, r3, #5
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	4413      	add	r3, r2
 800221e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002222:	461a      	mov	r2, r3
 8002224:	2340      	movs	r3, #64	; 0x40
 8002226:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d023      	beq.n	800227a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002232:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002234:	6a38      	ldr	r0, [r7, #32]
 8002236:	f002 f93b 	bl	80044b0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800223a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800223c:	4613      	mov	r3, r2
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	4413      	add	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	3338      	adds	r3, #56	; 0x38
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	4413      	add	r3, r2
 800224a:	3304      	adds	r3, #4
 800224c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	78db      	ldrb	r3, [r3, #3]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d108      	bne.n	8002268 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	2200      	movs	r2, #0
 800225a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	b2db      	uxtb	r3, r3
 8002260:	4619      	mov	r1, r3
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f005 fa3c 	bl	80076e0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226a:	015a      	lsls	r2, r3, #5
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	4413      	add	r3, r2
 8002270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002274:	461a      	mov	r2, r3
 8002276:	2302      	movs	r3, #2
 8002278:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002284:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 fcc3 	bl	8002c12 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800228c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228e:	3301      	adds	r3, #1
 8002290:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002294:	085b      	lsrs	r3, r3, #1
 8002296:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800229a:	2b00      	cmp	r3, #0
 800229c:	f47f af2e 	bne.w	80020fc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f003 f925 	bl	80054f4 <USB_ReadInterrupts>
 80022aa:	4603      	mov	r3, r0
 80022ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80022b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80022b4:	d122      	bne.n	80022fc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	69fa      	ldr	r2, [r7, #28]
 80022c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022c4:	f023 0301 	bic.w	r3, r3, #1
 80022c8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d108      	bne.n	80022e6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80022dc:	2100      	movs	r1, #0
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 feaa 	bl	8003038 <HAL_PCDEx_LPM_Callback>
 80022e4:	e002      	b.n	80022ec <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f005 f9da 	bl	80076a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	695a      	ldr	r2, [r3, #20]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80022fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4618      	mov	r0, r3
 8002302:	f003 f8f7 	bl	80054f4 <USB_ReadInterrupts>
 8002306:	4603      	mov	r3, r0
 8002308:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800230c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002310:	d112      	bne.n	8002338 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b01      	cmp	r3, #1
 8002320:	d102      	bne.n	8002328 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f005 f996 	bl	8007654 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	695a      	ldr	r2, [r3, #20]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002336:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4618      	mov	r0, r3
 800233e:	f003 f8d9 	bl	80054f4 <USB_ReadInterrupts>
 8002342:	4603      	mov	r3, r0
 8002344:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800234c:	f040 80b7 	bne.w	80024be <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	69fa      	ldr	r2, [r7, #28]
 800235a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800235e:	f023 0301 	bic.w	r3, r3, #1
 8002362:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2110      	movs	r1, #16
 800236a:	4618      	mov	r0, r3
 800236c:	f002 f8a0 	bl	80044b0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002370:	2300      	movs	r3, #0
 8002372:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002374:	e046      	b.n	8002404 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002378:	015a      	lsls	r2, r3, #5
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	4413      	add	r3, r2
 800237e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002382:	461a      	mov	r2, r3
 8002384:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002388:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800238a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800238c:	015a      	lsls	r2, r3, #5
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	4413      	add	r3, r2
 8002392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800239a:	0151      	lsls	r1, r2, #5
 800239c:	69fa      	ldr	r2, [r7, #28]
 800239e:	440a      	add	r2, r1
 80023a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80023a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80023a8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80023aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ac:	015a      	lsls	r2, r3, #5
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	4413      	add	r3, r2
 80023b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023b6:	461a      	mov	r2, r3
 80023b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80023bc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80023be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c0:	015a      	lsls	r2, r3, #5
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	4413      	add	r3, r2
 80023c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023ce:	0151      	lsls	r1, r2, #5
 80023d0:	69fa      	ldr	r2, [r7, #28]
 80023d2:	440a      	add	r2, r1
 80023d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80023d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80023dc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80023de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e0:	015a      	lsls	r2, r3, #5
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	4413      	add	r3, r2
 80023e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023ee:	0151      	lsls	r1, r2, #5
 80023f0:	69fa      	ldr	r2, [r7, #28]
 80023f2:	440a      	add	r2, r1
 80023f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80023f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80023fc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002400:	3301      	adds	r3, #1
 8002402:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800240a:	429a      	cmp	r2, r3
 800240c:	d3b3      	bcc.n	8002376 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	69fa      	ldr	r2, [r7, #28]
 8002418:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800241c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002420:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	2b00      	cmp	r3, #0
 8002428:	d016      	beq.n	8002458 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002430:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002434:	69fa      	ldr	r2, [r7, #28]
 8002436:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800243a:	f043 030b 	orr.w	r3, r3, #11
 800243e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244a:	69fa      	ldr	r2, [r7, #28]
 800244c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002450:	f043 030b 	orr.w	r3, r3, #11
 8002454:	6453      	str	r3, [r2, #68]	; 0x44
 8002456:	e015      	b.n	8002484 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800245e:	695b      	ldr	r3, [r3, #20]
 8002460:	69fa      	ldr	r2, [r7, #28]
 8002462:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002466:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800246a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800246e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002476:	691b      	ldr	r3, [r3, #16]
 8002478:	69fa      	ldr	r2, [r7, #28]
 800247a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800247e:	f043 030b 	orr.w	r3, r3, #11
 8002482:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	69fa      	ldr	r2, [r7, #28]
 800248e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002492:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002496:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6818      	ldr	r0, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80024a8:	461a      	mov	r2, r3
 80024aa:	f003 f8e7 	bl	800567c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	695a      	ldr	r2, [r3, #20]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80024bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f003 f816 	bl	80054f4 <USB_ReadInterrupts>
 80024c8:	4603      	mov	r3, r0
 80024ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024d2:	d124      	bne.n	800251e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4618      	mov	r0, r3
 80024da:	f003 f8ac 	bl	8005636 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f002 f861 	bl	80045aa <USB_GetDevSpeed>
 80024e8:	4603      	mov	r3, r0
 80024ea:	461a      	mov	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681c      	ldr	r4, [r3, #0]
 80024f4:	f001 fa10 	bl	8003918 <HAL_RCC_GetHCLKFreq>
 80024f8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	461a      	mov	r2, r3
 8002502:	4620      	mov	r0, r4
 8002504:	f001 fd60 	bl	8003fc8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f005 f87a 	bl	8007602 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	695a      	ldr	r2, [r3, #20]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800251c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f002 ffe6 	bl	80054f4 <USB_ReadInterrupts>
 8002528:	4603      	mov	r3, r0
 800252a:	f003 0308 	and.w	r3, r3, #8
 800252e:	2b08      	cmp	r3, #8
 8002530:	d10a      	bne.n	8002548 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f005 f857 	bl	80075e6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	695a      	ldr	r2, [r3, #20]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f002 0208 	and.w	r2, r2, #8
 8002546:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4618      	mov	r0, r3
 800254e:	f002 ffd1 	bl	80054f4 <USB_ReadInterrupts>
 8002552:	4603      	mov	r3, r0
 8002554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002558:	2b80      	cmp	r3, #128	; 0x80
 800255a:	d122      	bne.n	80025a2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800255c:	6a3b      	ldr	r3, [r7, #32]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002564:	6a3b      	ldr	r3, [r7, #32]
 8002566:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002568:	2301      	movs	r3, #1
 800256a:	627b      	str	r3, [r7, #36]	; 0x24
 800256c:	e014      	b.n	8002598 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002572:	4613      	mov	r3, r2
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	4413      	add	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	440b      	add	r3, r1
 800257c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d105      	bne.n	8002592 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	b2db      	uxtb	r3, r3
 800258a:	4619      	mov	r1, r3
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 fb0f 	bl	8002bb0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	3301      	adds	r3, #1
 8002596:	627b      	str	r3, [r7, #36]	; 0x24
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800259e:	429a      	cmp	r2, r3
 80025a0:	d3e5      	bcc.n	800256e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f002 ffa4 	bl	80054f4 <USB_ReadInterrupts>
 80025ac:	4603      	mov	r3, r0
 80025ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025b6:	d13b      	bne.n	8002630 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025b8:	2301      	movs	r3, #1
 80025ba:	627b      	str	r3, [r7, #36]	; 0x24
 80025bc:	e02b      	b.n	8002616 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	015a      	lsls	r2, r3, #5
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	4413      	add	r3, r2
 80025c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025d2:	4613      	mov	r3, r2
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	4413      	add	r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	440b      	add	r3, r1
 80025dc:	3340      	adds	r3, #64	; 0x40
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d115      	bne.n	8002610 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80025e4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	da12      	bge.n	8002610 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80025ea:	6879      	ldr	r1, [r7, #4]
 80025ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ee:	4613      	mov	r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	4413      	add	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	440b      	add	r3, r1
 80025f8:	333f      	adds	r3, #63	; 0x3f
 80025fa:	2201      	movs	r2, #1
 80025fc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	b2db      	uxtb	r3, r3
 8002602:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002606:	b2db      	uxtb	r3, r3
 8002608:	4619      	mov	r1, r3
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 fad0 	bl	8002bb0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002612:	3301      	adds	r3, #1
 8002614:	627b      	str	r3, [r7, #36]	; 0x24
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800261c:	429a      	cmp	r2, r3
 800261e:	d3ce      	bcc.n	80025be <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	695a      	ldr	r2, [r3, #20]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800262e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4618      	mov	r0, r3
 8002636:	f002 ff5d 	bl	80054f4 <USB_ReadInterrupts>
 800263a:	4603      	mov	r3, r0
 800263c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002640:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002644:	d155      	bne.n	80026f2 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002646:	2301      	movs	r3, #1
 8002648:	627b      	str	r3, [r7, #36]	; 0x24
 800264a:	e045      	b.n	80026d8 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264e:	015a      	lsls	r2, r3, #5
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	4413      	add	r3, r2
 8002654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800265c:	6879      	ldr	r1, [r7, #4]
 800265e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002660:	4613      	mov	r3, r2
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	4413      	add	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	440b      	add	r3, r1
 800266a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d12e      	bne.n	80026d2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002674:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002676:	2b00      	cmp	r3, #0
 8002678:	da2b      	bge.n	80026d2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002686:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800268a:	429a      	cmp	r2, r3
 800268c:	d121      	bne.n	80026d2 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002692:	4613      	mov	r3, r2
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	4413      	add	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	440b      	add	r3, r1
 800269c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80026a0:	2201      	movs	r2, #1
 80026a2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80026a4:	6a3b      	ldr	r3, [r7, #32]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80026ac:	6a3b      	ldr	r3, [r7, #32]
 80026ae:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80026b0:	6a3b      	ldr	r3, [r7, #32]
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d10a      	bne.n	80026d2 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	69fa      	ldr	r2, [r7, #28]
 80026c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026ce:	6053      	str	r3, [r2, #4]
            break;
 80026d0:	e007      	b.n	80026e2 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d4:	3301      	adds	r3, #1
 80026d6:	627b      	str	r3, [r7, #36]	; 0x24
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026de:	429a      	cmp	r2, r3
 80026e0:	d3b4      	bcc.n	800264c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	695a      	ldr	r2, [r3, #20]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80026f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f002 fefc 	bl	80054f4 <USB_ReadInterrupts>
 80026fc:	4603      	mov	r3, r0
 80026fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002706:	d10a      	bne.n	800271e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f004 fffb 	bl	8007704 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	695a      	ldr	r2, [r3, #20]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800271c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f002 fee6 	bl	80054f4 <USB_ReadInterrupts>
 8002728:	4603      	mov	r3, r0
 800272a:	f003 0304 	and.w	r3, r3, #4
 800272e:	2b04      	cmp	r3, #4
 8002730:	d115      	bne.n	800275e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	d002      	beq.n	800274a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f004 ffeb 	bl	8007720 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6859      	ldr	r1, [r3, #4]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	430a      	orrs	r2, r1
 8002758:	605a      	str	r2, [r3, #4]
 800275a:	e000      	b.n	800275e <HAL_PCD_IRQHandler+0x938>
      return;
 800275c:	bf00      	nop
    }
  }
}
 800275e:	3734      	adds	r7, #52	; 0x34
 8002760:	46bd      	mov	sp, r7
 8002762:	bd90      	pop	{r4, r7, pc}

08002764 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	460b      	mov	r3, r1
 800276e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002776:	2b01      	cmp	r3, #1
 8002778:	d101      	bne.n	800277e <HAL_PCD_SetAddress+0x1a>
 800277a:	2302      	movs	r3, #2
 800277c:	e013      	b.n	80027a6 <HAL_PCD_SetAddress+0x42>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	78fa      	ldrb	r2, [r7, #3]
 800278a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	78fa      	ldrb	r2, [r7, #3]
 8002794:	4611      	mov	r1, r2
 8002796:	4618      	mov	r0, r3
 8002798:	f002 fe44 	bl	8005424 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b084      	sub	sp, #16
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
 80027b6:	4608      	mov	r0, r1
 80027b8:	4611      	mov	r1, r2
 80027ba:	461a      	mov	r2, r3
 80027bc:	4603      	mov	r3, r0
 80027be:	70fb      	strb	r3, [r7, #3]
 80027c0:	460b      	mov	r3, r1
 80027c2:	803b      	strh	r3, [r7, #0]
 80027c4:	4613      	mov	r3, r2
 80027c6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80027c8:	2300      	movs	r3, #0
 80027ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	da0f      	bge.n	80027f4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027d4:	78fb      	ldrb	r3, [r7, #3]
 80027d6:	f003 020f 	and.w	r2, r3, #15
 80027da:	4613      	mov	r3, r2
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	4413      	add	r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	3338      	adds	r3, #56	; 0x38
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	4413      	add	r3, r2
 80027e8:	3304      	adds	r3, #4
 80027ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2201      	movs	r2, #1
 80027f0:	705a      	strb	r2, [r3, #1]
 80027f2:	e00f      	b.n	8002814 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027f4:	78fb      	ldrb	r3, [r7, #3]
 80027f6:	f003 020f 	and.w	r2, r3, #15
 80027fa:	4613      	mov	r3, r2
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	4413      	add	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	4413      	add	r3, r2
 800280a:	3304      	adds	r3, #4
 800280c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002814:	78fb      	ldrb	r3, [r7, #3]
 8002816:	f003 030f 	and.w	r3, r3, #15
 800281a:	b2da      	uxtb	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002820:	883a      	ldrh	r2, [r7, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	78ba      	ldrb	r2, [r7, #2]
 800282a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	785b      	ldrb	r3, [r3, #1]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d004      	beq.n	800283e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	b29a      	uxth	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800283e:	78bb      	ldrb	r3, [r7, #2]
 8002840:	2b02      	cmp	r3, #2
 8002842:	d102      	bne.n	800284a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002850:	2b01      	cmp	r3, #1
 8002852:	d101      	bne.n	8002858 <HAL_PCD_EP_Open+0xaa>
 8002854:	2302      	movs	r3, #2
 8002856:	e00e      	b.n	8002876 <HAL_PCD_EP_Open+0xc8>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68f9      	ldr	r1, [r7, #12]
 8002866:	4618      	mov	r0, r3
 8002868:	f001 fec4 	bl	80045f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002874:	7afb      	ldrb	r3, [r7, #11]
}
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b084      	sub	sp, #16
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	460b      	mov	r3, r1
 8002888:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800288a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800288e:	2b00      	cmp	r3, #0
 8002890:	da0f      	bge.n	80028b2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002892:	78fb      	ldrb	r3, [r7, #3]
 8002894:	f003 020f 	and.w	r2, r3, #15
 8002898:	4613      	mov	r3, r2
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	4413      	add	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	3338      	adds	r3, #56	; 0x38
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	4413      	add	r3, r2
 80028a6:	3304      	adds	r3, #4
 80028a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2201      	movs	r2, #1
 80028ae:	705a      	strb	r2, [r3, #1]
 80028b0:	e00f      	b.n	80028d2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028b2:	78fb      	ldrb	r3, [r7, #3]
 80028b4:	f003 020f 	and.w	r2, r3, #15
 80028b8:	4613      	mov	r3, r2
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	4413      	add	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	4413      	add	r3, r2
 80028c8:	3304      	adds	r3, #4
 80028ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80028d2:	78fb      	ldrb	r3, [r7, #3]
 80028d4:	f003 030f 	and.w	r3, r3, #15
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d101      	bne.n	80028ec <HAL_PCD_EP_Close+0x6e>
 80028e8:	2302      	movs	r3, #2
 80028ea:	e00e      	b.n	800290a <HAL_PCD_EP_Close+0x8c>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68f9      	ldr	r1, [r7, #12]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f001 ff02 	bl	8004704 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b086      	sub	sp, #24
 8002916:	af00      	add	r7, sp, #0
 8002918:	60f8      	str	r0, [r7, #12]
 800291a:	607a      	str	r2, [r7, #4]
 800291c:	603b      	str	r3, [r7, #0]
 800291e:	460b      	mov	r3, r1
 8002920:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002922:	7afb      	ldrb	r3, [r7, #11]
 8002924:	f003 020f 	and.w	r2, r3, #15
 8002928:	4613      	mov	r3, r2
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	4413      	add	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	4413      	add	r3, r2
 8002938:	3304      	adds	r3, #4
 800293a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	2200      	movs	r2, #0
 800294c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	2200      	movs	r2, #0
 8002952:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002954:	7afb      	ldrb	r3, [r7, #11]
 8002956:	f003 030f 	and.w	r3, r3, #15
 800295a:	b2da      	uxtb	r2, r3
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d102      	bne.n	800296e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800296e:	7afb      	ldrb	r3, [r7, #11]
 8002970:	f003 030f 	and.w	r3, r3, #15
 8002974:	2b00      	cmp	r3, #0
 8002976:	d109      	bne.n	800298c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6818      	ldr	r0, [r3, #0]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	b2db      	uxtb	r3, r3
 8002982:	461a      	mov	r2, r3
 8002984:	6979      	ldr	r1, [r7, #20]
 8002986:	f002 f9e1 	bl	8004d4c <USB_EP0StartXfer>
 800298a:	e008      	b.n	800299e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6818      	ldr	r0, [r3, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	b2db      	uxtb	r3, r3
 8002996:	461a      	mov	r2, r3
 8002998:	6979      	ldr	r1, [r7, #20]
 800299a:	f001 ff8f 	bl	80048bc <USB_EPStartXfer>
  }

  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3718      	adds	r7, #24
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	607a      	str	r2, [r7, #4]
 80029b2:	603b      	str	r3, [r7, #0]
 80029b4:	460b      	mov	r3, r1
 80029b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029b8:	7afb      	ldrb	r3, [r7, #11]
 80029ba:	f003 020f 	and.w	r2, r3, #15
 80029be:	4613      	mov	r3, r2
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	4413      	add	r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	3338      	adds	r3, #56	; 0x38
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	4413      	add	r3, r2
 80029cc:	3304      	adds	r3, #4
 80029ce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	2200      	movs	r2, #0
 80029e0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	2201      	movs	r2, #1
 80029e6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029e8:	7afb      	ldrb	r3, [r7, #11]
 80029ea:	f003 030f 	and.w	r3, r3, #15
 80029ee:	b2da      	uxtb	r2, r3
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d102      	bne.n	8002a02 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a02:	7afb      	ldrb	r3, [r7, #11]
 8002a04:	f003 030f 	and.w	r3, r3, #15
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d109      	bne.n	8002a20 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6818      	ldr	r0, [r3, #0]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	461a      	mov	r2, r3
 8002a18:	6979      	ldr	r1, [r7, #20]
 8002a1a:	f002 f997 	bl	8004d4c <USB_EP0StartXfer>
 8002a1e:	e008      	b.n	8002a32 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6818      	ldr	r0, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	6979      	ldr	r1, [r7, #20]
 8002a2e:	f001 ff45 	bl	80048bc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3718      	adds	r7, #24
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	460b      	mov	r3, r1
 8002a46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002a48:	78fb      	ldrb	r3, [r7, #3]
 8002a4a:	f003 020f 	and.w	r2, r3, #15
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d901      	bls.n	8002a5a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e050      	b.n	8002afc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	da0f      	bge.n	8002a82 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a62:	78fb      	ldrb	r3, [r7, #3]
 8002a64:	f003 020f 	and.w	r2, r3, #15
 8002a68:	4613      	mov	r3, r2
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	4413      	add	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	3338      	adds	r3, #56	; 0x38
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	4413      	add	r3, r2
 8002a76:	3304      	adds	r3, #4
 8002a78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	705a      	strb	r2, [r3, #1]
 8002a80:	e00d      	b.n	8002a9e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a82:	78fa      	ldrb	r2, [r7, #3]
 8002a84:	4613      	mov	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	4413      	add	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	4413      	add	r3, r2
 8002a94:	3304      	adds	r3, #4
 8002a96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002aa4:	78fb      	ldrb	r3, [r7, #3]
 8002aa6:	f003 030f 	and.w	r3, r3, #15
 8002aaa:	b2da      	uxtb	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d101      	bne.n	8002abe <HAL_PCD_EP_SetStall+0x82>
 8002aba:	2302      	movs	r3, #2
 8002abc:	e01e      	b.n	8002afc <HAL_PCD_EP_SetStall+0xc0>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68f9      	ldr	r1, [r7, #12]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f002 fbd5 	bl	800527c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ad2:	78fb      	ldrb	r3, [r7, #3]
 8002ad4:	f003 030f 	and.w	r3, r3, #15
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d10a      	bne.n	8002af2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6818      	ldr	r0, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	b2d9      	uxtb	r1, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002aec:	461a      	mov	r2, r3
 8002aee:	f002 fdc5 	bl	800567c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002b10:	78fb      	ldrb	r3, [r7, #3]
 8002b12:	f003 020f 	and.w	r2, r3, #15
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d901      	bls.n	8002b22 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e042      	b.n	8002ba8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	da0f      	bge.n	8002b4a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b2a:	78fb      	ldrb	r3, [r7, #3]
 8002b2c:	f003 020f 	and.w	r2, r3, #15
 8002b30:	4613      	mov	r3, r2
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	4413      	add	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	3338      	adds	r3, #56	; 0x38
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	3304      	adds	r3, #4
 8002b40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2201      	movs	r2, #1
 8002b46:	705a      	strb	r2, [r3, #1]
 8002b48:	e00f      	b.n	8002b6a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b4a:	78fb      	ldrb	r3, [r7, #3]
 8002b4c:	f003 020f 	and.w	r2, r3, #15
 8002b50:	4613      	mov	r3, r2
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	4413      	add	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	4413      	add	r3, r2
 8002b60:	3304      	adds	r3, #4
 8002b62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b70:	78fb      	ldrb	r3, [r7, #3]
 8002b72:	f003 030f 	and.w	r3, r3, #15
 8002b76:	b2da      	uxtb	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d101      	bne.n	8002b8a <HAL_PCD_EP_ClrStall+0x86>
 8002b86:	2302      	movs	r3, #2
 8002b88:	e00e      	b.n	8002ba8 <HAL_PCD_EP_ClrStall+0xa4>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68f9      	ldr	r1, [r7, #12]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f002 fbdd 	bl	8005358 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002bbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	da0c      	bge.n	8002bde <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bc4:	78fb      	ldrb	r3, [r7, #3]
 8002bc6:	f003 020f 	and.w	r2, r3, #15
 8002bca:	4613      	mov	r3, r2
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	4413      	add	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	3338      	adds	r3, #56	; 0x38
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	3304      	adds	r3, #4
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	e00c      	b.n	8002bf8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bde:	78fb      	ldrb	r3, [r7, #3]
 8002be0:	f003 020f 	and.w	r2, r3, #15
 8002be4:	4613      	mov	r3, r2
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	4413      	add	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	3304      	adds	r3, #4
 8002bf6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68f9      	ldr	r1, [r7, #12]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f002 f9fc 	bl	8004ffc <USB_EPStopXfer>
 8002c04:	4603      	mov	r3, r0
 8002c06:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002c08:	7afb      	ldrb	r3, [r7, #11]
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b08a      	sub	sp, #40	; 0x28
 8002c16:	af02      	add	r7, sp, #8
 8002c18:	6078      	str	r0, [r7, #4]
 8002c1a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	3338      	adds	r3, #56	; 0x38
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	4413      	add	r3, r2
 8002c36:	3304      	adds	r3, #4
 8002c38:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6a1a      	ldr	r2, [r3, #32]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d901      	bls.n	8002c4a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e06c      	b.n	8002d24 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	699a      	ldr	r2, [r3, #24]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	69fa      	ldr	r2, [r7, #28]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d902      	bls.n	8002c66 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	3303      	adds	r3, #3
 8002c6a:	089b      	lsrs	r3, r3, #2
 8002c6c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c6e:	e02b      	b.n	8002cc8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	699a      	ldr	r2, [r3, #24]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	69fa      	ldr	r2, [r7, #28]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d902      	bls.n	8002c8c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	3303      	adds	r3, #3
 8002c90:	089b      	lsrs	r3, r3, #2
 8002c92:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6919      	ldr	r1, [r3, #16]
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	b2da      	uxtb	r2, r3
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	4603      	mov	r3, r0
 8002caa:	6978      	ldr	r0, [r7, #20]
 8002cac:	f002 fa50 	bl	8005150 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	691a      	ldr	r2, [r3, #16]
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	441a      	add	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6a1a      	ldr	r2, [r3, #32]
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	441a      	add	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	015a      	lsls	r2, r3, #5
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	4413      	add	r3, r2
 8002cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d809      	bhi.n	8002cf2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6a1a      	ldr	r2, [r3, #32]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d203      	bcs.n	8002cf2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1be      	bne.n	8002c70 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	699a      	ldr	r2, [r3, #24]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d811      	bhi.n	8002d22 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	f003 030f 	and.w	r3, r3, #15
 8002d04:	2201      	movs	r2, #1
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	43db      	mvns	r3, r3
 8002d18:	6939      	ldr	r1, [r7, #16]
 8002d1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002d1e:	4013      	ands	r3, r2
 8002d20:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3720      	adds	r7, #32
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b088      	sub	sp, #32
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	333c      	adds	r3, #60	; 0x3c
 8002d44:	3304      	adds	r3, #4
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	015a      	lsls	r2, r3, #5
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	4413      	add	r3, r2
 8002d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d17b      	bne.n	8002e5a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	f003 0308 	and.w	r3, r3, #8
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d015      	beq.n	8002d98 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	4a61      	ldr	r2, [pc, #388]	; (8002ef4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	f240 80b9 	bls.w	8002ee8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 80b3 	beq.w	8002ee8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	015a      	lsls	r2, r3, #5
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	4413      	add	r3, r2
 8002d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d8e:	461a      	mov	r2, r3
 8002d90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d94:	6093      	str	r3, [r2, #8]
 8002d96:	e0a7      	b.n	8002ee8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	f003 0320 	and.w	r3, r3, #32
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d009      	beq.n	8002db6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	015a      	lsls	r2, r3, #5
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	4413      	add	r3, r2
 8002daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dae:	461a      	mov	r2, r3
 8002db0:	2320      	movs	r3, #32
 8002db2:	6093      	str	r3, [r2, #8]
 8002db4:	e098      	b.n	8002ee8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f040 8093 	bne.w	8002ee8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	4a4b      	ldr	r2, [pc, #300]	; (8002ef4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d90f      	bls.n	8002dea <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00a      	beq.n	8002dea <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	015a      	lsls	r2, r3, #5
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	4413      	add	r3, r2
 8002ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002de0:	461a      	mov	r2, r3
 8002de2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002de6:	6093      	str	r3, [r2, #8]
 8002de8:	e07e      	b.n	8002ee8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	4613      	mov	r3, r2
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	4413      	add	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	69da      	ldr	r2, [r3, #28]
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	0159      	lsls	r1, r3, #5
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	440b      	add	r3, r1
 8002e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e16:	1ad2      	subs	r2, r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d114      	bne.n	8002e4c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d109      	bne.n	8002e3e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6818      	ldr	r0, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e34:	461a      	mov	r2, r3
 8002e36:	2101      	movs	r1, #1
 8002e38:	f002 fc20 	bl	800567c <USB_EP0_OutStart>
 8002e3c:	e006      	b.n	8002e4c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	691a      	ldr	r2, [r3, #16]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	441a      	add	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	4619      	mov	r1, r3
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f004 fb92 	bl	800757c <HAL_PCD_DataOutStageCallback>
 8002e58:	e046      	b.n	8002ee8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	4a26      	ldr	r2, [pc, #152]	; (8002ef8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d124      	bne.n	8002eac <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00a      	beq.n	8002e82 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	015a      	lsls	r2, r3, #5
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	4413      	add	r3, r2
 8002e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e78:	461a      	mov	r2, r3
 8002e7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e7e:	6093      	str	r3, [r2, #8]
 8002e80:	e032      	b.n	8002ee8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	f003 0320 	and.w	r3, r3, #32
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d008      	beq.n	8002e9e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	015a      	lsls	r2, r3, #5
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	4413      	add	r3, r2
 8002e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e98:	461a      	mov	r2, r3
 8002e9a:	2320      	movs	r3, #32
 8002e9c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f004 fb69 	bl	800757c <HAL_PCD_DataOutStageCallback>
 8002eaa:	e01d      	b.n	8002ee8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d114      	bne.n	8002edc <PCD_EP_OutXfrComplete_int+0x1b0>
 8002eb2:	6879      	ldr	r1, [r7, #4]
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	4413      	add	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d108      	bne.n	8002edc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6818      	ldr	r0, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	f002 fbd0 	bl	800567c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f004 fb4a 	bl	800757c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3720      	adds	r7, #32
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	4f54300a 	.word	0x4f54300a
 8002ef8:	4f54310a 	.word	0x4f54310a

08002efc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	333c      	adds	r3, #60	; 0x3c
 8002f14:	3304      	adds	r3, #4
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	015a      	lsls	r2, r3, #5
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	4413      	add	r3, r2
 8002f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	4a15      	ldr	r2, [pc, #84]	; (8002f84 <PCD_EP_OutSetupPacket_int+0x88>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d90e      	bls.n	8002f50 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d009      	beq.n	8002f50 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	015a      	lsls	r2, r3, #5
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	4413      	add	r3, r2
 8002f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f48:	461a      	mov	r2, r3
 8002f4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f4e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f004 fb01 	bl	8007558 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	4a0a      	ldr	r2, [pc, #40]	; (8002f84 <PCD_EP_OutSetupPacket_int+0x88>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d90c      	bls.n	8002f78 <PCD_EP_OutSetupPacket_int+0x7c>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d108      	bne.n	8002f78 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6818      	ldr	r0, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f70:	461a      	mov	r2, r3
 8002f72:	2101      	movs	r1, #1
 8002f74:	f002 fb82 	bl	800567c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3718      	adds	r7, #24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	4f54300a 	.word	0x4f54300a

08002f88 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	460b      	mov	r3, r1
 8002f92:	70fb      	strb	r3, [r7, #3]
 8002f94:	4613      	mov	r3, r2
 8002f96:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002fa0:	78fb      	ldrb	r3, [r7, #3]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d107      	bne.n	8002fb6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002fa6:	883b      	ldrh	r3, [r7, #0]
 8002fa8:	0419      	lsls	r1, r3, #16
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	629a      	str	r2, [r3, #40]	; 0x28
 8002fb4:	e028      	b.n	8003008 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fbc:	0c1b      	lsrs	r3, r3, #16
 8002fbe:	68ba      	ldr	r2, [r7, #8]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	73fb      	strb	r3, [r7, #15]
 8002fc8:	e00d      	b.n	8002fe6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	7bfb      	ldrb	r3, [r7, #15]
 8002fd0:	3340      	adds	r3, #64	; 0x40
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	4413      	add	r3, r2
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	0c1b      	lsrs	r3, r3, #16
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	4413      	add	r3, r2
 8002fde:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002fe0:	7bfb      	ldrb	r3, [r7, #15]
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	73fb      	strb	r3, [r7, #15]
 8002fe6:	7bfa      	ldrb	r2, [r7, #15]
 8002fe8:	78fb      	ldrb	r3, [r7, #3]
 8002fea:	3b01      	subs	r3, #1
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d3ec      	bcc.n	8002fca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002ff0:	883b      	ldrh	r3, [r7, #0]
 8002ff2:	0418      	lsls	r0, r3, #16
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6819      	ldr	r1, [r3, #0]
 8002ff8:	78fb      	ldrb	r3, [r7, #3]
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	68ba      	ldr	r2, [r7, #8]
 8002ffe:	4302      	orrs	r2, r0
 8003000:	3340      	adds	r3, #64	; 0x40
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3714      	adds	r7, #20
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr

08003016 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003016:	b480      	push	{r7}
 8003018:	b083      	sub	sp, #12
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
 800301e:	460b      	mov	r3, r1
 8003020:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	887a      	ldrh	r2, [r7, #2]
 8003028:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	460b      	mov	r3, r1
 8003042:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e267      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b00      	cmp	r3, #0
 800306c:	d075      	beq.n	800315a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800306e:	4b88      	ldr	r3, [pc, #544]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 030c 	and.w	r3, r3, #12
 8003076:	2b04      	cmp	r3, #4
 8003078:	d00c      	beq.n	8003094 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800307a:	4b85      	ldr	r3, [pc, #532]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003082:	2b08      	cmp	r3, #8
 8003084:	d112      	bne.n	80030ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003086:	4b82      	ldr	r3, [pc, #520]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800308e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003092:	d10b      	bne.n	80030ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003094:	4b7e      	ldr	r3, [pc, #504]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d05b      	beq.n	8003158 <HAL_RCC_OscConfig+0x108>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d157      	bne.n	8003158 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e242      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030b4:	d106      	bne.n	80030c4 <HAL_RCC_OscConfig+0x74>
 80030b6:	4b76      	ldr	r3, [pc, #472]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a75      	ldr	r2, [pc, #468]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 80030bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	e01d      	b.n	8003100 <HAL_RCC_OscConfig+0xb0>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030cc:	d10c      	bne.n	80030e8 <HAL_RCC_OscConfig+0x98>
 80030ce:	4b70      	ldr	r3, [pc, #448]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a6f      	ldr	r2, [pc, #444]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 80030d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030d8:	6013      	str	r3, [r2, #0]
 80030da:	4b6d      	ldr	r3, [pc, #436]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a6c      	ldr	r2, [pc, #432]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 80030e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030e4:	6013      	str	r3, [r2, #0]
 80030e6:	e00b      	b.n	8003100 <HAL_RCC_OscConfig+0xb0>
 80030e8:	4b69      	ldr	r3, [pc, #420]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a68      	ldr	r2, [pc, #416]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 80030ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030f2:	6013      	str	r3, [r2, #0]
 80030f4:	4b66      	ldr	r3, [pc, #408]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a65      	ldr	r2, [pc, #404]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 80030fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d013      	beq.n	8003130 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003108:	f7fe fa1e 	bl	8001548 <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003110:	f7fe fa1a 	bl	8001548 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b64      	cmp	r3, #100	; 0x64
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e207      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003122:	4b5b      	ldr	r3, [pc, #364]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0f0      	beq.n	8003110 <HAL_RCC_OscConfig+0xc0>
 800312e:	e014      	b.n	800315a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003130:	f7fe fa0a 	bl	8001548 <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003138:	f7fe fa06 	bl	8001548 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b64      	cmp	r3, #100	; 0x64
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e1f3      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800314a:	4b51      	ldr	r3, [pc, #324]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1f0      	bne.n	8003138 <HAL_RCC_OscConfig+0xe8>
 8003156:	e000      	b.n	800315a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d063      	beq.n	800322e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003166:	4b4a      	ldr	r3, [pc, #296]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 030c 	and.w	r3, r3, #12
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00b      	beq.n	800318a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003172:	4b47      	ldr	r3, [pc, #284]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800317a:	2b08      	cmp	r3, #8
 800317c:	d11c      	bne.n	80031b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800317e:	4b44      	ldr	r3, [pc, #272]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d116      	bne.n	80031b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800318a:	4b41      	ldr	r3, [pc, #260]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d005      	beq.n	80031a2 <HAL_RCC_OscConfig+0x152>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d001      	beq.n	80031a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e1c7      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a2:	4b3b      	ldr	r3, [pc, #236]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	4937      	ldr	r1, [pc, #220]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031b6:	e03a      	b.n	800322e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d020      	beq.n	8003202 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031c0:	4b34      	ldr	r3, [pc, #208]	; (8003294 <HAL_RCC_OscConfig+0x244>)
 80031c2:	2201      	movs	r2, #1
 80031c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c6:	f7fe f9bf 	bl	8001548 <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031cc:	e008      	b.n	80031e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031ce:	f7fe f9bb 	bl	8001548 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e1a8      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e0:	4b2b      	ldr	r3, [pc, #172]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d0f0      	beq.n	80031ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ec:	4b28      	ldr	r3, [pc, #160]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	4925      	ldr	r1, [pc, #148]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	600b      	str	r3, [r1, #0]
 8003200:	e015      	b.n	800322e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003202:	4b24      	ldr	r3, [pc, #144]	; (8003294 <HAL_RCC_OscConfig+0x244>)
 8003204:	2200      	movs	r2, #0
 8003206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003208:	f7fe f99e 	bl	8001548 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003210:	f7fe f99a 	bl	8001548 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e187      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003222:	4b1b      	ldr	r3, [pc, #108]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1f0      	bne.n	8003210 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	2b00      	cmp	r3, #0
 8003238:	d036      	beq.n	80032a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d016      	beq.n	8003270 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003242:	4b15      	ldr	r3, [pc, #84]	; (8003298 <HAL_RCC_OscConfig+0x248>)
 8003244:	2201      	movs	r2, #1
 8003246:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003248:	f7fe f97e 	bl	8001548 <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003250:	f7fe f97a 	bl	8001548 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e167      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003262:	4b0b      	ldr	r3, [pc, #44]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 8003264:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d0f0      	beq.n	8003250 <HAL_RCC_OscConfig+0x200>
 800326e:	e01b      	b.n	80032a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003270:	4b09      	ldr	r3, [pc, #36]	; (8003298 <HAL_RCC_OscConfig+0x248>)
 8003272:	2200      	movs	r2, #0
 8003274:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003276:	f7fe f967 	bl	8001548 <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800327c:	e00e      	b.n	800329c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800327e:	f7fe f963 	bl	8001548 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d907      	bls.n	800329c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e150      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
 8003290:	40023800 	.word	0x40023800
 8003294:	42470000 	.word	0x42470000
 8003298:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800329c:	4b88      	ldr	r3, [pc, #544]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 800329e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1ea      	bne.n	800327e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 8097 	beq.w	80033e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032b6:	2300      	movs	r3, #0
 80032b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ba:	4b81      	ldr	r3, [pc, #516]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10f      	bne.n	80032e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032c6:	2300      	movs	r3, #0
 80032c8:	60bb      	str	r3, [r7, #8]
 80032ca:	4b7d      	ldr	r3, [pc, #500]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	4a7c      	ldr	r2, [pc, #496]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 80032d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032d4:	6413      	str	r3, [r2, #64]	; 0x40
 80032d6:	4b7a      	ldr	r3, [pc, #488]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032de:	60bb      	str	r3, [r7, #8]
 80032e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032e2:	2301      	movs	r3, #1
 80032e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e6:	4b77      	ldr	r3, [pc, #476]	; (80034c4 <HAL_RCC_OscConfig+0x474>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d118      	bne.n	8003324 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032f2:	4b74      	ldr	r3, [pc, #464]	; (80034c4 <HAL_RCC_OscConfig+0x474>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a73      	ldr	r2, [pc, #460]	; (80034c4 <HAL_RCC_OscConfig+0x474>)
 80032f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032fe:	f7fe f923 	bl	8001548 <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003306:	f7fe f91f 	bl	8001548 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e10c      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003318:	4b6a      	ldr	r3, [pc, #424]	; (80034c4 <HAL_RCC_OscConfig+0x474>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0f0      	beq.n	8003306 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d106      	bne.n	800333a <HAL_RCC_OscConfig+0x2ea>
 800332c:	4b64      	ldr	r3, [pc, #400]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 800332e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003330:	4a63      	ldr	r2, [pc, #396]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 8003332:	f043 0301 	orr.w	r3, r3, #1
 8003336:	6713      	str	r3, [r2, #112]	; 0x70
 8003338:	e01c      	b.n	8003374 <HAL_RCC_OscConfig+0x324>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	2b05      	cmp	r3, #5
 8003340:	d10c      	bne.n	800335c <HAL_RCC_OscConfig+0x30c>
 8003342:	4b5f      	ldr	r3, [pc, #380]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 8003344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003346:	4a5e      	ldr	r2, [pc, #376]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 8003348:	f043 0304 	orr.w	r3, r3, #4
 800334c:	6713      	str	r3, [r2, #112]	; 0x70
 800334e:	4b5c      	ldr	r3, [pc, #368]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 8003350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003352:	4a5b      	ldr	r2, [pc, #364]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 8003354:	f043 0301 	orr.w	r3, r3, #1
 8003358:	6713      	str	r3, [r2, #112]	; 0x70
 800335a:	e00b      	b.n	8003374 <HAL_RCC_OscConfig+0x324>
 800335c:	4b58      	ldr	r3, [pc, #352]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 800335e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003360:	4a57      	ldr	r2, [pc, #348]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 8003362:	f023 0301 	bic.w	r3, r3, #1
 8003366:	6713      	str	r3, [r2, #112]	; 0x70
 8003368:	4b55      	ldr	r3, [pc, #340]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 800336a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336c:	4a54      	ldr	r2, [pc, #336]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 800336e:	f023 0304 	bic.w	r3, r3, #4
 8003372:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d015      	beq.n	80033a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800337c:	f7fe f8e4 	bl	8001548 <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003382:	e00a      	b.n	800339a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003384:	f7fe f8e0 	bl	8001548 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003392:	4293      	cmp	r3, r2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e0cb      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800339a:	4b49      	ldr	r3, [pc, #292]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 800339c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d0ee      	beq.n	8003384 <HAL_RCC_OscConfig+0x334>
 80033a6:	e014      	b.n	80033d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033a8:	f7fe f8ce 	bl	8001548 <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033ae:	e00a      	b.n	80033c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033b0:	f7fe f8ca 	bl	8001548 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80033be:	4293      	cmp	r3, r2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e0b5      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033c6:	4b3e      	ldr	r3, [pc, #248]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 80033c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1ee      	bne.n	80033b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033d2:	7dfb      	ldrb	r3, [r7, #23]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d105      	bne.n	80033e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033d8:	4b39      	ldr	r3, [pc, #228]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 80033da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033dc:	4a38      	ldr	r2, [pc, #224]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 80033de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f000 80a1 	beq.w	8003530 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033ee:	4b34      	ldr	r3, [pc, #208]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f003 030c 	and.w	r3, r3, #12
 80033f6:	2b08      	cmp	r3, #8
 80033f8:	d05c      	beq.n	80034b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d141      	bne.n	8003486 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003402:	4b31      	ldr	r3, [pc, #196]	; (80034c8 <HAL_RCC_OscConfig+0x478>)
 8003404:	2200      	movs	r2, #0
 8003406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003408:	f7fe f89e 	bl	8001548 <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003410:	f7fe f89a 	bl	8001548 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e087      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003422:	4b27      	ldr	r3, [pc, #156]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1f0      	bne.n	8003410 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	69da      	ldr	r2, [r3, #28]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	431a      	orrs	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343c:	019b      	lsls	r3, r3, #6
 800343e:	431a      	orrs	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003444:	085b      	lsrs	r3, r3, #1
 8003446:	3b01      	subs	r3, #1
 8003448:	041b      	lsls	r3, r3, #16
 800344a:	431a      	orrs	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003450:	061b      	lsls	r3, r3, #24
 8003452:	491b      	ldr	r1, [pc, #108]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 8003454:	4313      	orrs	r3, r2
 8003456:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003458:	4b1b      	ldr	r3, [pc, #108]	; (80034c8 <HAL_RCC_OscConfig+0x478>)
 800345a:	2201      	movs	r2, #1
 800345c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345e:	f7fe f873 	bl	8001548 <HAL_GetTick>
 8003462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003464:	e008      	b.n	8003478 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003466:	f7fe f86f 	bl	8001548 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e05c      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003478:	4b11      	ldr	r3, [pc, #68]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0f0      	beq.n	8003466 <HAL_RCC_OscConfig+0x416>
 8003484:	e054      	b.n	8003530 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003486:	4b10      	ldr	r3, [pc, #64]	; (80034c8 <HAL_RCC_OscConfig+0x478>)
 8003488:	2200      	movs	r2, #0
 800348a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348c:	f7fe f85c 	bl	8001548 <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003494:	f7fe f858 	bl	8001548 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e045      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034a6:	4b06      	ldr	r3, [pc, #24]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1f0      	bne.n	8003494 <HAL_RCC_OscConfig+0x444>
 80034b2:	e03d      	b.n	8003530 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d107      	bne.n	80034cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e038      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
 80034c0:	40023800 	.word	0x40023800
 80034c4:	40007000 	.word	0x40007000
 80034c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034cc:	4b1b      	ldr	r3, [pc, #108]	; (800353c <HAL_RCC_OscConfig+0x4ec>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d028      	beq.n	800352c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d121      	bne.n	800352c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d11a      	bne.n	800352c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034fc:	4013      	ands	r3, r2
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003502:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003504:	4293      	cmp	r3, r2
 8003506:	d111      	bne.n	800352c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003512:	085b      	lsrs	r3, r3, #1
 8003514:	3b01      	subs	r3, #1
 8003516:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003518:	429a      	cmp	r2, r3
 800351a:	d107      	bne.n	800352c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003526:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003528:	429a      	cmp	r2, r3
 800352a:	d001      	beq.n	8003530 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e000      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3718      	adds	r7, #24
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	40023800 	.word	0x40023800

08003540 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d101      	bne.n	8003554 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e0cc      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003554:	4b68      	ldr	r3, [pc, #416]	; (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 030f 	and.w	r3, r3, #15
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	429a      	cmp	r2, r3
 8003560:	d90c      	bls.n	800357c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003562:	4b65      	ldr	r3, [pc, #404]	; (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800356a:	4b63      	ldr	r3, [pc, #396]	; (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	429a      	cmp	r2, r3
 8003576:	d001      	beq.n	800357c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e0b8      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d020      	beq.n	80035ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	2b00      	cmp	r3, #0
 8003592:	d005      	beq.n	80035a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003594:	4b59      	ldr	r3, [pc, #356]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	4a58      	ldr	r2, [pc, #352]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 800359a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800359e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0308 	and.w	r3, r3, #8
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d005      	beq.n	80035b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035ac:	4b53      	ldr	r3, [pc, #332]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	4a52      	ldr	r2, [pc, #328]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80035b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035b8:	4b50      	ldr	r3, [pc, #320]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	494d      	ldr	r1, [pc, #308]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d044      	beq.n	8003660 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d107      	bne.n	80035ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035de:	4b47      	ldr	r3, [pc, #284]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d119      	bne.n	800361e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e07f      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d003      	beq.n	80035fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035fa:	2b03      	cmp	r3, #3
 80035fc:	d107      	bne.n	800360e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035fe:	4b3f      	ldr	r3, [pc, #252]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d109      	bne.n	800361e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e06f      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800360e:	4b3b      	ldr	r3, [pc, #236]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e067      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800361e:	4b37      	ldr	r3, [pc, #220]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f023 0203 	bic.w	r2, r3, #3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	4934      	ldr	r1, [pc, #208]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 800362c:	4313      	orrs	r3, r2
 800362e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003630:	f7fd ff8a 	bl	8001548 <HAL_GetTick>
 8003634:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003636:	e00a      	b.n	800364e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003638:	f7fd ff86 	bl	8001548 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	f241 3288 	movw	r2, #5000	; 0x1388
 8003646:	4293      	cmp	r3, r2
 8003648:	d901      	bls.n	800364e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e04f      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800364e:	4b2b      	ldr	r3, [pc, #172]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f003 020c 	and.w	r2, r3, #12
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	429a      	cmp	r2, r3
 800365e:	d1eb      	bne.n	8003638 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003660:	4b25      	ldr	r3, [pc, #148]	; (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 030f 	and.w	r3, r3, #15
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	429a      	cmp	r2, r3
 800366c:	d20c      	bcs.n	8003688 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800366e:	4b22      	ldr	r3, [pc, #136]	; (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	b2d2      	uxtb	r2, r2
 8003674:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003676:	4b20      	ldr	r3, [pc, #128]	; (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 030f 	and.w	r3, r3, #15
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	429a      	cmp	r2, r3
 8003682:	d001      	beq.n	8003688 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e032      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b00      	cmp	r3, #0
 8003692:	d008      	beq.n	80036a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003694:	4b19      	ldr	r3, [pc, #100]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	4916      	ldr	r1, [pc, #88]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0308 	and.w	r3, r3, #8
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d009      	beq.n	80036c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036b2:	4b12      	ldr	r3, [pc, #72]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	490e      	ldr	r1, [pc, #56]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036c6:	f000 f821 	bl	800370c <HAL_RCC_GetSysClockFreq>
 80036ca:	4602      	mov	r2, r0
 80036cc:	4b0b      	ldr	r3, [pc, #44]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	091b      	lsrs	r3, r3, #4
 80036d2:	f003 030f 	and.w	r3, r3, #15
 80036d6:	490a      	ldr	r1, [pc, #40]	; (8003700 <HAL_RCC_ClockConfig+0x1c0>)
 80036d8:	5ccb      	ldrb	r3, [r1, r3]
 80036da:	fa22 f303 	lsr.w	r3, r2, r3
 80036de:	4a09      	ldr	r2, [pc, #36]	; (8003704 <HAL_RCC_ClockConfig+0x1c4>)
 80036e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036e2:	4b09      	ldr	r3, [pc, #36]	; (8003708 <HAL_RCC_ClockConfig+0x1c8>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7fd feea 	bl	80014c0 <HAL_InitTick>

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	40023c00 	.word	0x40023c00
 80036fc:	40023800 	.word	0x40023800
 8003700:	08008cb0 	.word	0x08008cb0
 8003704:	20000000 	.word	0x20000000
 8003708:	20000004 	.word	0x20000004

0800370c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800370c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003710:	b094      	sub	sp, #80	; 0x50
 8003712:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003714:	2300      	movs	r3, #0
 8003716:	647b      	str	r3, [r7, #68]	; 0x44
 8003718:	2300      	movs	r3, #0
 800371a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800371c:	2300      	movs	r3, #0
 800371e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003720:	2300      	movs	r3, #0
 8003722:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003724:	4b79      	ldr	r3, [pc, #484]	; (800390c <HAL_RCC_GetSysClockFreq+0x200>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f003 030c 	and.w	r3, r3, #12
 800372c:	2b08      	cmp	r3, #8
 800372e:	d00d      	beq.n	800374c <HAL_RCC_GetSysClockFreq+0x40>
 8003730:	2b08      	cmp	r3, #8
 8003732:	f200 80e1 	bhi.w	80038f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003736:	2b00      	cmp	r3, #0
 8003738:	d002      	beq.n	8003740 <HAL_RCC_GetSysClockFreq+0x34>
 800373a:	2b04      	cmp	r3, #4
 800373c:	d003      	beq.n	8003746 <HAL_RCC_GetSysClockFreq+0x3a>
 800373e:	e0db      	b.n	80038f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003740:	4b73      	ldr	r3, [pc, #460]	; (8003910 <HAL_RCC_GetSysClockFreq+0x204>)
 8003742:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003744:	e0db      	b.n	80038fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003746:	4b73      	ldr	r3, [pc, #460]	; (8003914 <HAL_RCC_GetSysClockFreq+0x208>)
 8003748:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800374a:	e0d8      	b.n	80038fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800374c:	4b6f      	ldr	r3, [pc, #444]	; (800390c <HAL_RCC_GetSysClockFreq+0x200>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003754:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003756:	4b6d      	ldr	r3, [pc, #436]	; (800390c <HAL_RCC_GetSysClockFreq+0x200>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d063      	beq.n	800382a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003762:	4b6a      	ldr	r3, [pc, #424]	; (800390c <HAL_RCC_GetSysClockFreq+0x200>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	099b      	lsrs	r3, r3, #6
 8003768:	2200      	movs	r2, #0
 800376a:	63bb      	str	r3, [r7, #56]	; 0x38
 800376c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800376e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003774:	633b      	str	r3, [r7, #48]	; 0x30
 8003776:	2300      	movs	r3, #0
 8003778:	637b      	str	r3, [r7, #52]	; 0x34
 800377a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800377e:	4622      	mov	r2, r4
 8003780:	462b      	mov	r3, r5
 8003782:	f04f 0000 	mov.w	r0, #0
 8003786:	f04f 0100 	mov.w	r1, #0
 800378a:	0159      	lsls	r1, r3, #5
 800378c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003790:	0150      	lsls	r0, r2, #5
 8003792:	4602      	mov	r2, r0
 8003794:	460b      	mov	r3, r1
 8003796:	4621      	mov	r1, r4
 8003798:	1a51      	subs	r1, r2, r1
 800379a:	6139      	str	r1, [r7, #16]
 800379c:	4629      	mov	r1, r5
 800379e:	eb63 0301 	sbc.w	r3, r3, r1
 80037a2:	617b      	str	r3, [r7, #20]
 80037a4:	f04f 0200 	mov.w	r2, #0
 80037a8:	f04f 0300 	mov.w	r3, #0
 80037ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037b0:	4659      	mov	r1, fp
 80037b2:	018b      	lsls	r3, r1, #6
 80037b4:	4651      	mov	r1, sl
 80037b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037ba:	4651      	mov	r1, sl
 80037bc:	018a      	lsls	r2, r1, #6
 80037be:	4651      	mov	r1, sl
 80037c0:	ebb2 0801 	subs.w	r8, r2, r1
 80037c4:	4659      	mov	r1, fp
 80037c6:	eb63 0901 	sbc.w	r9, r3, r1
 80037ca:	f04f 0200 	mov.w	r2, #0
 80037ce:	f04f 0300 	mov.w	r3, #0
 80037d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037de:	4690      	mov	r8, r2
 80037e0:	4699      	mov	r9, r3
 80037e2:	4623      	mov	r3, r4
 80037e4:	eb18 0303 	adds.w	r3, r8, r3
 80037e8:	60bb      	str	r3, [r7, #8]
 80037ea:	462b      	mov	r3, r5
 80037ec:	eb49 0303 	adc.w	r3, r9, r3
 80037f0:	60fb      	str	r3, [r7, #12]
 80037f2:	f04f 0200 	mov.w	r2, #0
 80037f6:	f04f 0300 	mov.w	r3, #0
 80037fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80037fe:	4629      	mov	r1, r5
 8003800:	024b      	lsls	r3, r1, #9
 8003802:	4621      	mov	r1, r4
 8003804:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003808:	4621      	mov	r1, r4
 800380a:	024a      	lsls	r2, r1, #9
 800380c:	4610      	mov	r0, r2
 800380e:	4619      	mov	r1, r3
 8003810:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003812:	2200      	movs	r2, #0
 8003814:	62bb      	str	r3, [r7, #40]	; 0x28
 8003816:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003818:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800381c:	f7fd f8ce 	bl	80009bc <__aeabi_uldivmod>
 8003820:	4602      	mov	r2, r0
 8003822:	460b      	mov	r3, r1
 8003824:	4613      	mov	r3, r2
 8003826:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003828:	e058      	b.n	80038dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800382a:	4b38      	ldr	r3, [pc, #224]	; (800390c <HAL_RCC_GetSysClockFreq+0x200>)
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	099b      	lsrs	r3, r3, #6
 8003830:	2200      	movs	r2, #0
 8003832:	4618      	mov	r0, r3
 8003834:	4611      	mov	r1, r2
 8003836:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800383a:	623b      	str	r3, [r7, #32]
 800383c:	2300      	movs	r3, #0
 800383e:	627b      	str	r3, [r7, #36]	; 0x24
 8003840:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003844:	4642      	mov	r2, r8
 8003846:	464b      	mov	r3, r9
 8003848:	f04f 0000 	mov.w	r0, #0
 800384c:	f04f 0100 	mov.w	r1, #0
 8003850:	0159      	lsls	r1, r3, #5
 8003852:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003856:	0150      	lsls	r0, r2, #5
 8003858:	4602      	mov	r2, r0
 800385a:	460b      	mov	r3, r1
 800385c:	4641      	mov	r1, r8
 800385e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003862:	4649      	mov	r1, r9
 8003864:	eb63 0b01 	sbc.w	fp, r3, r1
 8003868:	f04f 0200 	mov.w	r2, #0
 800386c:	f04f 0300 	mov.w	r3, #0
 8003870:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003874:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003878:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800387c:	ebb2 040a 	subs.w	r4, r2, sl
 8003880:	eb63 050b 	sbc.w	r5, r3, fp
 8003884:	f04f 0200 	mov.w	r2, #0
 8003888:	f04f 0300 	mov.w	r3, #0
 800388c:	00eb      	lsls	r3, r5, #3
 800388e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003892:	00e2      	lsls	r2, r4, #3
 8003894:	4614      	mov	r4, r2
 8003896:	461d      	mov	r5, r3
 8003898:	4643      	mov	r3, r8
 800389a:	18e3      	adds	r3, r4, r3
 800389c:	603b      	str	r3, [r7, #0]
 800389e:	464b      	mov	r3, r9
 80038a0:	eb45 0303 	adc.w	r3, r5, r3
 80038a4:	607b      	str	r3, [r7, #4]
 80038a6:	f04f 0200 	mov.w	r2, #0
 80038aa:	f04f 0300 	mov.w	r3, #0
 80038ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038b2:	4629      	mov	r1, r5
 80038b4:	028b      	lsls	r3, r1, #10
 80038b6:	4621      	mov	r1, r4
 80038b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038bc:	4621      	mov	r1, r4
 80038be:	028a      	lsls	r2, r1, #10
 80038c0:	4610      	mov	r0, r2
 80038c2:	4619      	mov	r1, r3
 80038c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038c6:	2200      	movs	r2, #0
 80038c8:	61bb      	str	r3, [r7, #24]
 80038ca:	61fa      	str	r2, [r7, #28]
 80038cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038d0:	f7fd f874 	bl	80009bc <__aeabi_uldivmod>
 80038d4:	4602      	mov	r2, r0
 80038d6:	460b      	mov	r3, r1
 80038d8:	4613      	mov	r3, r2
 80038da:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038dc:	4b0b      	ldr	r3, [pc, #44]	; (800390c <HAL_RCC_GetSysClockFreq+0x200>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	0c1b      	lsrs	r3, r3, #16
 80038e2:	f003 0303 	and.w	r3, r3, #3
 80038e6:	3301      	adds	r3, #1
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80038ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80038ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038f6:	e002      	b.n	80038fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038f8:	4b05      	ldr	r3, [pc, #20]	; (8003910 <HAL_RCC_GetSysClockFreq+0x204>)
 80038fa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003900:	4618      	mov	r0, r3
 8003902:	3750      	adds	r7, #80	; 0x50
 8003904:	46bd      	mov	sp, r7
 8003906:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800390a:	bf00      	nop
 800390c:	40023800 	.word	0x40023800
 8003910:	00f42400 	.word	0x00f42400
 8003914:	007a1200 	.word	0x007a1200

08003918 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800391c:	4b03      	ldr	r3, [pc, #12]	; (800392c <HAL_RCC_GetHCLKFreq+0x14>)
 800391e:	681b      	ldr	r3, [r3, #0]
}
 8003920:	4618      	mov	r0, r3
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	20000000 	.word	0x20000000

08003930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003934:	f7ff fff0 	bl	8003918 <HAL_RCC_GetHCLKFreq>
 8003938:	4602      	mov	r2, r0
 800393a:	4b05      	ldr	r3, [pc, #20]	; (8003950 <HAL_RCC_GetPCLK1Freq+0x20>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	0a9b      	lsrs	r3, r3, #10
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	4903      	ldr	r1, [pc, #12]	; (8003954 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003946:	5ccb      	ldrb	r3, [r1, r3]
 8003948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800394c:	4618      	mov	r0, r3
 800394e:	bd80      	pop	{r7, pc}
 8003950:	40023800 	.word	0x40023800
 8003954:	08008cc0 	.word	0x08008cc0

08003958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800395c:	f7ff ffdc 	bl	8003918 <HAL_RCC_GetHCLKFreq>
 8003960:	4602      	mov	r2, r0
 8003962:	4b05      	ldr	r3, [pc, #20]	; (8003978 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	0b5b      	lsrs	r3, r3, #13
 8003968:	f003 0307 	and.w	r3, r3, #7
 800396c:	4903      	ldr	r1, [pc, #12]	; (800397c <HAL_RCC_GetPCLK2Freq+0x24>)
 800396e:	5ccb      	ldrb	r3, [r1, r3]
 8003970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003974:	4618      	mov	r0, r3
 8003976:	bd80      	pop	{r7, pc}
 8003978:	40023800 	.word	0x40023800
 800397c:	08008cc0 	.word	0x08008cc0

08003980 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e03f      	b.n	8003a12 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d106      	bne.n	80039ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7fd fcb0 	bl	800130c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2224      	movs	r2, #36	; 0x24
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68da      	ldr	r2, [r3, #12]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 f829 	bl	8003a1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	691a      	ldr	r2, [r3, #16]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	695a      	ldr	r2, [r3, #20]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68da      	ldr	r2, [r3, #12]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2220      	movs	r2, #32
 8003a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3708      	adds	r7, #8
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
	...

08003a1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a20:	b0c0      	sub	sp, #256	; 0x100
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a38:	68d9      	ldr	r1, [r3, #12]
 8003a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	ea40 0301 	orr.w	r3, r0, r1
 8003a44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	431a      	orrs	r2, r3
 8003a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a60:	69db      	ldr	r3, [r3, #28]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003a74:	f021 010c 	bic.w	r1, r1, #12
 8003a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003a82:	430b      	orrs	r3, r1
 8003a84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a96:	6999      	ldr	r1, [r3, #24]
 8003a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	ea40 0301 	orr.w	r3, r0, r1
 8003aa2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	4b8f      	ldr	r3, [pc, #572]	; (8003ce8 <UART_SetConfig+0x2cc>)
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d005      	beq.n	8003abc <UART_SetConfig+0xa0>
 8003ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	4b8d      	ldr	r3, [pc, #564]	; (8003cec <UART_SetConfig+0x2d0>)
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d104      	bne.n	8003ac6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003abc:	f7ff ff4c 	bl	8003958 <HAL_RCC_GetPCLK2Freq>
 8003ac0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003ac4:	e003      	b.n	8003ace <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ac6:	f7ff ff33 	bl	8003930 <HAL_RCC_GetPCLK1Freq>
 8003aca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad2:	69db      	ldr	r3, [r3, #28]
 8003ad4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ad8:	f040 810c 	bne.w	8003cf4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003adc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003ae6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003aea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003aee:	4622      	mov	r2, r4
 8003af0:	462b      	mov	r3, r5
 8003af2:	1891      	adds	r1, r2, r2
 8003af4:	65b9      	str	r1, [r7, #88]	; 0x58
 8003af6:	415b      	adcs	r3, r3
 8003af8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003afa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003afe:	4621      	mov	r1, r4
 8003b00:	eb12 0801 	adds.w	r8, r2, r1
 8003b04:	4629      	mov	r1, r5
 8003b06:	eb43 0901 	adc.w	r9, r3, r1
 8003b0a:	f04f 0200 	mov.w	r2, #0
 8003b0e:	f04f 0300 	mov.w	r3, #0
 8003b12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b1e:	4690      	mov	r8, r2
 8003b20:	4699      	mov	r9, r3
 8003b22:	4623      	mov	r3, r4
 8003b24:	eb18 0303 	adds.w	r3, r8, r3
 8003b28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003b2c:	462b      	mov	r3, r5
 8003b2e:	eb49 0303 	adc.w	r3, r9, r3
 8003b32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003b42:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003b46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	18db      	adds	r3, r3, r3
 8003b4e:	653b      	str	r3, [r7, #80]	; 0x50
 8003b50:	4613      	mov	r3, r2
 8003b52:	eb42 0303 	adc.w	r3, r2, r3
 8003b56:	657b      	str	r3, [r7, #84]	; 0x54
 8003b58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003b5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003b60:	f7fc ff2c 	bl	80009bc <__aeabi_uldivmod>
 8003b64:	4602      	mov	r2, r0
 8003b66:	460b      	mov	r3, r1
 8003b68:	4b61      	ldr	r3, [pc, #388]	; (8003cf0 <UART_SetConfig+0x2d4>)
 8003b6a:	fba3 2302 	umull	r2, r3, r3, r2
 8003b6e:	095b      	lsrs	r3, r3, #5
 8003b70:	011c      	lsls	r4, r3, #4
 8003b72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b76:	2200      	movs	r2, #0
 8003b78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b7c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003b80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003b84:	4642      	mov	r2, r8
 8003b86:	464b      	mov	r3, r9
 8003b88:	1891      	adds	r1, r2, r2
 8003b8a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003b8c:	415b      	adcs	r3, r3
 8003b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003b94:	4641      	mov	r1, r8
 8003b96:	eb12 0a01 	adds.w	sl, r2, r1
 8003b9a:	4649      	mov	r1, r9
 8003b9c:	eb43 0b01 	adc.w	fp, r3, r1
 8003ba0:	f04f 0200 	mov.w	r2, #0
 8003ba4:	f04f 0300 	mov.w	r3, #0
 8003ba8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003bac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003bb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bb4:	4692      	mov	sl, r2
 8003bb6:	469b      	mov	fp, r3
 8003bb8:	4643      	mov	r3, r8
 8003bba:	eb1a 0303 	adds.w	r3, sl, r3
 8003bbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003bc2:	464b      	mov	r3, r9
 8003bc4:	eb4b 0303 	adc.w	r3, fp, r3
 8003bc8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003bd8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003bdc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003be0:	460b      	mov	r3, r1
 8003be2:	18db      	adds	r3, r3, r3
 8003be4:	643b      	str	r3, [r7, #64]	; 0x40
 8003be6:	4613      	mov	r3, r2
 8003be8:	eb42 0303 	adc.w	r3, r2, r3
 8003bec:	647b      	str	r3, [r7, #68]	; 0x44
 8003bee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003bf2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003bf6:	f7fc fee1 	bl	80009bc <__aeabi_uldivmod>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	4611      	mov	r1, r2
 8003c00:	4b3b      	ldr	r3, [pc, #236]	; (8003cf0 <UART_SetConfig+0x2d4>)
 8003c02:	fba3 2301 	umull	r2, r3, r3, r1
 8003c06:	095b      	lsrs	r3, r3, #5
 8003c08:	2264      	movs	r2, #100	; 0x64
 8003c0a:	fb02 f303 	mul.w	r3, r2, r3
 8003c0e:	1acb      	subs	r3, r1, r3
 8003c10:	00db      	lsls	r3, r3, #3
 8003c12:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003c16:	4b36      	ldr	r3, [pc, #216]	; (8003cf0 <UART_SetConfig+0x2d4>)
 8003c18:	fba3 2302 	umull	r2, r3, r3, r2
 8003c1c:	095b      	lsrs	r3, r3, #5
 8003c1e:	005b      	lsls	r3, r3, #1
 8003c20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c24:	441c      	add	r4, r3
 8003c26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c30:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003c34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003c38:	4642      	mov	r2, r8
 8003c3a:	464b      	mov	r3, r9
 8003c3c:	1891      	adds	r1, r2, r2
 8003c3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c40:	415b      	adcs	r3, r3
 8003c42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003c48:	4641      	mov	r1, r8
 8003c4a:	1851      	adds	r1, r2, r1
 8003c4c:	6339      	str	r1, [r7, #48]	; 0x30
 8003c4e:	4649      	mov	r1, r9
 8003c50:	414b      	adcs	r3, r1
 8003c52:	637b      	str	r3, [r7, #52]	; 0x34
 8003c54:	f04f 0200 	mov.w	r2, #0
 8003c58:	f04f 0300 	mov.w	r3, #0
 8003c5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003c60:	4659      	mov	r1, fp
 8003c62:	00cb      	lsls	r3, r1, #3
 8003c64:	4651      	mov	r1, sl
 8003c66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c6a:	4651      	mov	r1, sl
 8003c6c:	00ca      	lsls	r2, r1, #3
 8003c6e:	4610      	mov	r0, r2
 8003c70:	4619      	mov	r1, r3
 8003c72:	4603      	mov	r3, r0
 8003c74:	4642      	mov	r2, r8
 8003c76:	189b      	adds	r3, r3, r2
 8003c78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c7c:	464b      	mov	r3, r9
 8003c7e:	460a      	mov	r2, r1
 8003c80:	eb42 0303 	adc.w	r3, r2, r3
 8003c84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003c94:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003c98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	18db      	adds	r3, r3, r3
 8003ca0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	eb42 0303 	adc.w	r3, r2, r3
 8003ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003caa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003cae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003cb2:	f7fc fe83 	bl	80009bc <__aeabi_uldivmod>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	460b      	mov	r3, r1
 8003cba:	4b0d      	ldr	r3, [pc, #52]	; (8003cf0 <UART_SetConfig+0x2d4>)
 8003cbc:	fba3 1302 	umull	r1, r3, r3, r2
 8003cc0:	095b      	lsrs	r3, r3, #5
 8003cc2:	2164      	movs	r1, #100	; 0x64
 8003cc4:	fb01 f303 	mul.w	r3, r1, r3
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	3332      	adds	r3, #50	; 0x32
 8003cce:	4a08      	ldr	r2, [pc, #32]	; (8003cf0 <UART_SetConfig+0x2d4>)
 8003cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd4:	095b      	lsrs	r3, r3, #5
 8003cd6:	f003 0207 	and.w	r2, r3, #7
 8003cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4422      	add	r2, r4
 8003ce2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ce4:	e105      	b.n	8003ef2 <UART_SetConfig+0x4d6>
 8003ce6:	bf00      	nop
 8003ce8:	40011000 	.word	0x40011000
 8003cec:	40011400 	.word	0x40011400
 8003cf0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003cfe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003d02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003d06:	4642      	mov	r2, r8
 8003d08:	464b      	mov	r3, r9
 8003d0a:	1891      	adds	r1, r2, r2
 8003d0c:	6239      	str	r1, [r7, #32]
 8003d0e:	415b      	adcs	r3, r3
 8003d10:	627b      	str	r3, [r7, #36]	; 0x24
 8003d12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d16:	4641      	mov	r1, r8
 8003d18:	1854      	adds	r4, r2, r1
 8003d1a:	4649      	mov	r1, r9
 8003d1c:	eb43 0501 	adc.w	r5, r3, r1
 8003d20:	f04f 0200 	mov.w	r2, #0
 8003d24:	f04f 0300 	mov.w	r3, #0
 8003d28:	00eb      	lsls	r3, r5, #3
 8003d2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d2e:	00e2      	lsls	r2, r4, #3
 8003d30:	4614      	mov	r4, r2
 8003d32:	461d      	mov	r5, r3
 8003d34:	4643      	mov	r3, r8
 8003d36:	18e3      	adds	r3, r4, r3
 8003d38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003d3c:	464b      	mov	r3, r9
 8003d3e:	eb45 0303 	adc.w	r3, r5, r3
 8003d42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d56:	f04f 0200 	mov.w	r2, #0
 8003d5a:	f04f 0300 	mov.w	r3, #0
 8003d5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003d62:	4629      	mov	r1, r5
 8003d64:	008b      	lsls	r3, r1, #2
 8003d66:	4621      	mov	r1, r4
 8003d68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d6c:	4621      	mov	r1, r4
 8003d6e:	008a      	lsls	r2, r1, #2
 8003d70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003d74:	f7fc fe22 	bl	80009bc <__aeabi_uldivmod>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	4b60      	ldr	r3, [pc, #384]	; (8003f00 <UART_SetConfig+0x4e4>)
 8003d7e:	fba3 2302 	umull	r2, r3, r3, r2
 8003d82:	095b      	lsrs	r3, r3, #5
 8003d84:	011c      	lsls	r4, r3, #4
 8003d86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003d94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003d98:	4642      	mov	r2, r8
 8003d9a:	464b      	mov	r3, r9
 8003d9c:	1891      	adds	r1, r2, r2
 8003d9e:	61b9      	str	r1, [r7, #24]
 8003da0:	415b      	adcs	r3, r3
 8003da2:	61fb      	str	r3, [r7, #28]
 8003da4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003da8:	4641      	mov	r1, r8
 8003daa:	1851      	adds	r1, r2, r1
 8003dac:	6139      	str	r1, [r7, #16]
 8003dae:	4649      	mov	r1, r9
 8003db0:	414b      	adcs	r3, r1
 8003db2:	617b      	str	r3, [r7, #20]
 8003db4:	f04f 0200 	mov.w	r2, #0
 8003db8:	f04f 0300 	mov.w	r3, #0
 8003dbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003dc0:	4659      	mov	r1, fp
 8003dc2:	00cb      	lsls	r3, r1, #3
 8003dc4:	4651      	mov	r1, sl
 8003dc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dca:	4651      	mov	r1, sl
 8003dcc:	00ca      	lsls	r2, r1, #3
 8003dce:	4610      	mov	r0, r2
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	4642      	mov	r2, r8
 8003dd6:	189b      	adds	r3, r3, r2
 8003dd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ddc:	464b      	mov	r3, r9
 8003dde:	460a      	mov	r2, r1
 8003de0:	eb42 0303 	adc.w	r3, r2, r3
 8003de4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003df2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003df4:	f04f 0200 	mov.w	r2, #0
 8003df8:	f04f 0300 	mov.w	r3, #0
 8003dfc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003e00:	4649      	mov	r1, r9
 8003e02:	008b      	lsls	r3, r1, #2
 8003e04:	4641      	mov	r1, r8
 8003e06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e0a:	4641      	mov	r1, r8
 8003e0c:	008a      	lsls	r2, r1, #2
 8003e0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003e12:	f7fc fdd3 	bl	80009bc <__aeabi_uldivmod>
 8003e16:	4602      	mov	r2, r0
 8003e18:	460b      	mov	r3, r1
 8003e1a:	4b39      	ldr	r3, [pc, #228]	; (8003f00 <UART_SetConfig+0x4e4>)
 8003e1c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e20:	095b      	lsrs	r3, r3, #5
 8003e22:	2164      	movs	r1, #100	; 0x64
 8003e24:	fb01 f303 	mul.w	r3, r1, r3
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	011b      	lsls	r3, r3, #4
 8003e2c:	3332      	adds	r3, #50	; 0x32
 8003e2e:	4a34      	ldr	r2, [pc, #208]	; (8003f00 <UART_SetConfig+0x4e4>)
 8003e30:	fba2 2303 	umull	r2, r3, r2, r3
 8003e34:	095b      	lsrs	r3, r3, #5
 8003e36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e3a:	441c      	add	r4, r3
 8003e3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e40:	2200      	movs	r2, #0
 8003e42:	673b      	str	r3, [r7, #112]	; 0x70
 8003e44:	677a      	str	r2, [r7, #116]	; 0x74
 8003e46:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003e4a:	4642      	mov	r2, r8
 8003e4c:	464b      	mov	r3, r9
 8003e4e:	1891      	adds	r1, r2, r2
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	415b      	adcs	r3, r3
 8003e54:	60fb      	str	r3, [r7, #12]
 8003e56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e5a:	4641      	mov	r1, r8
 8003e5c:	1851      	adds	r1, r2, r1
 8003e5e:	6039      	str	r1, [r7, #0]
 8003e60:	4649      	mov	r1, r9
 8003e62:	414b      	adcs	r3, r1
 8003e64:	607b      	str	r3, [r7, #4]
 8003e66:	f04f 0200 	mov.w	r2, #0
 8003e6a:	f04f 0300 	mov.w	r3, #0
 8003e6e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e72:	4659      	mov	r1, fp
 8003e74:	00cb      	lsls	r3, r1, #3
 8003e76:	4651      	mov	r1, sl
 8003e78:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e7c:	4651      	mov	r1, sl
 8003e7e:	00ca      	lsls	r2, r1, #3
 8003e80:	4610      	mov	r0, r2
 8003e82:	4619      	mov	r1, r3
 8003e84:	4603      	mov	r3, r0
 8003e86:	4642      	mov	r2, r8
 8003e88:	189b      	adds	r3, r3, r2
 8003e8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e8c:	464b      	mov	r3, r9
 8003e8e:	460a      	mov	r2, r1
 8003e90:	eb42 0303 	adc.w	r3, r2, r3
 8003e94:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	663b      	str	r3, [r7, #96]	; 0x60
 8003ea0:	667a      	str	r2, [r7, #100]	; 0x64
 8003ea2:	f04f 0200 	mov.w	r2, #0
 8003ea6:	f04f 0300 	mov.w	r3, #0
 8003eaa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003eae:	4649      	mov	r1, r9
 8003eb0:	008b      	lsls	r3, r1, #2
 8003eb2:	4641      	mov	r1, r8
 8003eb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003eb8:	4641      	mov	r1, r8
 8003eba:	008a      	lsls	r2, r1, #2
 8003ebc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003ec0:	f7fc fd7c 	bl	80009bc <__aeabi_uldivmod>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	4b0d      	ldr	r3, [pc, #52]	; (8003f00 <UART_SetConfig+0x4e4>)
 8003eca:	fba3 1302 	umull	r1, r3, r3, r2
 8003ece:	095b      	lsrs	r3, r3, #5
 8003ed0:	2164      	movs	r1, #100	; 0x64
 8003ed2:	fb01 f303 	mul.w	r3, r1, r3
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	011b      	lsls	r3, r3, #4
 8003eda:	3332      	adds	r3, #50	; 0x32
 8003edc:	4a08      	ldr	r2, [pc, #32]	; (8003f00 <UART_SetConfig+0x4e4>)
 8003ede:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee2:	095b      	lsrs	r3, r3, #5
 8003ee4:	f003 020f 	and.w	r2, r3, #15
 8003ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4422      	add	r2, r4
 8003ef0:	609a      	str	r2, [r3, #8]
}
 8003ef2:	bf00      	nop
 8003ef4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003efe:	bf00      	nop
 8003f00:	51eb851f 	.word	0x51eb851f

08003f04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f04:	b084      	sub	sp, #16
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b084      	sub	sp, #16
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
 8003f0e:	f107 001c 	add.w	r0, r7, #28
 8003f12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d122      	bne.n	8003f62 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003f30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d105      	bne.n	8003f56 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f001 fbee 	bl	8005738 <USB_CoreReset>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	73fb      	strb	r3, [r7, #15]
 8003f60:	e01a      	b.n	8003f98 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f001 fbe2 	bl	8005738 <USB_CoreReset>
 8003f74:	4603      	mov	r3, r0
 8003f76:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003f78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d106      	bne.n	8003f8c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f82:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	639a      	str	r2, [r3, #56]	; 0x38
 8003f8a:	e005      	b.n	8003f98 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d10b      	bne.n	8003fb6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f043 0206 	orr.w	r2, r3, #6
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f043 0220 	orr.w	r2, r3, #32
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3710      	adds	r7, #16
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003fc2:	b004      	add	sp, #16
 8003fc4:	4770      	bx	lr
	...

08003fc8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b087      	sub	sp, #28
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003fd6:	79fb      	ldrb	r3, [r7, #7]
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d165      	bne.n	80040a8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	4a41      	ldr	r2, [pc, #260]	; (80040e4 <USB_SetTurnaroundTime+0x11c>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d906      	bls.n	8003ff2 <USB_SetTurnaroundTime+0x2a>
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	4a40      	ldr	r2, [pc, #256]	; (80040e8 <USB_SetTurnaroundTime+0x120>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d202      	bcs.n	8003ff2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003fec:	230f      	movs	r3, #15
 8003fee:	617b      	str	r3, [r7, #20]
 8003ff0:	e062      	b.n	80040b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	4a3c      	ldr	r2, [pc, #240]	; (80040e8 <USB_SetTurnaroundTime+0x120>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d306      	bcc.n	8004008 <USB_SetTurnaroundTime+0x40>
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	4a3b      	ldr	r2, [pc, #236]	; (80040ec <USB_SetTurnaroundTime+0x124>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d202      	bcs.n	8004008 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004002:	230e      	movs	r3, #14
 8004004:	617b      	str	r3, [r7, #20]
 8004006:	e057      	b.n	80040b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	4a38      	ldr	r2, [pc, #224]	; (80040ec <USB_SetTurnaroundTime+0x124>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d306      	bcc.n	800401e <USB_SetTurnaroundTime+0x56>
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	4a37      	ldr	r2, [pc, #220]	; (80040f0 <USB_SetTurnaroundTime+0x128>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d202      	bcs.n	800401e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004018:	230d      	movs	r3, #13
 800401a:	617b      	str	r3, [r7, #20]
 800401c:	e04c      	b.n	80040b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	4a33      	ldr	r2, [pc, #204]	; (80040f0 <USB_SetTurnaroundTime+0x128>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d306      	bcc.n	8004034 <USB_SetTurnaroundTime+0x6c>
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	4a32      	ldr	r2, [pc, #200]	; (80040f4 <USB_SetTurnaroundTime+0x12c>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d802      	bhi.n	8004034 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800402e:	230c      	movs	r3, #12
 8004030:	617b      	str	r3, [r7, #20]
 8004032:	e041      	b.n	80040b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	4a2f      	ldr	r2, [pc, #188]	; (80040f4 <USB_SetTurnaroundTime+0x12c>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d906      	bls.n	800404a <USB_SetTurnaroundTime+0x82>
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	4a2e      	ldr	r2, [pc, #184]	; (80040f8 <USB_SetTurnaroundTime+0x130>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d802      	bhi.n	800404a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004044:	230b      	movs	r3, #11
 8004046:	617b      	str	r3, [r7, #20]
 8004048:	e036      	b.n	80040b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	4a2a      	ldr	r2, [pc, #168]	; (80040f8 <USB_SetTurnaroundTime+0x130>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d906      	bls.n	8004060 <USB_SetTurnaroundTime+0x98>
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	4a29      	ldr	r2, [pc, #164]	; (80040fc <USB_SetTurnaroundTime+0x134>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d802      	bhi.n	8004060 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800405a:	230a      	movs	r3, #10
 800405c:	617b      	str	r3, [r7, #20]
 800405e:	e02b      	b.n	80040b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	4a26      	ldr	r2, [pc, #152]	; (80040fc <USB_SetTurnaroundTime+0x134>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d906      	bls.n	8004076 <USB_SetTurnaroundTime+0xae>
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	4a25      	ldr	r2, [pc, #148]	; (8004100 <USB_SetTurnaroundTime+0x138>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d202      	bcs.n	8004076 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004070:	2309      	movs	r3, #9
 8004072:	617b      	str	r3, [r7, #20]
 8004074:	e020      	b.n	80040b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	4a21      	ldr	r2, [pc, #132]	; (8004100 <USB_SetTurnaroundTime+0x138>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d306      	bcc.n	800408c <USB_SetTurnaroundTime+0xc4>
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	4a20      	ldr	r2, [pc, #128]	; (8004104 <USB_SetTurnaroundTime+0x13c>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d802      	bhi.n	800408c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004086:	2308      	movs	r3, #8
 8004088:	617b      	str	r3, [r7, #20]
 800408a:	e015      	b.n	80040b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	4a1d      	ldr	r2, [pc, #116]	; (8004104 <USB_SetTurnaroundTime+0x13c>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d906      	bls.n	80040a2 <USB_SetTurnaroundTime+0xda>
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	4a1c      	ldr	r2, [pc, #112]	; (8004108 <USB_SetTurnaroundTime+0x140>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d202      	bcs.n	80040a2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800409c:	2307      	movs	r3, #7
 800409e:	617b      	str	r3, [r7, #20]
 80040a0:	e00a      	b.n	80040b8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80040a2:	2306      	movs	r3, #6
 80040a4:	617b      	str	r3, [r7, #20]
 80040a6:	e007      	b.n	80040b8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80040a8:	79fb      	ldrb	r3, [r7, #7]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d102      	bne.n	80040b4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80040ae:	2309      	movs	r3, #9
 80040b0:	617b      	str	r3, [r7, #20]
 80040b2:	e001      	b.n	80040b8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80040b4:	2309      	movs	r3, #9
 80040b6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	68da      	ldr	r2, [r3, #12]
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	029b      	lsls	r3, r3, #10
 80040cc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80040d0:	431a      	orrs	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	371c      	adds	r7, #28
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr
 80040e4:	00d8acbf 	.word	0x00d8acbf
 80040e8:	00e4e1c0 	.word	0x00e4e1c0
 80040ec:	00f42400 	.word	0x00f42400
 80040f0:	01067380 	.word	0x01067380
 80040f4:	011a499f 	.word	0x011a499f
 80040f8:	01312cff 	.word	0x01312cff
 80040fc:	014ca43f 	.word	0x014ca43f
 8004100:	016e3600 	.word	0x016e3600
 8004104:	01a6ab1f 	.word	0x01a6ab1f
 8004108:	01e84800 	.word	0x01e84800

0800410c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f043 0201 	orr.w	r2, r3, #1
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	370c      	adds	r7, #12
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800412e:	b480      	push	{r7}
 8004130:	b083      	sub	sp, #12
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f023 0201 	bic.w	r2, r3, #1
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	460b      	mov	r3, r1
 800415a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800415c:	2300      	movs	r3, #0
 800415e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800416c:	78fb      	ldrb	r3, [r7, #3]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d115      	bne.n	800419e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800417e:	2001      	movs	r0, #1
 8004180:	f7fd f9ee 	bl	8001560 <HAL_Delay>
      ms++;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	3301      	adds	r3, #1
 8004188:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f001 fa45 	bl	800561a <USB_GetMode>
 8004190:	4603      	mov	r3, r0
 8004192:	2b01      	cmp	r3, #1
 8004194:	d01e      	beq.n	80041d4 <USB_SetCurrentMode+0x84>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2b31      	cmp	r3, #49	; 0x31
 800419a:	d9f0      	bls.n	800417e <USB_SetCurrentMode+0x2e>
 800419c:	e01a      	b.n	80041d4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800419e:	78fb      	ldrb	r3, [r7, #3]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d115      	bne.n	80041d0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80041b0:	2001      	movs	r0, #1
 80041b2:	f7fd f9d5 	bl	8001560 <HAL_Delay>
      ms++;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	3301      	adds	r3, #1
 80041ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f001 fa2c 	bl	800561a <USB_GetMode>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d005      	beq.n	80041d4 <USB_SetCurrentMode+0x84>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2b31      	cmp	r3, #49	; 0x31
 80041cc:	d9f0      	bls.n	80041b0 <USB_SetCurrentMode+0x60>
 80041ce:	e001      	b.n	80041d4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e005      	b.n	80041e0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2b32      	cmp	r3, #50	; 0x32
 80041d8:	d101      	bne.n	80041de <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e000      	b.n	80041e0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041e8:	b084      	sub	sp, #16
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b086      	sub	sp, #24
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
 80041f2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80041f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80041fa:	2300      	movs	r3, #0
 80041fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004202:	2300      	movs	r3, #0
 8004204:	613b      	str	r3, [r7, #16]
 8004206:	e009      	b.n	800421c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	3340      	adds	r3, #64	; 0x40
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	4413      	add	r3, r2
 8004212:	2200      	movs	r2, #0
 8004214:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	3301      	adds	r3, #1
 800421a:	613b      	str	r3, [r7, #16]
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	2b0e      	cmp	r3, #14
 8004220:	d9f2      	bls.n	8004208 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004224:	2b00      	cmp	r3, #0
 8004226:	d11c      	bne.n	8004262 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004236:	f043 0302 	orr.w	r3, r3, #2
 800423a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004240:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004258:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	639a      	str	r2, [r3, #56]	; 0x38
 8004260:	e00b      	b.n	800427a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004266:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004272:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004280:	461a      	mov	r2, r3
 8004282:	2300      	movs	r3, #0
 8004284:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800428c:	4619      	mov	r1, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004294:	461a      	mov	r2, r3
 8004296:	680b      	ldr	r3, [r1, #0]
 8004298:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800429a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800429c:	2b01      	cmp	r3, #1
 800429e:	d10c      	bne.n	80042ba <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80042a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d104      	bne.n	80042b0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80042a6:	2100      	movs	r1, #0
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 f965 	bl	8004578 <USB_SetDevSpeed>
 80042ae:	e008      	b.n	80042c2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80042b0:	2101      	movs	r1, #1
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 f960 	bl	8004578 <USB_SetDevSpeed>
 80042b8:	e003      	b.n	80042c2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80042ba:	2103      	movs	r1, #3
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 f95b 	bl	8004578 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80042c2:	2110      	movs	r1, #16
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f000 f8f3 	bl	80044b0 <USB_FlushTxFifo>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d001      	beq.n	80042d4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 f91f 	bl	8004518 <USB_FlushRxFifo>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d001      	beq.n	80042e4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ea:	461a      	mov	r2, r3
 80042ec:	2300      	movs	r3, #0
 80042ee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042f6:	461a      	mov	r2, r3
 80042f8:	2300      	movs	r3, #0
 80042fa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004302:	461a      	mov	r2, r3
 8004304:	2300      	movs	r3, #0
 8004306:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004308:	2300      	movs	r3, #0
 800430a:	613b      	str	r3, [r7, #16]
 800430c:	e043      	b.n	8004396 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	015a      	lsls	r2, r3, #5
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	4413      	add	r3, r2
 8004316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004320:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004324:	d118      	bne.n	8004358 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d10a      	bne.n	8004342 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	015a      	lsls	r2, r3, #5
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	4413      	add	r3, r2
 8004334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004338:	461a      	mov	r2, r3
 800433a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800433e:	6013      	str	r3, [r2, #0]
 8004340:	e013      	b.n	800436a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	015a      	lsls	r2, r3, #5
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	4413      	add	r3, r2
 800434a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800434e:	461a      	mov	r2, r3
 8004350:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004354:	6013      	str	r3, [r2, #0]
 8004356:	e008      	b.n	800436a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	015a      	lsls	r2, r3, #5
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	4413      	add	r3, r2
 8004360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004364:	461a      	mov	r2, r3
 8004366:	2300      	movs	r3, #0
 8004368:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	015a      	lsls	r2, r3, #5
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	4413      	add	r3, r2
 8004372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004376:	461a      	mov	r2, r3
 8004378:	2300      	movs	r3, #0
 800437a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	015a      	lsls	r2, r3, #5
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	4413      	add	r3, r2
 8004384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004388:	461a      	mov	r2, r3
 800438a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800438e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	3301      	adds	r3, #1
 8004394:	613b      	str	r3, [r7, #16]
 8004396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	429a      	cmp	r2, r3
 800439c:	d3b7      	bcc.n	800430e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800439e:	2300      	movs	r3, #0
 80043a0:	613b      	str	r3, [r7, #16]
 80043a2:	e043      	b.n	800442c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	015a      	lsls	r2, r3, #5
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	4413      	add	r3, r2
 80043ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043ba:	d118      	bne.n	80043ee <USB_DevInit+0x206>
    {
      if (i == 0U)
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10a      	bne.n	80043d8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	015a      	lsls	r2, r3, #5
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	4413      	add	r3, r2
 80043ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ce:	461a      	mov	r2, r3
 80043d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80043d4:	6013      	str	r3, [r2, #0]
 80043d6:	e013      	b.n	8004400 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	015a      	lsls	r2, r3, #5
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	4413      	add	r3, r2
 80043e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043e4:	461a      	mov	r2, r3
 80043e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80043ea:	6013      	str	r3, [r2, #0]
 80043ec:	e008      	b.n	8004400 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	015a      	lsls	r2, r3, #5
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	4413      	add	r3, r2
 80043f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043fa:	461a      	mov	r2, r3
 80043fc:	2300      	movs	r3, #0
 80043fe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	015a      	lsls	r2, r3, #5
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	4413      	add	r3, r2
 8004408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800440c:	461a      	mov	r2, r3
 800440e:	2300      	movs	r3, #0
 8004410:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	015a      	lsls	r2, r3, #5
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	4413      	add	r3, r2
 800441a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800441e:	461a      	mov	r2, r3
 8004420:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004424:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	3301      	adds	r3, #1
 800442a:	613b      	str	r3, [r7, #16]
 800442c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	429a      	cmp	r2, r3
 8004432:	d3b7      	bcc.n	80043a4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004442:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004446:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004454:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004458:	2b00      	cmp	r3, #0
 800445a:	d105      	bne.n	8004468 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	f043 0210 	orr.w	r2, r3, #16
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	699a      	ldr	r2, [r3, #24]
 800446c:	4b0f      	ldr	r3, [pc, #60]	; (80044ac <USB_DevInit+0x2c4>)
 800446e:	4313      	orrs	r3, r2
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004476:	2b00      	cmp	r3, #0
 8004478:	d005      	beq.n	8004486 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	f043 0208 	orr.w	r2, r3, #8
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004488:	2b01      	cmp	r3, #1
 800448a:	d107      	bne.n	800449c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004494:	f043 0304 	orr.w	r3, r3, #4
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800449c:	7dfb      	ldrb	r3, [r7, #23]
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3718      	adds	r7, #24
 80044a2:	46bd      	mov	sp, r7
 80044a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044a8:	b004      	add	sp, #16
 80044aa:	4770      	bx	lr
 80044ac:	803c3800 	.word	0x803c3800

080044b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80044ba:	2300      	movs	r3, #0
 80044bc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	3301      	adds	r3, #1
 80044c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	4a13      	ldr	r2, [pc, #76]	; (8004514 <USB_FlushTxFifo+0x64>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d901      	bls.n	80044d0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e01b      	b.n	8004508 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	daf2      	bge.n	80044be <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80044d8:	2300      	movs	r3, #0
 80044da:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	019b      	lsls	r3, r3, #6
 80044e0:	f043 0220 	orr.w	r2, r3, #32
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	3301      	adds	r3, #1
 80044ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	4a08      	ldr	r2, [pc, #32]	; (8004514 <USB_FlushTxFifo+0x64>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d901      	bls.n	80044fa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e006      	b.n	8004508 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	f003 0320 	and.w	r3, r3, #32
 8004502:	2b20      	cmp	r3, #32
 8004504:	d0f0      	beq.n	80044e8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	3714      	adds	r7, #20
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr
 8004514:	00030d40 	.word	0x00030d40

08004518 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004520:	2300      	movs	r3, #0
 8004522:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	3301      	adds	r3, #1
 8004528:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	4a11      	ldr	r2, [pc, #68]	; (8004574 <USB_FlushRxFifo+0x5c>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d901      	bls.n	8004536 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e018      	b.n	8004568 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	2b00      	cmp	r3, #0
 800453c:	daf2      	bge.n	8004524 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800453e:	2300      	movs	r3, #0
 8004540:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2210      	movs	r2, #16
 8004546:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	3301      	adds	r3, #1
 800454c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	4a08      	ldr	r2, [pc, #32]	; (8004574 <USB_FlushRxFifo+0x5c>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d901      	bls.n	800455a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e006      	b.n	8004568 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	f003 0310 	and.w	r3, r3, #16
 8004562:	2b10      	cmp	r3, #16
 8004564:	d0f0      	beq.n	8004548 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	3714      	adds	r7, #20
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr
 8004574:	00030d40 	.word	0x00030d40

08004578 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	460b      	mov	r3, r1
 8004582:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	78fb      	ldrb	r3, [r7, #3]
 8004592:	68f9      	ldr	r1, [r7, #12]
 8004594:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004598:	4313      	orrs	r3, r2
 800459a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3714      	adds	r7, #20
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr

080045aa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80045aa:	b480      	push	{r7}
 80045ac:	b087      	sub	sp, #28
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f003 0306 	and.w	r3, r3, #6
 80045c2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d102      	bne.n	80045d0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80045ca:	2300      	movs	r3, #0
 80045cc:	75fb      	strb	r3, [r7, #23]
 80045ce:	e00a      	b.n	80045e6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d002      	beq.n	80045dc <USB_GetDevSpeed+0x32>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2b06      	cmp	r3, #6
 80045da:	d102      	bne.n	80045e2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80045dc:	2302      	movs	r3, #2
 80045de:	75fb      	strb	r3, [r7, #23]
 80045e0:	e001      	b.n	80045e6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80045e2:	230f      	movs	r3, #15
 80045e4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80045e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	371c      	adds	r7, #28
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	785b      	ldrb	r3, [r3, #1]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d13a      	bne.n	8004686 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004616:	69da      	ldr	r2, [r3, #28]
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	f003 030f 	and.w	r3, r3, #15
 8004620:	2101      	movs	r1, #1
 8004622:	fa01 f303 	lsl.w	r3, r1, r3
 8004626:	b29b      	uxth	r3, r3
 8004628:	68f9      	ldr	r1, [r7, #12]
 800462a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800462e:	4313      	orrs	r3, r2
 8004630:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	015a      	lsls	r2, r3, #5
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	4413      	add	r3, r2
 800463a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d155      	bne.n	80046f4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	015a      	lsls	r2, r3, #5
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	4413      	add	r3, r2
 8004650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	791b      	ldrb	r3, [r3, #4]
 8004662:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004664:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	059b      	lsls	r3, r3, #22
 800466a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800466c:	4313      	orrs	r3, r2
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	0151      	lsls	r1, r2, #5
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	440a      	add	r2, r1
 8004676:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800467a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800467e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004682:	6013      	str	r3, [r2, #0]
 8004684:	e036      	b.n	80046f4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800468c:	69da      	ldr	r2, [r3, #28]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	f003 030f 	and.w	r3, r3, #15
 8004696:	2101      	movs	r1, #1
 8004698:	fa01 f303 	lsl.w	r3, r1, r3
 800469c:	041b      	lsls	r3, r3, #16
 800469e:	68f9      	ldr	r1, [r7, #12]
 80046a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046a4:	4313      	orrs	r3, r2
 80046a6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	015a      	lsls	r2, r3, #5
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	4413      	add	r3, r2
 80046b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d11a      	bne.n	80046f4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	015a      	lsls	r2, r3, #5
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	4413      	add	r3, r2
 80046c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	791b      	ldrb	r3, [r3, #4]
 80046d8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80046da:	430b      	orrs	r3, r1
 80046dc:	4313      	orrs	r3, r2
 80046de:	68ba      	ldr	r2, [r7, #8]
 80046e0:	0151      	lsls	r1, r2, #5
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	440a      	add	r2, r1
 80046e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046f2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3714      	adds	r7, #20
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
	...

08004704 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004704:	b480      	push	{r7}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	785b      	ldrb	r3, [r3, #1]
 800471c:	2b01      	cmp	r3, #1
 800471e:	d161      	bne.n	80047e4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	015a      	lsls	r2, r3, #5
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	4413      	add	r3, r2
 8004728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004732:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004736:	d11f      	bne.n	8004778 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	015a      	lsls	r2, r3, #5
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	4413      	add	r3, r2
 8004740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	0151      	lsls	r1, r2, #5
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	440a      	add	r2, r1
 800474e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004752:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004756:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	015a      	lsls	r2, r3, #5
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	4413      	add	r3, r2
 8004760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68ba      	ldr	r2, [r7, #8]
 8004768:	0151      	lsls	r1, r2, #5
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	440a      	add	r2, r1
 800476e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004772:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004776:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800477e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	f003 030f 	and.w	r3, r3, #15
 8004788:	2101      	movs	r1, #1
 800478a:	fa01 f303 	lsl.w	r3, r1, r3
 800478e:	b29b      	uxth	r3, r3
 8004790:	43db      	mvns	r3, r3
 8004792:	68f9      	ldr	r1, [r7, #12]
 8004794:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004798:	4013      	ands	r3, r2
 800479a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047a2:	69da      	ldr	r2, [r3, #28]
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	f003 030f 	and.w	r3, r3, #15
 80047ac:	2101      	movs	r1, #1
 80047ae:	fa01 f303 	lsl.w	r3, r1, r3
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	43db      	mvns	r3, r3
 80047b6:	68f9      	ldr	r1, [r7, #12]
 80047b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047bc:	4013      	ands	r3, r2
 80047be:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	015a      	lsls	r2, r3, #5
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	4413      	add	r3, r2
 80047c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	0159      	lsls	r1, r3, #5
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	440b      	add	r3, r1
 80047d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047da:	4619      	mov	r1, r3
 80047dc:	4b35      	ldr	r3, [pc, #212]	; (80048b4 <USB_DeactivateEndpoint+0x1b0>)
 80047de:	4013      	ands	r3, r2
 80047e0:	600b      	str	r3, [r1, #0]
 80047e2:	e060      	b.n	80048a6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	015a      	lsls	r2, r3, #5
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	4413      	add	r3, r2
 80047ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047fa:	d11f      	bne.n	800483c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	015a      	lsls	r2, r3, #5
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	4413      	add	r3, r2
 8004804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68ba      	ldr	r2, [r7, #8]
 800480c:	0151      	lsls	r1, r2, #5
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	440a      	add	r2, r1
 8004812:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004816:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800481a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	015a      	lsls	r2, r3, #5
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	4413      	add	r3, r2
 8004824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	0151      	lsls	r1, r2, #5
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	440a      	add	r2, r1
 8004832:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004836:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800483a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004842:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	f003 030f 	and.w	r3, r3, #15
 800484c:	2101      	movs	r1, #1
 800484e:	fa01 f303 	lsl.w	r3, r1, r3
 8004852:	041b      	lsls	r3, r3, #16
 8004854:	43db      	mvns	r3, r3
 8004856:	68f9      	ldr	r1, [r7, #12]
 8004858:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800485c:	4013      	ands	r3, r2
 800485e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004866:	69da      	ldr	r2, [r3, #28]
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	f003 030f 	and.w	r3, r3, #15
 8004870:	2101      	movs	r1, #1
 8004872:	fa01 f303 	lsl.w	r3, r1, r3
 8004876:	041b      	lsls	r3, r3, #16
 8004878:	43db      	mvns	r3, r3
 800487a:	68f9      	ldr	r1, [r7, #12]
 800487c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004880:	4013      	ands	r3, r2
 8004882:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	015a      	lsls	r2, r3, #5
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	4413      	add	r3, r2
 800488c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	0159      	lsls	r1, r3, #5
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	440b      	add	r3, r1
 800489a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800489e:	4619      	mov	r1, r3
 80048a0:	4b05      	ldr	r3, [pc, #20]	; (80048b8 <USB_DeactivateEndpoint+0x1b4>)
 80048a2:	4013      	ands	r3, r2
 80048a4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3714      	adds	r7, #20
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr
 80048b4:	ec337800 	.word	0xec337800
 80048b8:	eff37800 	.word	0xeff37800

080048bc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b08a      	sub	sp, #40	; 0x28
 80048c0:	af02      	add	r7, sp, #8
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	4613      	mov	r3, r2
 80048c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	785b      	ldrb	r3, [r3, #1]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	f040 815c 	bne.w	8004b96 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d132      	bne.n	800494c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	015a      	lsls	r2, r3, #5
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	4413      	add	r3, r2
 80048ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	0151      	lsls	r1, r2, #5
 80048f8:	69fa      	ldr	r2, [r7, #28]
 80048fa:	440a      	add	r2, r1
 80048fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004900:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004904:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004908:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	015a      	lsls	r2, r3, #5
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	4413      	add	r3, r2
 8004912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	0151      	lsls	r1, r2, #5
 800491c:	69fa      	ldr	r2, [r7, #28]
 800491e:	440a      	add	r2, r1
 8004920:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004924:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004928:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	015a      	lsls	r2, r3, #5
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	4413      	add	r3, r2
 8004932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	0151      	lsls	r1, r2, #5
 800493c:	69fa      	ldr	r2, [r7, #28]
 800493e:	440a      	add	r2, r1
 8004940:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004944:	0cdb      	lsrs	r3, r3, #19
 8004946:	04db      	lsls	r3, r3, #19
 8004948:	6113      	str	r3, [r2, #16]
 800494a:	e074      	b.n	8004a36 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	015a      	lsls	r2, r3, #5
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	4413      	add	r3, r2
 8004954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	0151      	lsls	r1, r2, #5
 800495e:	69fa      	ldr	r2, [r7, #28]
 8004960:	440a      	add	r2, r1
 8004962:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004966:	0cdb      	lsrs	r3, r3, #19
 8004968:	04db      	lsls	r3, r3, #19
 800496a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	015a      	lsls	r2, r3, #5
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	4413      	add	r3, r2
 8004974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	69ba      	ldr	r2, [r7, #24]
 800497c:	0151      	lsls	r1, r2, #5
 800497e:	69fa      	ldr	r2, [r7, #28]
 8004980:	440a      	add	r2, r1
 8004982:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004986:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800498a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800498e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	015a      	lsls	r2, r3, #5
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	4413      	add	r3, r2
 8004998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800499c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	6999      	ldr	r1, [r3, #24]
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	440b      	add	r3, r1
 80049a8:	1e59      	subs	r1, r3, #1
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80049b2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80049b4:	4b9d      	ldr	r3, [pc, #628]	; (8004c2c <USB_EPStartXfer+0x370>)
 80049b6:	400b      	ands	r3, r1
 80049b8:	69b9      	ldr	r1, [r7, #24]
 80049ba:	0148      	lsls	r0, r1, #5
 80049bc:	69f9      	ldr	r1, [r7, #28]
 80049be:	4401      	add	r1, r0
 80049c0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80049c4:	4313      	orrs	r3, r2
 80049c6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	015a      	lsls	r2, r3, #5
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	4413      	add	r3, r2
 80049d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049d4:	691a      	ldr	r2, [r3, #16]
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049de:	69b9      	ldr	r1, [r7, #24]
 80049e0:	0148      	lsls	r0, r1, #5
 80049e2:	69f9      	ldr	r1, [r7, #28]
 80049e4:	4401      	add	r1, r0
 80049e6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80049ea:	4313      	orrs	r3, r2
 80049ec:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	791b      	ldrb	r3, [r3, #4]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d11f      	bne.n	8004a36 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	015a      	lsls	r2, r3, #5
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	4413      	add	r3, r2
 80049fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	0151      	lsls	r1, r2, #5
 8004a08:	69fa      	ldr	r2, [r7, #28]
 8004a0a:	440a      	add	r2, r1
 8004a0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a10:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004a14:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	015a      	lsls	r2, r3, #5
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	0151      	lsls	r1, r2, #5
 8004a28:	69fa      	ldr	r2, [r7, #28]
 8004a2a:	440a      	add	r2, r1
 8004a2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a34:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004a36:	79fb      	ldrb	r3, [r7, #7]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d14b      	bne.n	8004ad4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	695b      	ldr	r3, [r3, #20]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d009      	beq.n	8004a58 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	015a      	lsls	r2, r3, #5
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a50:	461a      	mov	r2, r3
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	791b      	ldrb	r3, [r3, #4]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d128      	bne.n	8004ab2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d110      	bne.n	8004a92 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	015a      	lsls	r2, r3, #5
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	4413      	add	r3, r2
 8004a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	69ba      	ldr	r2, [r7, #24]
 8004a80:	0151      	lsls	r1, r2, #5
 8004a82:	69fa      	ldr	r2, [r7, #28]
 8004a84:	440a      	add	r2, r1
 8004a86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a8a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a8e:	6013      	str	r3, [r2, #0]
 8004a90:	e00f      	b.n	8004ab2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	015a      	lsls	r2, r3, #5
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	4413      	add	r3, r2
 8004a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	0151      	lsls	r1, r2, #5
 8004aa4:	69fa      	ldr	r2, [r7, #28]
 8004aa6:	440a      	add	r2, r1
 8004aa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ab0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	015a      	lsls	r2, r3, #5
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	4413      	add	r3, r2
 8004aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	69ba      	ldr	r2, [r7, #24]
 8004ac2:	0151      	lsls	r1, r2, #5
 8004ac4:	69fa      	ldr	r2, [r7, #28]
 8004ac6:	440a      	add	r2, r1
 8004ac8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004acc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ad0:	6013      	str	r3, [r2, #0]
 8004ad2:	e133      	b.n	8004d3c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	015a      	lsls	r2, r3, #5
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	4413      	add	r3, r2
 8004adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	69ba      	ldr	r2, [r7, #24]
 8004ae4:	0151      	lsls	r1, r2, #5
 8004ae6:	69fa      	ldr	r2, [r7, #28]
 8004ae8:	440a      	add	r2, r1
 8004aea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004af2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	791b      	ldrb	r3, [r3, #4]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d015      	beq.n	8004b28 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f000 811b 	beq.w	8004d3c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	f003 030f 	and.w	r3, r3, #15
 8004b16:	2101      	movs	r1, #1
 8004b18:	fa01 f303 	lsl.w	r3, r1, r3
 8004b1c:	69f9      	ldr	r1, [r7, #28]
 8004b1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b22:	4313      	orrs	r3, r2
 8004b24:	634b      	str	r3, [r1, #52]	; 0x34
 8004b26:	e109      	b.n	8004d3c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d110      	bne.n	8004b5a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	015a      	lsls	r2, r3, #5
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	4413      	add	r3, r2
 8004b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	69ba      	ldr	r2, [r7, #24]
 8004b48:	0151      	lsls	r1, r2, #5
 8004b4a:	69fa      	ldr	r2, [r7, #28]
 8004b4c:	440a      	add	r2, r1
 8004b4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b52:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b56:	6013      	str	r3, [r2, #0]
 8004b58:	e00f      	b.n	8004b7a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	015a      	lsls	r2, r3, #5
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	4413      	add	r3, r2
 8004b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	69ba      	ldr	r2, [r7, #24]
 8004b6a:	0151      	lsls	r1, r2, #5
 8004b6c:	69fa      	ldr	r2, [r7, #28]
 8004b6e:	440a      	add	r2, r1
 8004b70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b78:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	6919      	ldr	r1, [r3, #16]
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	781a      	ldrb	r2, [r3, #0]
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	b298      	uxth	r0, r3
 8004b88:	79fb      	ldrb	r3, [r7, #7]
 8004b8a:	9300      	str	r3, [sp, #0]
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f000 fade 	bl	8005150 <USB_WritePacket>
 8004b94:	e0d2      	b.n	8004d3c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	015a      	lsls	r2, r3, #5
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	0151      	lsls	r1, r2, #5
 8004ba8:	69fa      	ldr	r2, [r7, #28]
 8004baa:	440a      	add	r2, r1
 8004bac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bb0:	0cdb      	lsrs	r3, r3, #19
 8004bb2:	04db      	lsls	r3, r3, #19
 8004bb4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	015a      	lsls	r2, r3, #5
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	0151      	lsls	r1, r2, #5
 8004bc8:	69fa      	ldr	r2, [r7, #28]
 8004bca:	440a      	add	r2, r1
 8004bcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bd0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004bd4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004bd8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d126      	bne.n	8004c30 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	015a      	lsls	r2, r3, #5
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	4413      	add	r3, r2
 8004bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bee:	691a      	ldr	r2, [r3, #16]
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bf8:	69b9      	ldr	r1, [r7, #24]
 8004bfa:	0148      	lsls	r0, r1, #5
 8004bfc:	69f9      	ldr	r1, [r7, #28]
 8004bfe:	4401      	add	r1, r0
 8004c00:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c04:	4313      	orrs	r3, r2
 8004c06:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	015a      	lsls	r2, r3, #5
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	4413      	add	r3, r2
 8004c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	69ba      	ldr	r2, [r7, #24]
 8004c18:	0151      	lsls	r1, r2, #5
 8004c1a:	69fa      	ldr	r2, [r7, #28]
 8004c1c:	440a      	add	r2, r1
 8004c1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c26:	6113      	str	r3, [r2, #16]
 8004c28:	e03a      	b.n	8004ca0 <USB_EPStartXfer+0x3e4>
 8004c2a:	bf00      	nop
 8004c2c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	699a      	ldr	r2, [r3, #24]
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	4413      	add	r3, r2
 8004c3a:	1e5a      	subs	r2, r3, #1
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c44:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	8afa      	ldrh	r2, [r7, #22]
 8004c4c:	fb03 f202 	mul.w	r2, r3, r2
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	015a      	lsls	r2, r3, #5
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c60:	691a      	ldr	r2, [r3, #16]
 8004c62:	8afb      	ldrh	r3, [r7, #22]
 8004c64:	04d9      	lsls	r1, r3, #19
 8004c66:	4b38      	ldr	r3, [pc, #224]	; (8004d48 <USB_EPStartXfer+0x48c>)
 8004c68:	400b      	ands	r3, r1
 8004c6a:	69b9      	ldr	r1, [r7, #24]
 8004c6c:	0148      	lsls	r0, r1, #5
 8004c6e:	69f9      	ldr	r1, [r7, #28]
 8004c70:	4401      	add	r1, r0
 8004c72:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c76:	4313      	orrs	r3, r2
 8004c78:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	015a      	lsls	r2, r3, #5
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	4413      	add	r3, r2
 8004c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c86:	691a      	ldr	r2, [r3, #16]
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	69db      	ldr	r3, [r3, #28]
 8004c8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c90:	69b9      	ldr	r1, [r7, #24]
 8004c92:	0148      	lsls	r0, r1, #5
 8004c94:	69f9      	ldr	r1, [r7, #28]
 8004c96:	4401      	add	r1, r0
 8004c98:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004ca0:	79fb      	ldrb	r3, [r7, #7]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d10d      	bne.n	8004cc2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d009      	beq.n	8004cc2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	6919      	ldr	r1, [r3, #16]
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	015a      	lsls	r2, r3, #5
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	4413      	add	r3, r2
 8004cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cbe:	460a      	mov	r2, r1
 8004cc0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	791b      	ldrb	r3, [r3, #4]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d128      	bne.n	8004d1c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d110      	bne.n	8004cfc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	015a      	lsls	r2, r3, #5
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	69ba      	ldr	r2, [r7, #24]
 8004cea:	0151      	lsls	r1, r2, #5
 8004cec:	69fa      	ldr	r2, [r7, #28]
 8004cee:	440a      	add	r2, r1
 8004cf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cf4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004cf8:	6013      	str	r3, [r2, #0]
 8004cfa:	e00f      	b.n	8004d1c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	015a      	lsls	r2, r3, #5
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	4413      	add	r3, r2
 8004d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	69ba      	ldr	r2, [r7, #24]
 8004d0c:	0151      	lsls	r1, r2, #5
 8004d0e:	69fa      	ldr	r2, [r7, #28]
 8004d10:	440a      	add	r2, r1
 8004d12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d1a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	015a      	lsls	r2, r3, #5
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	4413      	add	r3, r2
 8004d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	69ba      	ldr	r2, [r7, #24]
 8004d2c:	0151      	lsls	r1, r2, #5
 8004d2e:	69fa      	ldr	r2, [r7, #28]
 8004d30:	440a      	add	r2, r1
 8004d32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3720      	adds	r7, #32
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	1ff80000 	.word	0x1ff80000

08004d4c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b087      	sub	sp, #28
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	4613      	mov	r3, r2
 8004d58:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	785b      	ldrb	r3, [r3, #1]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	f040 80ce 	bne.w	8004f0a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d132      	bne.n	8004ddc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	015a      	lsls	r2, r3, #5
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	0151      	lsls	r1, r2, #5
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	440a      	add	r2, r1
 8004d8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d90:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d94:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	015a      	lsls	r2, r3, #5
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	4413      	add	r3, r2
 8004da2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da6:	691b      	ldr	r3, [r3, #16]
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	0151      	lsls	r1, r2, #5
 8004dac:	697a      	ldr	r2, [r7, #20]
 8004dae:	440a      	add	r2, r1
 8004db0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004db4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004db8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	015a      	lsls	r2, r3, #5
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	0151      	lsls	r1, r2, #5
 8004dcc:	697a      	ldr	r2, [r7, #20]
 8004dce:	440a      	add	r2, r1
 8004dd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dd4:	0cdb      	lsrs	r3, r3, #19
 8004dd6:	04db      	lsls	r3, r3, #19
 8004dd8:	6113      	str	r3, [r2, #16]
 8004dda:	e04e      	b.n	8004e7a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	015a      	lsls	r2, r3, #5
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	4413      	add	r3, r2
 8004de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	0151      	lsls	r1, r2, #5
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	440a      	add	r2, r1
 8004df2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004df6:	0cdb      	lsrs	r3, r3, #19
 8004df8:	04db      	lsls	r3, r3, #19
 8004dfa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	015a      	lsls	r2, r3, #5
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	4413      	add	r3, r2
 8004e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	693a      	ldr	r2, [r7, #16]
 8004e0c:	0151      	lsls	r1, r2, #5
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	440a      	add	r2, r1
 8004e12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e16:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e1a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e1e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	699a      	ldr	r2, [r3, #24]
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d903      	bls.n	8004e34 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	68da      	ldr	r2, [r3, #12]
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	015a      	lsls	r2, r3, #5
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	0151      	lsls	r1, r2, #5
 8004e46:	697a      	ldr	r2, [r7, #20]
 8004e48:	440a      	add	r2, r1
 8004e4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	015a      	lsls	r2, r3, #5
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e60:	691a      	ldr	r2, [r3, #16]
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e6a:	6939      	ldr	r1, [r7, #16]
 8004e6c:	0148      	lsls	r0, r1, #5
 8004e6e:	6979      	ldr	r1, [r7, #20]
 8004e70:	4401      	add	r1, r0
 8004e72:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004e76:	4313      	orrs	r3, r2
 8004e78:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004e7a:	79fb      	ldrb	r3, [r7, #7]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d11e      	bne.n	8004ebe <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	695b      	ldr	r3, [r3, #20]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d009      	beq.n	8004e9c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	015a      	lsls	r2, r3, #5
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	4413      	add	r3, r2
 8004e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e94:	461a      	mov	r2, r3
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	015a      	lsls	r2, r3, #5
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	693a      	ldr	r2, [r7, #16]
 8004eac:	0151      	lsls	r1, r2, #5
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	440a      	add	r2, r1
 8004eb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eb6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004eba:	6013      	str	r3, [r2, #0]
 8004ebc:	e097      	b.n	8004fee <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	015a      	lsls	r2, r3, #5
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	0151      	lsls	r1, r2, #5
 8004ed0:	697a      	ldr	r2, [r7, #20]
 8004ed2:	440a      	add	r2, r1
 8004ed4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ed8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004edc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	f000 8083 	beq.w	8004fee <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	f003 030f 	and.w	r3, r3, #15
 8004ef8:	2101      	movs	r1, #1
 8004efa:	fa01 f303 	lsl.w	r3, r1, r3
 8004efe:	6979      	ldr	r1, [r7, #20]
 8004f00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f04:	4313      	orrs	r3, r2
 8004f06:	634b      	str	r3, [r1, #52]	; 0x34
 8004f08:	e071      	b.n	8004fee <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	015a      	lsls	r2, r3, #5
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	4413      	add	r3, r2
 8004f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	0151      	lsls	r1, r2, #5
 8004f1c:	697a      	ldr	r2, [r7, #20]
 8004f1e:	440a      	add	r2, r1
 8004f20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f24:	0cdb      	lsrs	r3, r3, #19
 8004f26:	04db      	lsls	r3, r3, #19
 8004f28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	015a      	lsls	r2, r3, #5
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	4413      	add	r3, r2
 8004f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	0151      	lsls	r1, r2, #5
 8004f3c:	697a      	ldr	r2, [r7, #20]
 8004f3e:	440a      	add	r2, r1
 8004f40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f44:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f48:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f4c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d003      	beq.n	8004f5e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	68da      	ldr	r2, [r3, #12]
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	68da      	ldr	r2, [r3, #12]
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	015a      	lsls	r2, r3, #5
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	0151      	lsls	r1, r2, #5
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	440a      	add	r2, r1
 8004f7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f84:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	015a      	lsls	r2, r3, #5
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f92:	691a      	ldr	r2, [r3, #16]
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	69db      	ldr	r3, [r3, #28]
 8004f98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f9c:	6939      	ldr	r1, [r7, #16]
 8004f9e:	0148      	lsls	r0, r1, #5
 8004fa0:	6979      	ldr	r1, [r7, #20]
 8004fa2:	4401      	add	r1, r0
 8004fa4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004fac:	79fb      	ldrb	r3, [r7, #7]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d10d      	bne.n	8004fce <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d009      	beq.n	8004fce <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	6919      	ldr	r1, [r3, #16]
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	015a      	lsls	r2, r3, #5
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fca:	460a      	mov	r2, r1
 8004fcc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	015a      	lsls	r2, r3, #5
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	4413      	add	r3, r2
 8004fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	0151      	lsls	r1, r2, #5
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	440a      	add	r2, r1
 8004fe4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fe8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	371c      	adds	r7, #28
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b087      	sub	sp, #28
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005006:	2300      	movs	r3, #0
 8005008:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800500a:	2300      	movs	r3, #0
 800500c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	785b      	ldrb	r3, [r3, #1]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d14a      	bne.n	80050b0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	015a      	lsls	r2, r3, #5
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	4413      	add	r3, r2
 8005024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800502e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005032:	f040 8086 	bne.w	8005142 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	015a      	lsls	r2, r3, #5
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	4413      	add	r3, r2
 8005040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	683a      	ldr	r2, [r7, #0]
 8005048:	7812      	ldrb	r2, [r2, #0]
 800504a:	0151      	lsls	r1, r2, #5
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	440a      	add	r2, r1
 8005050:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005054:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005058:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	015a      	lsls	r2, r3, #5
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	4413      	add	r3, r2
 8005064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	683a      	ldr	r2, [r7, #0]
 800506c:	7812      	ldrb	r2, [r2, #0]
 800506e:	0151      	lsls	r1, r2, #5
 8005070:	693a      	ldr	r2, [r7, #16]
 8005072:	440a      	add	r2, r1
 8005074:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005078:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800507c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	3301      	adds	r3, #1
 8005082:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f242 7210 	movw	r2, #10000	; 0x2710
 800508a:	4293      	cmp	r3, r2
 800508c:	d902      	bls.n	8005094 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	75fb      	strb	r3, [r7, #23]
          break;
 8005092:	e056      	b.n	8005142 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	015a      	lsls	r2, r3, #5
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	4413      	add	r3, r2
 800509e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050ac:	d0e7      	beq.n	800507e <USB_EPStopXfer+0x82>
 80050ae:	e048      	b.n	8005142 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	015a      	lsls	r2, r3, #5
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	4413      	add	r3, r2
 80050ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050c8:	d13b      	bne.n	8005142 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	015a      	lsls	r2, r3, #5
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	4413      	add	r3, r2
 80050d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	683a      	ldr	r2, [r7, #0]
 80050dc:	7812      	ldrb	r2, [r2, #0]
 80050de:	0151      	lsls	r1, r2, #5
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	440a      	add	r2, r1
 80050e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80050ec:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	015a      	lsls	r2, r3, #5
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	4413      	add	r3, r2
 80050f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	683a      	ldr	r2, [r7, #0]
 8005100:	7812      	ldrb	r2, [r2, #0]
 8005102:	0151      	lsls	r1, r2, #5
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	440a      	add	r2, r1
 8005108:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800510c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005110:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	3301      	adds	r3, #1
 8005116:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f242 7210 	movw	r2, #10000	; 0x2710
 800511e:	4293      	cmp	r3, r2
 8005120:	d902      	bls.n	8005128 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	75fb      	strb	r3, [r7, #23]
          break;
 8005126:	e00c      	b.n	8005142 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	015a      	lsls	r2, r3, #5
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	4413      	add	r3, r2
 8005132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800513c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005140:	d0e7      	beq.n	8005112 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005142:	7dfb      	ldrb	r3, [r7, #23]
}
 8005144:	4618      	mov	r0, r3
 8005146:	371c      	adds	r7, #28
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005150:	b480      	push	{r7}
 8005152:	b089      	sub	sp, #36	; 0x24
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	4611      	mov	r1, r2
 800515c:	461a      	mov	r2, r3
 800515e:	460b      	mov	r3, r1
 8005160:	71fb      	strb	r3, [r7, #7]
 8005162:	4613      	mov	r3, r2
 8005164:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800516e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005172:	2b00      	cmp	r3, #0
 8005174:	d123      	bne.n	80051be <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005176:	88bb      	ldrh	r3, [r7, #4]
 8005178:	3303      	adds	r3, #3
 800517a:	089b      	lsrs	r3, r3, #2
 800517c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800517e:	2300      	movs	r3, #0
 8005180:	61bb      	str	r3, [r7, #24]
 8005182:	e018      	b.n	80051b6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005184:	79fb      	ldrb	r3, [r7, #7]
 8005186:	031a      	lsls	r2, r3, #12
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	4413      	add	r3, r2
 800518c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005190:	461a      	mov	r2, r3
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	3301      	adds	r3, #1
 800519c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	3301      	adds	r3, #1
 80051a2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	3301      	adds	r3, #1
 80051a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	3301      	adds	r3, #1
 80051ae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	3301      	adds	r3, #1
 80051b4:	61bb      	str	r3, [r7, #24]
 80051b6:	69ba      	ldr	r2, [r7, #24]
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d3e2      	bcc.n	8005184 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3724      	adds	r7, #36	; 0x24
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b08b      	sub	sp, #44	; 0x2c
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	4613      	mov	r3, r2
 80051d8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80051e2:	88fb      	ldrh	r3, [r7, #6]
 80051e4:	089b      	lsrs	r3, r3, #2
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80051ea:	88fb      	ldrh	r3, [r7, #6]
 80051ec:	f003 0303 	and.w	r3, r3, #3
 80051f0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80051f2:	2300      	movs	r3, #0
 80051f4:	623b      	str	r3, [r7, #32]
 80051f6:	e014      	b.n	8005222 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005202:	601a      	str	r2, [r3, #0]
    pDest++;
 8005204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005206:	3301      	adds	r3, #1
 8005208:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800520a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520c:	3301      	adds	r3, #1
 800520e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	3301      	adds	r3, #1
 8005214:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005218:	3301      	adds	r3, #1
 800521a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800521c:	6a3b      	ldr	r3, [r7, #32]
 800521e:	3301      	adds	r3, #1
 8005220:	623b      	str	r3, [r7, #32]
 8005222:	6a3a      	ldr	r2, [r7, #32]
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	429a      	cmp	r2, r3
 8005228:	d3e6      	bcc.n	80051f8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800522a:	8bfb      	ldrh	r3, [r7, #30]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d01e      	beq.n	800526e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005230:	2300      	movs	r3, #0
 8005232:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800523a:	461a      	mov	r2, r3
 800523c:	f107 0310 	add.w	r3, r7, #16
 8005240:	6812      	ldr	r2, [r2, #0]
 8005242:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005244:	693a      	ldr	r2, [r7, #16]
 8005246:	6a3b      	ldr	r3, [r7, #32]
 8005248:	b2db      	uxtb	r3, r3
 800524a:	00db      	lsls	r3, r3, #3
 800524c:	fa22 f303 	lsr.w	r3, r2, r3
 8005250:	b2da      	uxtb	r2, r3
 8005252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005254:	701a      	strb	r2, [r3, #0]
      i++;
 8005256:	6a3b      	ldr	r3, [r7, #32]
 8005258:	3301      	adds	r3, #1
 800525a:	623b      	str	r3, [r7, #32]
      pDest++;
 800525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525e:	3301      	adds	r3, #1
 8005260:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005262:	8bfb      	ldrh	r3, [r7, #30]
 8005264:	3b01      	subs	r3, #1
 8005266:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005268:	8bfb      	ldrh	r3, [r7, #30]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1ea      	bne.n	8005244 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800526e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005270:	4618      	mov	r0, r3
 8005272:	372c      	adds	r7, #44	; 0x2c
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	785b      	ldrb	r3, [r3, #1]
 8005294:	2b01      	cmp	r3, #1
 8005296:	d12c      	bne.n	80052f2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	015a      	lsls	r2, r3, #5
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	4413      	add	r3, r2
 80052a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	db12      	blt.n	80052d0 <USB_EPSetStall+0x54>
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00f      	beq.n	80052d0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	015a      	lsls	r2, r3, #5
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	4413      	add	r3, r2
 80052b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68ba      	ldr	r2, [r7, #8]
 80052c0:	0151      	lsls	r1, r2, #5
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	440a      	add	r2, r1
 80052c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80052ce:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	015a      	lsls	r2, r3, #5
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	4413      	add	r3, r2
 80052d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68ba      	ldr	r2, [r7, #8]
 80052e0:	0151      	lsls	r1, r2, #5
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	440a      	add	r2, r1
 80052e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80052ee:	6013      	str	r3, [r2, #0]
 80052f0:	e02b      	b.n	800534a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	015a      	lsls	r2, r3, #5
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	4413      	add	r3, r2
 80052fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	db12      	blt.n	800532a <USB_EPSetStall+0xae>
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00f      	beq.n	800532a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	015a      	lsls	r2, r3, #5
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	4413      	add	r3, r2
 8005312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	68ba      	ldr	r2, [r7, #8]
 800531a:	0151      	lsls	r1, r2, #5
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	440a      	add	r2, r1
 8005320:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005324:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005328:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	015a      	lsls	r2, r3, #5
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	4413      	add	r3, r2
 8005332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	0151      	lsls	r1, r2, #5
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	440a      	add	r2, r1
 8005340:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005344:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005348:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3714      	adds	r7, #20
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	785b      	ldrb	r3, [r3, #1]
 8005370:	2b01      	cmp	r3, #1
 8005372:	d128      	bne.n	80053c6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	015a      	lsls	r2, r3, #5
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	4413      	add	r3, r2
 800537c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68ba      	ldr	r2, [r7, #8]
 8005384:	0151      	lsls	r1, r2, #5
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	440a      	add	r2, r1
 800538a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800538e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005392:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	791b      	ldrb	r3, [r3, #4]
 8005398:	2b03      	cmp	r3, #3
 800539a:	d003      	beq.n	80053a4 <USB_EPClearStall+0x4c>
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	791b      	ldrb	r3, [r3, #4]
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d138      	bne.n	8005416 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	015a      	lsls	r2, r3, #5
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	4413      	add	r3, r2
 80053ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68ba      	ldr	r2, [r7, #8]
 80053b4:	0151      	lsls	r1, r2, #5
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	440a      	add	r2, r1
 80053ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053c2:	6013      	str	r3, [r2, #0]
 80053c4:	e027      	b.n	8005416 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	015a      	lsls	r2, r3, #5
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	4413      	add	r3, r2
 80053ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68ba      	ldr	r2, [r7, #8]
 80053d6:	0151      	lsls	r1, r2, #5
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	440a      	add	r2, r1
 80053dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80053e4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	791b      	ldrb	r3, [r3, #4]
 80053ea:	2b03      	cmp	r3, #3
 80053ec:	d003      	beq.n	80053f6 <USB_EPClearStall+0x9e>
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	791b      	ldrb	r3, [r3, #4]
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d10f      	bne.n	8005416 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	015a      	lsls	r2, r3, #5
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	4413      	add	r3, r2
 80053fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68ba      	ldr	r2, [r7, #8]
 8005406:	0151      	lsls	r1, r2, #5
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	440a      	add	r2, r1
 800540c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005414:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3714      	adds	r7, #20
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	460b      	mov	r3, r1
 800542e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005442:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005446:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	78fb      	ldrb	r3, [r7, #3]
 8005452:	011b      	lsls	r3, r3, #4
 8005454:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005458:	68f9      	ldr	r1, [r7, #12]
 800545a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800545e:	4313      	orrs	r3, r2
 8005460:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3714      	adds	r7, #20
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800548a:	f023 0303 	bic.w	r3, r3, #3
 800548e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800549e:	f023 0302 	bic.w	r3, r3, #2
 80054a2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3714      	adds	r7, #20
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b085      	sub	sp, #20
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80054cc:	f023 0303 	bic.w	r3, r3, #3
 80054d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054e0:	f043 0302 	orr.w	r3, r3, #2
 80054e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3714      	adds	r7, #20
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	695b      	ldr	r3, [r3, #20]
 8005500:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	4013      	ands	r3, r2
 800550a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800550c:	68fb      	ldr	r3, [r7, #12]
}
 800550e:	4618      	mov	r0, r3
 8005510:	3714      	adds	r7, #20
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr

0800551a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800551a:	b480      	push	{r7}
 800551c:	b085      	sub	sp, #20
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005536:	69db      	ldr	r3, [r3, #28]
 8005538:	68ba      	ldr	r2, [r7, #8]
 800553a:	4013      	ands	r3, r2
 800553c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	0c1b      	lsrs	r3, r3, #16
}
 8005542:	4618      	mov	r0, r3
 8005544:	3714      	adds	r7, #20
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr

0800554e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800554e:	b480      	push	{r7}
 8005550:	b085      	sub	sp, #20
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800556a:	69db      	ldr	r3, [r3, #28]
 800556c:	68ba      	ldr	r2, [r7, #8]
 800556e:	4013      	ands	r3, r2
 8005570:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	b29b      	uxth	r3, r3
}
 8005576:	4618      	mov	r0, r3
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr

08005582 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005582:	b480      	push	{r7}
 8005584:	b085      	sub	sp, #20
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
 800558a:	460b      	mov	r3, r1
 800558c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005592:	78fb      	ldrb	r3, [r7, #3]
 8005594:	015a      	lsls	r2, r3, #5
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	4413      	add	r3, r2
 800559a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	4013      	ands	r3, r2
 80055ae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80055b0:	68bb      	ldr	r3, [r7, #8]
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3714      	adds	r7, #20
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr

080055be <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80055be:	b480      	push	{r7}
 80055c0:	b087      	sub	sp, #28
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
 80055c6:	460b      	mov	r3, r1
 80055c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055e0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80055e2:	78fb      	ldrb	r3, [r7, #3]
 80055e4:	f003 030f 	and.w	r3, r3, #15
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	fa22 f303 	lsr.w	r3, r2, r3
 80055ee:	01db      	lsls	r3, r3, #7
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	693a      	ldr	r2, [r7, #16]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80055f8:	78fb      	ldrb	r3, [r7, #3]
 80055fa:	015a      	lsls	r2, r3, #5
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	4413      	add	r3, r2
 8005600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	4013      	ands	r3, r2
 800560a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800560c:	68bb      	ldr	r3, [r7, #8]
}
 800560e:	4618      	mov	r0, r3
 8005610:	371c      	adds	r7, #28
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr

0800561a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800561a:	b480      	push	{r7}
 800561c:	b083      	sub	sp, #12
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	f003 0301 	and.w	r3, r3, #1
}
 800562a:	4618      	mov	r0, r3
 800562c:	370c      	adds	r7, #12
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr

08005636 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005636:	b480      	push	{r7}
 8005638:	b085      	sub	sp, #20
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005650:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005654:	f023 0307 	bic.w	r3, r3, #7
 8005658:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800566c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3714      	adds	r7, #20
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800567c:	b480      	push	{r7}
 800567e:	b087      	sub	sp, #28
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	460b      	mov	r3, r1
 8005686:	607a      	str	r2, [r7, #4]
 8005688:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	333c      	adds	r3, #60	; 0x3c
 8005692:	3304      	adds	r3, #4
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	4a26      	ldr	r2, [pc, #152]	; (8005734 <USB_EP0_OutStart+0xb8>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d90a      	bls.n	80056b6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056b0:	d101      	bne.n	80056b6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80056b2:	2300      	movs	r3, #0
 80056b4:	e037      	b.n	8005726 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056bc:	461a      	mov	r2, r3
 80056be:	2300      	movs	r3, #0
 80056c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056e4:	f043 0318 	orr.w	r3, r3, #24
 80056e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	697a      	ldr	r2, [r7, #20]
 80056f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056f8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80056fc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80056fe:	7afb      	ldrb	r3, [r7, #11]
 8005700:	2b01      	cmp	r3, #1
 8005702:	d10f      	bne.n	8005724 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800570a:	461a      	mov	r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	697a      	ldr	r2, [r7, #20]
 800571a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800571e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005722:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	371c      	adds	r7, #28
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop
 8005734:	4f54300a 	.word	0x4f54300a

08005738 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005738:	b480      	push	{r7}
 800573a:	b085      	sub	sp, #20
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005740:	2300      	movs	r3, #0
 8005742:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	3301      	adds	r3, #1
 8005748:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	4a13      	ldr	r2, [pc, #76]	; (800579c <USB_CoreReset+0x64>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d901      	bls.n	8005756 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e01b      	b.n	800578e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	2b00      	cmp	r3, #0
 800575c:	daf2      	bge.n	8005744 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800575e:	2300      	movs	r3, #0
 8005760:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	f043 0201 	orr.w	r2, r3, #1
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	3301      	adds	r3, #1
 8005772:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	4a09      	ldr	r2, [pc, #36]	; (800579c <USB_CoreReset+0x64>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d901      	bls.n	8005780 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e006      	b.n	800578e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	f003 0301 	and.w	r3, r3, #1
 8005788:	2b01      	cmp	r3, #1
 800578a:	d0f0      	beq.n	800576e <USB_CoreReset+0x36>

  return HAL_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3714      	adds	r7, #20
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	00030d40 	.word	0x00030d40

080057a0 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	460b      	mov	r3, r1
 80057aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80057ac:	2010      	movs	r0, #16
 80057ae:	f002 f93d 	bl	8007a2c <USBD_static_malloc>
 80057b2:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d109      	bne.n	80057ce <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	32b0      	adds	r2, #176	; 0xb0
 80057c4:	2100      	movs	r1, #0
 80057c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80057ca:	2302      	movs	r3, #2
 80057cc:	e048      	b.n	8005860 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	32b0      	adds	r2, #176	; 0xb0
 80057d8:	68f9      	ldr	r1, [r7, #12]
 80057da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	32b0      	adds	r2, #176	; 0xb0
 80057e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	7c1b      	ldrb	r3, [r3, #16]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d10d      	bne.n	8005816 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 80057fa:	4b1b      	ldr	r3, [pc, #108]	; (8005868 <USBD_HID_Init+0xc8>)
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	f003 020f 	and.w	r2, r3, #15
 8005802:	6879      	ldr	r1, [r7, #4]
 8005804:	4613      	mov	r3, r2
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	4413      	add	r3, r2
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	440b      	add	r3, r1
 800580e:	3326      	adds	r3, #38	; 0x26
 8005810:	2207      	movs	r2, #7
 8005812:	801a      	strh	r2, [r3, #0]
 8005814:	e00c      	b.n	8005830 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8005816:	4b14      	ldr	r3, [pc, #80]	; (8005868 <USBD_HID_Init+0xc8>)
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	f003 020f 	and.w	r2, r3, #15
 800581e:	6879      	ldr	r1, [r7, #4]
 8005820:	4613      	mov	r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	4413      	add	r3, r2
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	440b      	add	r3, r1
 800582a:	3326      	adds	r3, #38	; 0x26
 800582c:	220a      	movs	r2, #10
 800582e:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005830:	4b0d      	ldr	r3, [pc, #52]	; (8005868 <USBD_HID_Init+0xc8>)
 8005832:	7819      	ldrb	r1, [r3, #0]
 8005834:	2304      	movs	r3, #4
 8005836:	2203      	movs	r2, #3
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f001 ffe6 	bl	800780a <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 800583e:	4b0a      	ldr	r3, [pc, #40]	; (8005868 <USBD_HID_Init+0xc8>)
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	f003 020f 	and.w	r2, r3, #15
 8005846:	6879      	ldr	r1, [r7, #4]
 8005848:	4613      	mov	r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	4413      	add	r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	440b      	add	r3, r1
 8005852:	3324      	adds	r3, #36	; 0x24
 8005854:	2201      	movs	r2, #1
 8005856:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3710      	adds	r7, #16
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	200000ca 	.word	0x200000ca

0800586c <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	460b      	mov	r3, r1
 8005876:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8005878:	4b1f      	ldr	r3, [pc, #124]	; (80058f8 <USBD_HID_DeInit+0x8c>)
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	4619      	mov	r1, r3
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f001 ffe9 	bl	8007856 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8005884:	4b1c      	ldr	r3, [pc, #112]	; (80058f8 <USBD_HID_DeInit+0x8c>)
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	f003 020f 	and.w	r2, r3, #15
 800588c:	6879      	ldr	r1, [r7, #4]
 800588e:	4613      	mov	r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	4413      	add	r3, r2
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	440b      	add	r3, r1
 8005898:	3324      	adds	r3, #36	; 0x24
 800589a:	2200      	movs	r2, #0
 800589c:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 800589e:	4b16      	ldr	r3, [pc, #88]	; (80058f8 <USBD_HID_DeInit+0x8c>)
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	f003 020f 	and.w	r2, r3, #15
 80058a6:	6879      	ldr	r1, [r7, #4]
 80058a8:	4613      	mov	r3, r2
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	4413      	add	r3, r2
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	440b      	add	r3, r1
 80058b2:	3326      	adds	r3, #38	; 0x26
 80058b4:	2200      	movs	r2, #0
 80058b6:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	32b0      	adds	r2, #176	; 0xb0
 80058c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d011      	beq.n	80058ee <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	32b0      	adds	r2, #176	; 0xb0
 80058d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058d8:	4618      	mov	r0, r3
 80058da:	f002 f8b5 	bl	8007a48 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	32b0      	adds	r2, #176	; 0xb0
 80058e8:	2100      	movs	r1, #0
 80058ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3708      	adds	r7, #8
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	200000ca 	.word	0x200000ca

080058fc <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b086      	sub	sp, #24
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	32b0      	adds	r2, #176	; 0xb0
 8005910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005914:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005916:	2300      	movs	r3, #0
 8005918:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800591a:	2300      	movs	r3, #0
 800591c:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d101      	bne.n	8005928 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8005924:	2303      	movs	r3, #3
 8005926:	e0e8      	b.n	8005afa <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005930:	2b00      	cmp	r3, #0
 8005932:	d046      	beq.n	80059c2 <USBD_HID_Setup+0xc6>
 8005934:	2b20      	cmp	r3, #32
 8005936:	f040 80d8 	bne.w	8005aea <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	785b      	ldrb	r3, [r3, #1]
 800593e:	3b02      	subs	r3, #2
 8005940:	2b09      	cmp	r3, #9
 8005942:	d836      	bhi.n	80059b2 <USBD_HID_Setup+0xb6>
 8005944:	a201      	add	r2, pc, #4	; (adr r2, 800594c <USBD_HID_Setup+0x50>)
 8005946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800594a:	bf00      	nop
 800594c:	080059a3 	.word	0x080059a3
 8005950:	08005983 	.word	0x08005983
 8005954:	080059b3 	.word	0x080059b3
 8005958:	080059b3 	.word	0x080059b3
 800595c:	080059b3 	.word	0x080059b3
 8005960:	080059b3 	.word	0x080059b3
 8005964:	080059b3 	.word	0x080059b3
 8005968:	080059b3 	.word	0x080059b3
 800596c:	08005991 	.word	0x08005991
 8005970:	08005975 	.word	0x08005975
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	885b      	ldrh	r3, [r3, #2]
 8005978:	b2db      	uxtb	r3, r3
 800597a:	461a      	mov	r2, r3
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	601a      	str	r2, [r3, #0]
          break;
 8005980:	e01e      	b.n	80059c0 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2201      	movs	r2, #1
 8005986:	4619      	mov	r1, r3
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f001 fbe9 	bl	8007160 <USBD_CtlSendData>
          break;
 800598e:	e017      	b.n	80059c0 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	885b      	ldrh	r3, [r3, #2]
 8005994:	0a1b      	lsrs	r3, r3, #8
 8005996:	b29b      	uxth	r3, r3
 8005998:	b2db      	uxtb	r3, r3
 800599a:	461a      	mov	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	605a      	str	r2, [r3, #4]
          break;
 80059a0:	e00e      	b.n	80059c0 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	3304      	adds	r3, #4
 80059a6:	2201      	movs	r2, #1
 80059a8:	4619      	mov	r1, r3
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f001 fbd8 	bl	8007160 <USBD_CtlSendData>
          break;
 80059b0:	e006      	b.n	80059c0 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80059b2:	6839      	ldr	r1, [r7, #0]
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f001 fb62 	bl	800707e <USBD_CtlError>
          ret = USBD_FAIL;
 80059ba:	2303      	movs	r3, #3
 80059bc:	75fb      	strb	r3, [r7, #23]
          break;
 80059be:	bf00      	nop
      }
      break;
 80059c0:	e09a      	b.n	8005af8 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	785b      	ldrb	r3, [r3, #1]
 80059c6:	2b0b      	cmp	r3, #11
 80059c8:	f200 8086 	bhi.w	8005ad8 <USBD_HID_Setup+0x1dc>
 80059cc:	a201      	add	r2, pc, #4	; (adr r2, 80059d4 <USBD_HID_Setup+0xd8>)
 80059ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d2:	bf00      	nop
 80059d4:	08005a05 	.word	0x08005a05
 80059d8:	08005ae7 	.word	0x08005ae7
 80059dc:	08005ad9 	.word	0x08005ad9
 80059e0:	08005ad9 	.word	0x08005ad9
 80059e4:	08005ad9 	.word	0x08005ad9
 80059e8:	08005ad9 	.word	0x08005ad9
 80059ec:	08005a2f 	.word	0x08005a2f
 80059f0:	08005ad9 	.word	0x08005ad9
 80059f4:	08005ad9 	.word	0x08005ad9
 80059f8:	08005ad9 	.word	0x08005ad9
 80059fc:	08005a87 	.word	0x08005a87
 8005a00:	08005ab1 	.word	0x08005ab1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	2b03      	cmp	r3, #3
 8005a0e:	d107      	bne.n	8005a20 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005a10:	f107 030a 	add.w	r3, r7, #10
 8005a14:	2202      	movs	r2, #2
 8005a16:	4619      	mov	r1, r3
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f001 fba1 	bl	8007160 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005a1e:	e063      	b.n	8005ae8 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005a20:	6839      	ldr	r1, [r7, #0]
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f001 fb2b 	bl	800707e <USBD_CtlError>
            ret = USBD_FAIL;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	75fb      	strb	r3, [r7, #23]
          break;
 8005a2c:	e05c      	b.n	8005ae8 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	885b      	ldrh	r3, [r3, #2]
 8005a32:	0a1b      	lsrs	r3, r3, #8
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	2b22      	cmp	r3, #34	; 0x22
 8005a38:	d108      	bne.n	8005a4c <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	88db      	ldrh	r3, [r3, #6]
 8005a3e:	2b4a      	cmp	r3, #74	; 0x4a
 8005a40:	bf28      	it	cs
 8005a42:	234a      	movcs	r3, #74	; 0x4a
 8005a44:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8005a46:	4b2f      	ldr	r3, [pc, #188]	; (8005b04 <USBD_HID_Setup+0x208>)
 8005a48:	613b      	str	r3, [r7, #16]
 8005a4a:	e015      	b.n	8005a78 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	885b      	ldrh	r3, [r3, #2]
 8005a50:	0a1b      	lsrs	r3, r3, #8
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	2b21      	cmp	r3, #33	; 0x21
 8005a56:	d108      	bne.n	8005a6a <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8005a58:	4b2b      	ldr	r3, [pc, #172]	; (8005b08 <USBD_HID_Setup+0x20c>)
 8005a5a:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	88db      	ldrh	r3, [r3, #6]
 8005a60:	2b09      	cmp	r3, #9
 8005a62:	bf28      	it	cs
 8005a64:	2309      	movcs	r3, #9
 8005a66:	82bb      	strh	r3, [r7, #20]
 8005a68:	e006      	b.n	8005a78 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005a6a:	6839      	ldr	r1, [r7, #0]
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f001 fb06 	bl	800707e <USBD_CtlError>
            ret = USBD_FAIL;
 8005a72:	2303      	movs	r3, #3
 8005a74:	75fb      	strb	r3, [r7, #23]
            break;
 8005a76:	e037      	b.n	8005ae8 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8005a78:	8abb      	ldrh	r3, [r7, #20]
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	6939      	ldr	r1, [r7, #16]
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f001 fb6e 	bl	8007160 <USBD_CtlSendData>
          break;
 8005a84:	e030      	b.n	8005ae8 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b03      	cmp	r3, #3
 8005a90:	d107      	bne.n	8005aa2 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	3308      	adds	r3, #8
 8005a96:	2201      	movs	r2, #1
 8005a98:	4619      	mov	r1, r3
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f001 fb60 	bl	8007160 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005aa0:	e022      	b.n	8005ae8 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005aa2:	6839      	ldr	r1, [r7, #0]
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f001 faea 	bl	800707e <USBD_CtlError>
            ret = USBD_FAIL;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	75fb      	strb	r3, [r7, #23]
          break;
 8005aae:	e01b      	b.n	8005ae8 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	2b03      	cmp	r3, #3
 8005aba:	d106      	bne.n	8005aca <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	885b      	ldrh	r3, [r3, #2]
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005ac8:	e00e      	b.n	8005ae8 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005aca:	6839      	ldr	r1, [r7, #0]
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f001 fad6 	bl	800707e <USBD_CtlError>
            ret = USBD_FAIL;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	75fb      	strb	r3, [r7, #23]
          break;
 8005ad6:	e007      	b.n	8005ae8 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005ad8:	6839      	ldr	r1, [r7, #0]
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f001 facf 	bl	800707e <USBD_CtlError>
          ret = USBD_FAIL;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	75fb      	strb	r3, [r7, #23]
          break;
 8005ae4:	e000      	b.n	8005ae8 <USBD_HID_Setup+0x1ec>
          break;
 8005ae6:	bf00      	nop
      }
      break;
 8005ae8:	e006      	b.n	8005af8 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8005aea:	6839      	ldr	r1, [r7, #0]
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f001 fac6 	bl	800707e <USBD_CtlError>
      ret = USBD_FAIL;
 8005af2:	2303      	movs	r3, #3
 8005af4:	75fb      	strb	r3, [r7, #23]
      break;
 8005af6:	bf00      	nop
  }

  return (uint8_t)ret;
 8005af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3718      	adds	r7, #24
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	20000080 	.word	0x20000080
 8005b08:	20000068 	.word	0x20000068

08005b0c <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b086      	sub	sp, #24
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	4613      	mov	r3, r2
 8005b18:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	32b0      	adds	r2, #176	; 0xb0
 8005b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b28:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d101      	bne.n	8005b34 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e014      	b.n	8005b5e <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	2b03      	cmp	r3, #3
 8005b3e:	d10d      	bne.n	8005b5c <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	7b1b      	ldrb	r3, [r3, #12]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d109      	bne.n	8005b5c <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8005b4e:	4b06      	ldr	r3, [pc, #24]	; (8005b68 <USBD_HID_SendReport+0x5c>)
 8005b50:	7819      	ldrb	r1, [r3, #0]
 8005b52:	88fb      	ldrh	r3, [r7, #6]
 8005b54:	68ba      	ldr	r2, [r7, #8]
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f001 ff25 	bl	80079a6 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3718      	adds	r7, #24
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	200000ca 	.word	0x200000ca

08005b6c <USBD_HID_GetPollingInterval>:
  *         return polling interval from endpoint descriptor
  * @param  pdev: device instance
  * @retval polling interval
  */
uint32_t USBD_HID_GetPollingInterval(USBD_HandleTypeDef *pdev)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  uint32_t polling_interval;

  /* HIGH-speed endpoints */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	7c1b      	ldrb	r3, [r3, #16]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d102      	bne.n	8005b82 <USBD_HID_GetPollingInterval+0x16>
  {
    /* Sets the data transfer polling interval for high speed transfers.
     Values between 1..16 are allowed. Values correspond to interval
     of 2 ^ (bInterval-1). This option (8 ms, corresponds to HID_HS_BINTERVAL */
    polling_interval = (((1U << (HID_HS_BINTERVAL - 1U))) / 8U);
 8005b7c:	2308      	movs	r3, #8
 8005b7e:	60fb      	str	r3, [r7, #12]
 8005b80:	e001      	b.n	8005b86 <USBD_HID_GetPollingInterval+0x1a>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    /* Sets the data transfer polling interval for low and full
    speed transfers */
    polling_interval =  HID_FS_BINTERVAL;
 8005b82:	230a      	movs	r3, #10
 8005b84:	60fb      	str	r3, [r7, #12]
  }

  return ((uint32_t)(polling_interval));
 8005b86:	68fb      	ldr	r3, [r7, #12]
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3714      	adds	r7, #20
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005b9c:	2181      	movs	r1, #129	; 0x81
 8005b9e:	4809      	ldr	r0, [pc, #36]	; (8005bc4 <USBD_HID_GetFSCfgDesc+0x30>)
 8005ba0:	f000 fc35 	bl	800640e <USBD_GetEpDesc>
 8005ba4:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d002      	beq.n	8005bb2 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	220a      	movs	r2, #10
 8005bb0:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2222      	movs	r2, #34	; 0x22
 8005bb6:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005bb8:	4b02      	ldr	r3, [pc, #8]	; (8005bc4 <USBD_HID_GetFSCfgDesc+0x30>)
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3710      	adds	r7, #16
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	20000044 	.word	0x20000044

08005bc8 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005bd0:	2181      	movs	r1, #129	; 0x81
 8005bd2:	4809      	ldr	r0, [pc, #36]	; (8005bf8 <USBD_HID_GetHSCfgDesc+0x30>)
 8005bd4:	f000 fc1b 	bl	800640e <USBD_GetEpDesc>
 8005bd8:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d002      	beq.n	8005be6 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2207      	movs	r2, #7
 8005be4:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2222      	movs	r2, #34	; 0x22
 8005bea:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005bec:	4b02      	ldr	r3, [pc, #8]	; (8005bf8 <USBD_HID_GetHSCfgDesc+0x30>)
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	20000044 	.word	0x20000044

08005bfc <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005c04:	2181      	movs	r1, #129	; 0x81
 8005c06:	4809      	ldr	r0, [pc, #36]	; (8005c2c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8005c08:	f000 fc01 	bl	800640e <USBD_GetEpDesc>
 8005c0c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d002      	beq.n	8005c1a <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	220a      	movs	r2, #10
 8005c18:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2222      	movs	r2, #34	; 0x22
 8005c1e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005c20:	4b02      	ldr	r3, [pc, #8]	; (8005c2c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3710      	adds	r7, #16
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	20000044 	.word	0x20000044

08005c30 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	460b      	mov	r3, r1
 8005c3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	32b0      	adds	r2, #176	; 0xb0
 8005c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	220a      	movs	r2, #10
 8005c68:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8005c6a:	4b03      	ldr	r3, [pc, #12]	; (8005c78 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr
 8005c78:	20000074 	.word	0x20000074

08005c7c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b086      	sub	sp, #24
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	4613      	mov	r3, r2
 8005c88:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d101      	bne.n	8005c94 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e01f      	b.n	8005cd4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d003      	beq.n	8005cba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	68ba      	ldr	r2, [r7, #8]
 8005cb6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	79fa      	ldrb	r2, [r7, #7]
 8005cc6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005cc8:	68f8      	ldr	r0, [r7, #12]
 8005cca:	f001 fd37 	bl	800773c <USBD_LL_Init>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005cd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3718      	adds	r7, #24
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d101      	bne.n	8005cf4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e025      	b.n	8005d40 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	683a      	ldr	r2, [r7, #0]
 8005cf8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	32ae      	adds	r2, #174	; 0xae
 8005d06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00f      	beq.n	8005d30 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	32ae      	adds	r2, #174	; 0xae
 8005d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d20:	f107 020e 	add.w	r2, r7, #14
 8005d24:	4610      	mov	r0, r2
 8005d26:	4798      	blx	r3
 8005d28:	4602      	mov	r2, r0
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005d36:	1c5a      	adds	r2, r3, #1
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f001 fd3f 	bl	80077d4 <USBD_LL_Start>
 8005d56:	4603      	mov	r3, r0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3708      	adds	r7, #8
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005d68:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	370c      	adds	r7, #12
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr

08005d76 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b084      	sub	sp, #16
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
 8005d7e:	460b      	mov	r3, r1
 8005d80:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d82:	2300      	movs	r3, #0
 8005d84:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d009      	beq.n	8005da4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	78fa      	ldrb	r2, [r7, #3]
 8005d9a:	4611      	mov	r1, r2
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	4798      	blx	r3
 8005da0:	4603      	mov	r3, r0
 8005da2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3710      	adds	r7, #16
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}

08005dae <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b084      	sub	sp, #16
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
 8005db6:	460b      	mov	r3, r1
 8005db8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	78fa      	ldrb	r2, [r7, #3]
 8005dc8:	4611      	mov	r1, r2
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	4798      	blx	r3
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d001      	beq.n	8005dd8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b084      	sub	sp, #16
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
 8005dea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005df2:	6839      	ldr	r1, [r7, #0]
 8005df4:	4618      	mov	r0, r3
 8005df6:	f001 f908 	bl	800700a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005e08:	461a      	mov	r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005e16:	f003 031f 	and.w	r3, r3, #31
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	d01a      	beq.n	8005e54 <USBD_LL_SetupStage+0x72>
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	d822      	bhi.n	8005e68 <USBD_LL_SetupStage+0x86>
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d002      	beq.n	8005e2c <USBD_LL_SetupStage+0x4a>
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d00a      	beq.n	8005e40 <USBD_LL_SetupStage+0x5e>
 8005e2a:	e01d      	b.n	8005e68 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e32:	4619      	mov	r1, r3
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 fb5f 	bl	80064f8 <USBD_StdDevReq>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	73fb      	strb	r3, [r7, #15]
      break;
 8005e3e:	e020      	b.n	8005e82 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e46:	4619      	mov	r1, r3
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f000 fbc7 	bl	80065dc <USBD_StdItfReq>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	73fb      	strb	r3, [r7, #15]
      break;
 8005e52:	e016      	b.n	8005e82 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 fc29 	bl	80066b4 <USBD_StdEPReq>
 8005e62:	4603      	mov	r3, r0
 8005e64:	73fb      	strb	r3, [r7, #15]
      break;
 8005e66:	e00c      	b.n	8005e82 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005e6e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	4619      	mov	r1, r3
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f001 fd0c 	bl	8007894 <USBD_LL_StallEP>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8005e80:	bf00      	nop
  }

  return ret;
 8005e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3710      	adds	r7, #16
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b086      	sub	sp, #24
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	460b      	mov	r3, r1
 8005e96:	607a      	str	r2, [r7, #4]
 8005e98:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005e9e:	7afb      	ldrb	r3, [r7, #11]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d16e      	bne.n	8005f82 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005eaa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005eb2:	2b03      	cmp	r3, #3
 8005eb4:	f040 8098 	bne.w	8005fe8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	689a      	ldr	r2, [r3, #8]
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d913      	bls.n	8005eec <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	689a      	ldr	r2, [r3, #8]
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	1ad2      	subs	r2, r2, r3
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	68da      	ldr	r2, [r3, #12]
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	4293      	cmp	r3, r2
 8005edc:	bf28      	it	cs
 8005ede:	4613      	movcs	r3, r2
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	6879      	ldr	r1, [r7, #4]
 8005ee4:	68f8      	ldr	r0, [r7, #12]
 8005ee6:	f001 f967 	bl	80071b8 <USBD_CtlContinueRx>
 8005eea:	e07d      	b.n	8005fe8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005ef2:	f003 031f 	and.w	r3, r3, #31
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d014      	beq.n	8005f24 <USBD_LL_DataOutStage+0x98>
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d81d      	bhi.n	8005f3a <USBD_LL_DataOutStage+0xae>
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d002      	beq.n	8005f08 <USBD_LL_DataOutStage+0x7c>
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d003      	beq.n	8005f0e <USBD_LL_DataOutStage+0x82>
 8005f06:	e018      	b.n	8005f3a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	75bb      	strb	r3, [r7, #22]
            break;
 8005f0c:	e018      	b.n	8005f40 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	4619      	mov	r1, r3
 8005f18:	68f8      	ldr	r0, [r7, #12]
 8005f1a:	f000 fa5e 	bl	80063da <USBD_CoreFindIF>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	75bb      	strb	r3, [r7, #22]
            break;
 8005f22:	e00d      	b.n	8005f40 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	68f8      	ldr	r0, [r7, #12]
 8005f30:	f000 fa60 	bl	80063f4 <USBD_CoreFindEP>
 8005f34:	4603      	mov	r3, r0
 8005f36:	75bb      	strb	r3, [r7, #22]
            break;
 8005f38:	e002      	b.n	8005f40 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	75bb      	strb	r3, [r7, #22]
            break;
 8005f3e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005f40:	7dbb      	ldrb	r3, [r7, #22]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d119      	bne.n	8005f7a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	2b03      	cmp	r3, #3
 8005f50:	d113      	bne.n	8005f7a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005f52:	7dba      	ldrb	r2, [r7, #22]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	32ae      	adds	r2, #174	; 0xae
 8005f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00b      	beq.n	8005f7a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005f62:	7dba      	ldrb	r2, [r7, #22]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005f6a:	7dba      	ldrb	r2, [r7, #22]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	32ae      	adds	r2, #174	; 0xae
 8005f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f001 f92d 	bl	80071da <USBD_CtlSendStatus>
 8005f80:	e032      	b.n	8005fe8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005f82:	7afb      	ldrb	r3, [r7, #11]
 8005f84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	f000 fa31 	bl	80063f4 <USBD_CoreFindEP>
 8005f92:	4603      	mov	r3, r0
 8005f94:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005f96:	7dbb      	ldrb	r3, [r7, #22]
 8005f98:	2bff      	cmp	r3, #255	; 0xff
 8005f9a:	d025      	beq.n	8005fe8 <USBD_LL_DataOutStage+0x15c>
 8005f9c:	7dbb      	ldrb	r3, [r7, #22]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d122      	bne.n	8005fe8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	2b03      	cmp	r3, #3
 8005fac:	d117      	bne.n	8005fde <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005fae:	7dba      	ldrb	r2, [r7, #22]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	32ae      	adds	r2, #174	; 0xae
 8005fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fb8:	699b      	ldr	r3, [r3, #24]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00f      	beq.n	8005fde <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005fbe:	7dba      	ldrb	r2, [r7, #22]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005fc6:	7dba      	ldrb	r2, [r7, #22]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	32ae      	adds	r2, #174	; 0xae
 8005fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	7afa      	ldrb	r2, [r7, #11]
 8005fd4:	4611      	mov	r1, r2
 8005fd6:	68f8      	ldr	r0, [r7, #12]
 8005fd8:	4798      	blx	r3
 8005fda:	4603      	mov	r3, r0
 8005fdc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005fde:	7dfb      	ldrb	r3, [r7, #23]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d001      	beq.n	8005fe8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005fe4:	7dfb      	ldrb	r3, [r7, #23]
 8005fe6:	e000      	b.n	8005fea <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3718      	adds	r7, #24
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}

08005ff2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005ff2:	b580      	push	{r7, lr}
 8005ff4:	b086      	sub	sp, #24
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	60f8      	str	r0, [r7, #12]
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	607a      	str	r2, [r7, #4]
 8005ffe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006000:	7afb      	ldrb	r3, [r7, #11]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d16f      	bne.n	80060e6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	3314      	adds	r3, #20
 800600a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006012:	2b02      	cmp	r3, #2
 8006014:	d15a      	bne.n	80060cc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	689a      	ldr	r2, [r3, #8]
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	429a      	cmp	r2, r3
 8006020:	d914      	bls.n	800604c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	689a      	ldr	r2, [r3, #8]
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	1ad2      	subs	r2, r2, r3
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	461a      	mov	r2, r3
 8006036:	6879      	ldr	r1, [r7, #4]
 8006038:	68f8      	ldr	r0, [r7, #12]
 800603a:	f001 f8ac 	bl	8007196 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800603e:	2300      	movs	r3, #0
 8006040:	2200      	movs	r2, #0
 8006042:	2100      	movs	r1, #0
 8006044:	68f8      	ldr	r0, [r7, #12]
 8006046:	f001 fccf 	bl	80079e8 <USBD_LL_PrepareReceive>
 800604a:	e03f      	b.n	80060cc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	68da      	ldr	r2, [r3, #12]
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	429a      	cmp	r2, r3
 8006056:	d11c      	bne.n	8006092 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	685a      	ldr	r2, [r3, #4]
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006060:	429a      	cmp	r2, r3
 8006062:	d316      	bcc.n	8006092 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	685a      	ldr	r2, [r3, #4]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800606e:	429a      	cmp	r2, r3
 8006070:	d20f      	bcs.n	8006092 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006072:	2200      	movs	r2, #0
 8006074:	2100      	movs	r1, #0
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	f001 f88d 	bl	8007196 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2200      	movs	r2, #0
 8006080:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006084:	2300      	movs	r3, #0
 8006086:	2200      	movs	r2, #0
 8006088:	2100      	movs	r1, #0
 800608a:	68f8      	ldr	r0, [r7, #12]
 800608c:	f001 fcac 	bl	80079e8 <USBD_LL_PrepareReceive>
 8006090:	e01c      	b.n	80060cc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006098:	b2db      	uxtb	r3, r3
 800609a:	2b03      	cmp	r3, #3
 800609c:	d10f      	bne.n	80060be <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d009      	beq.n	80060be <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	68f8      	ldr	r0, [r7, #12]
 80060bc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80060be:	2180      	movs	r1, #128	; 0x80
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f001 fbe7 	bl	8007894 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80060c6:	68f8      	ldr	r0, [r7, #12]
 80060c8:	f001 f89a 	bl	8007200 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d03a      	beq.n	800614c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80060d6:	68f8      	ldr	r0, [r7, #12]
 80060d8:	f7ff fe42 	bl	8005d60 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80060e4:	e032      	b.n	800614c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80060e6:	7afb      	ldrb	r3, [r7, #11]
 80060e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	4619      	mov	r1, r3
 80060f0:	68f8      	ldr	r0, [r7, #12]
 80060f2:	f000 f97f 	bl	80063f4 <USBD_CoreFindEP>
 80060f6:	4603      	mov	r3, r0
 80060f8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80060fa:	7dfb      	ldrb	r3, [r7, #23]
 80060fc:	2bff      	cmp	r3, #255	; 0xff
 80060fe:	d025      	beq.n	800614c <USBD_LL_DataInStage+0x15a>
 8006100:	7dfb      	ldrb	r3, [r7, #23]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d122      	bne.n	800614c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800610c:	b2db      	uxtb	r3, r3
 800610e:	2b03      	cmp	r3, #3
 8006110:	d11c      	bne.n	800614c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006112:	7dfa      	ldrb	r2, [r7, #23]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	32ae      	adds	r2, #174	; 0xae
 8006118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d014      	beq.n	800614c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006122:	7dfa      	ldrb	r2, [r7, #23]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800612a:	7dfa      	ldrb	r2, [r7, #23]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	32ae      	adds	r2, #174	; 0xae
 8006130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006134:	695b      	ldr	r3, [r3, #20]
 8006136:	7afa      	ldrb	r2, [r7, #11]
 8006138:	4611      	mov	r1, r2
 800613a:	68f8      	ldr	r0, [r7, #12]
 800613c:	4798      	blx	r3
 800613e:	4603      	mov	r3, r0
 8006140:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006142:	7dbb      	ldrb	r3, [r7, #22]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d001      	beq.n	800614c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006148:	7dbb      	ldrb	r3, [r7, #22]
 800614a:	e000      	b.n	800614e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3718      	adds	r7, #24
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}

08006156 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006156:	b580      	push	{r7, lr}
 8006158:	b084      	sub	sp, #16
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800615e:	2300      	movs	r3, #0
 8006160:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2201      	movs	r2, #1
 8006166:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800618e:	2b00      	cmp	r3, #0
 8006190:	d014      	beq.n	80061bc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00e      	beq.n	80061bc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	6852      	ldr	r2, [r2, #4]
 80061aa:	b2d2      	uxtb	r2, r2
 80061ac:	4611      	mov	r1, r2
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	4798      	blx	r3
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d001      	beq.n	80061bc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80061b8:	2303      	movs	r3, #3
 80061ba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80061bc:	2340      	movs	r3, #64	; 0x40
 80061be:	2200      	movs	r2, #0
 80061c0:	2100      	movs	r1, #0
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f001 fb21 	bl	800780a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2240      	movs	r2, #64	; 0x40
 80061d4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80061d8:	2340      	movs	r3, #64	; 0x40
 80061da:	2200      	movs	r2, #0
 80061dc:	2180      	movs	r1, #128	; 0x80
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f001 fb13 	bl	800780a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2240      	movs	r2, #64	; 0x40
 80061ee:	621a      	str	r2, [r3, #32]

  return ret;
 80061f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3710      	adds	r7, #16
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80061fa:	b480      	push	{r7}
 80061fc:	b083      	sub	sp, #12
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
 8006202:	460b      	mov	r3, r1
 8006204:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	78fa      	ldrb	r2, [r7, #3]
 800620a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	370c      	adds	r7, #12
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr

0800621a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800621a:	b480      	push	{r7}
 800621c:	b083      	sub	sp, #12
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006228:	b2da      	uxtb	r2, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2204      	movs	r2, #4
 8006234:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	370c      	adds	r7, #12
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006246:	b480      	push	{r7}
 8006248:	b083      	sub	sp, #12
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b04      	cmp	r3, #4
 8006258:	d106      	bne.n	8006268 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006260:	b2da      	uxtb	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006268:	2300      	movs	r3, #0
}
 800626a:	4618      	mov	r0, r3
 800626c:	370c      	adds	r7, #12
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr

08006276 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b082      	sub	sp, #8
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006284:	b2db      	uxtb	r3, r3
 8006286:	2b03      	cmp	r3, #3
 8006288:	d110      	bne.n	80062ac <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00b      	beq.n	80062ac <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800629a:	69db      	ldr	r3, [r3, #28]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d005      	beq.n	80062ac <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062a6:	69db      	ldr	r3, [r3, #28]
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3708      	adds	r7, #8
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}

080062b6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80062b6:	b580      	push	{r7, lr}
 80062b8:	b082      	sub	sp, #8
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
 80062be:	460b      	mov	r3, r1
 80062c0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	32ae      	adds	r2, #174	; 0xae
 80062cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d101      	bne.n	80062d8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e01c      	b.n	8006312 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	2b03      	cmp	r3, #3
 80062e2:	d115      	bne.n	8006310 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	32ae      	adds	r2, #174	; 0xae
 80062ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062f2:	6a1b      	ldr	r3, [r3, #32]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00b      	beq.n	8006310 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	32ae      	adds	r2, #174	; 0xae
 8006302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006306:	6a1b      	ldr	r3, [r3, #32]
 8006308:	78fa      	ldrb	r2, [r7, #3]
 800630a:	4611      	mov	r1, r2
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3708      	adds	r7, #8
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}

0800631a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800631a:	b580      	push	{r7, lr}
 800631c:	b082      	sub	sp, #8
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
 8006322:	460b      	mov	r3, r1
 8006324:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	32ae      	adds	r2, #174	; 0xae
 8006330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d101      	bne.n	800633c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006338:	2303      	movs	r3, #3
 800633a:	e01c      	b.n	8006376 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006342:	b2db      	uxtb	r3, r3
 8006344:	2b03      	cmp	r3, #3
 8006346:	d115      	bne.n	8006374 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	32ae      	adds	r2, #174	; 0xae
 8006352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00b      	beq.n	8006374 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	32ae      	adds	r2, #174	; 0xae
 8006366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800636a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636c:	78fa      	ldrb	r2, [r7, #3]
 800636e:	4611      	mov	r1, r2
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3708      	adds	r7, #8
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}

0800637e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800637e:	b480      	push	{r7}
 8006380:	b083      	sub	sp, #12
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	4618      	mov	r0, r3
 800638a:	370c      	adds	r7, #12
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800639c:	2300      	movs	r3, #0
 800639e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d00e      	beq.n	80063d0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	6852      	ldr	r2, [r2, #4]
 80063be:	b2d2      	uxtb	r2, r2
 80063c0:	4611      	mov	r1, r2
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	4798      	blx	r3
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d001      	beq.n	80063d0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80063cc:	2303      	movs	r3, #3
 80063ce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80063d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3710      	adds	r7, #16
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}

080063da <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80063da:	b480      	push	{r7}
 80063dc:	b083      	sub	sp, #12
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
 80063e2:	460b      	mov	r3, r1
 80063e4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80063e6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	460b      	mov	r3, r1
 80063fe:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006400:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006402:	4618      	mov	r0, r3
 8006404:	370c      	adds	r7, #12
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr

0800640e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800640e:	b580      	push	{r7, lr}
 8006410:	b086      	sub	sp, #24
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
 8006416:	460b      	mov	r3, r1
 8006418:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006422:	2300      	movs	r3, #0
 8006424:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	885b      	ldrh	r3, [r3, #2]
 800642a:	b29a      	uxth	r2, r3
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	b29b      	uxth	r3, r3
 8006432:	429a      	cmp	r2, r3
 8006434:	d920      	bls.n	8006478 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	b29b      	uxth	r3, r3
 800643c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800643e:	e013      	b.n	8006468 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006440:	f107 030a 	add.w	r3, r7, #10
 8006444:	4619      	mov	r1, r3
 8006446:	6978      	ldr	r0, [r7, #20]
 8006448:	f000 f81b 	bl	8006482 <USBD_GetNextDesc>
 800644c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	785b      	ldrb	r3, [r3, #1]
 8006452:	2b05      	cmp	r3, #5
 8006454:	d108      	bne.n	8006468 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	789b      	ldrb	r3, [r3, #2]
 800645e:	78fa      	ldrb	r2, [r7, #3]
 8006460:	429a      	cmp	r2, r3
 8006462:	d008      	beq.n	8006476 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006464:	2300      	movs	r3, #0
 8006466:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	885b      	ldrh	r3, [r3, #2]
 800646c:	b29a      	uxth	r2, r3
 800646e:	897b      	ldrh	r3, [r7, #10]
 8006470:	429a      	cmp	r2, r3
 8006472:	d8e5      	bhi.n	8006440 <USBD_GetEpDesc+0x32>
 8006474:	e000      	b.n	8006478 <USBD_GetEpDesc+0x6a>
          break;
 8006476:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006478:	693b      	ldr	r3, [r7, #16]
}
 800647a:	4618      	mov	r0, r3
 800647c:	3718      	adds	r7, #24
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}

08006482 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006482:	b480      	push	{r7}
 8006484:	b085      	sub	sp, #20
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
 800648a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	881a      	ldrh	r2, [r3, #0]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	b29b      	uxth	r3, r3
 800649a:	4413      	add	r3, r2
 800649c:	b29a      	uxth	r2, r3
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	461a      	mov	r2, r3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4413      	add	r3, r2
 80064ac:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80064ae:	68fb      	ldr	r3, [r7, #12]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3714      	adds	r7, #20
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80064bc:	b480      	push	{r7}
 80064be:	b087      	sub	sp, #28
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	3301      	adds	r3, #1
 80064d2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80064da:	8a3b      	ldrh	r3, [r7, #16]
 80064dc:	021b      	lsls	r3, r3, #8
 80064de:	b21a      	sxth	r2, r3
 80064e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	b21b      	sxth	r3, r3
 80064e8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80064ea:	89fb      	ldrh	r3, [r7, #14]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	371c      	adds	r7, #28
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006502:	2300      	movs	r3, #0
 8006504:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800650e:	2b40      	cmp	r3, #64	; 0x40
 8006510:	d005      	beq.n	800651e <USBD_StdDevReq+0x26>
 8006512:	2b40      	cmp	r3, #64	; 0x40
 8006514:	d857      	bhi.n	80065c6 <USBD_StdDevReq+0xce>
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00f      	beq.n	800653a <USBD_StdDevReq+0x42>
 800651a:	2b20      	cmp	r3, #32
 800651c:	d153      	bne.n	80065c6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	32ae      	adds	r2, #174	; 0xae
 8006528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	6839      	ldr	r1, [r7, #0]
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	4798      	blx	r3
 8006534:	4603      	mov	r3, r0
 8006536:	73fb      	strb	r3, [r7, #15]
      break;
 8006538:	e04a      	b.n	80065d0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	785b      	ldrb	r3, [r3, #1]
 800653e:	2b09      	cmp	r3, #9
 8006540:	d83b      	bhi.n	80065ba <USBD_StdDevReq+0xc2>
 8006542:	a201      	add	r2, pc, #4	; (adr r2, 8006548 <USBD_StdDevReq+0x50>)
 8006544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006548:	0800659d 	.word	0x0800659d
 800654c:	080065b1 	.word	0x080065b1
 8006550:	080065bb 	.word	0x080065bb
 8006554:	080065a7 	.word	0x080065a7
 8006558:	080065bb 	.word	0x080065bb
 800655c:	0800657b 	.word	0x0800657b
 8006560:	08006571 	.word	0x08006571
 8006564:	080065bb 	.word	0x080065bb
 8006568:	08006593 	.word	0x08006593
 800656c:	08006585 	.word	0x08006585
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006570:	6839      	ldr	r1, [r7, #0]
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 fa3c 	bl	80069f0 <USBD_GetDescriptor>
          break;
 8006578:	e024      	b.n	80065c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800657a:	6839      	ldr	r1, [r7, #0]
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 fba1 	bl	8006cc4 <USBD_SetAddress>
          break;
 8006582:	e01f      	b.n	80065c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006584:	6839      	ldr	r1, [r7, #0]
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 fbe0 	bl	8006d4c <USBD_SetConfig>
 800658c:	4603      	mov	r3, r0
 800658e:	73fb      	strb	r3, [r7, #15]
          break;
 8006590:	e018      	b.n	80065c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006592:	6839      	ldr	r1, [r7, #0]
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 fc83 	bl	8006ea0 <USBD_GetConfig>
          break;
 800659a:	e013      	b.n	80065c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800659c:	6839      	ldr	r1, [r7, #0]
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 fcb4 	bl	8006f0c <USBD_GetStatus>
          break;
 80065a4:	e00e      	b.n	80065c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80065a6:	6839      	ldr	r1, [r7, #0]
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 fce3 	bl	8006f74 <USBD_SetFeature>
          break;
 80065ae:	e009      	b.n	80065c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80065b0:	6839      	ldr	r1, [r7, #0]
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 fd07 	bl	8006fc6 <USBD_ClrFeature>
          break;
 80065b8:	e004      	b.n	80065c4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80065ba:	6839      	ldr	r1, [r7, #0]
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 fd5e 	bl	800707e <USBD_CtlError>
          break;
 80065c2:	bf00      	nop
      }
      break;
 80065c4:	e004      	b.n	80065d0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80065c6:	6839      	ldr	r1, [r7, #0]
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 fd58 	bl	800707e <USBD_CtlError>
      break;
 80065ce:	bf00      	nop
  }

  return ret;
 80065d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3710      	adds	r7, #16
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop

080065dc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80065e6:	2300      	movs	r3, #0
 80065e8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065f2:	2b40      	cmp	r3, #64	; 0x40
 80065f4:	d005      	beq.n	8006602 <USBD_StdItfReq+0x26>
 80065f6:	2b40      	cmp	r3, #64	; 0x40
 80065f8:	d852      	bhi.n	80066a0 <USBD_StdItfReq+0xc4>
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d001      	beq.n	8006602 <USBD_StdItfReq+0x26>
 80065fe:	2b20      	cmp	r3, #32
 8006600:	d14e      	bne.n	80066a0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006608:	b2db      	uxtb	r3, r3
 800660a:	3b01      	subs	r3, #1
 800660c:	2b02      	cmp	r3, #2
 800660e:	d840      	bhi.n	8006692 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	889b      	ldrh	r3, [r3, #4]
 8006614:	b2db      	uxtb	r3, r3
 8006616:	2b01      	cmp	r3, #1
 8006618:	d836      	bhi.n	8006688 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	889b      	ldrh	r3, [r3, #4]
 800661e:	b2db      	uxtb	r3, r3
 8006620:	4619      	mov	r1, r3
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f7ff fed9 	bl	80063da <USBD_CoreFindIF>
 8006628:	4603      	mov	r3, r0
 800662a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800662c:	7bbb      	ldrb	r3, [r7, #14]
 800662e:	2bff      	cmp	r3, #255	; 0xff
 8006630:	d01d      	beq.n	800666e <USBD_StdItfReq+0x92>
 8006632:	7bbb      	ldrb	r3, [r7, #14]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d11a      	bne.n	800666e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006638:	7bba      	ldrb	r2, [r7, #14]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	32ae      	adds	r2, #174	; 0xae
 800663e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00f      	beq.n	8006668 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006648:	7bba      	ldrb	r2, [r7, #14]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006650:	7bba      	ldrb	r2, [r7, #14]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	32ae      	adds	r2, #174	; 0xae
 8006656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	6839      	ldr	r1, [r7, #0]
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	4798      	blx	r3
 8006662:	4603      	mov	r3, r0
 8006664:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006666:	e004      	b.n	8006672 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006668:	2303      	movs	r3, #3
 800666a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800666c:	e001      	b.n	8006672 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800666e:	2303      	movs	r3, #3
 8006670:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	88db      	ldrh	r3, [r3, #6]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d110      	bne.n	800669c <USBD_StdItfReq+0xc0>
 800667a:	7bfb      	ldrb	r3, [r7, #15]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d10d      	bne.n	800669c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 fdaa 	bl	80071da <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006686:	e009      	b.n	800669c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006688:	6839      	ldr	r1, [r7, #0]
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 fcf7 	bl	800707e <USBD_CtlError>
          break;
 8006690:	e004      	b.n	800669c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006692:	6839      	ldr	r1, [r7, #0]
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 fcf2 	bl	800707e <USBD_CtlError>
          break;
 800669a:	e000      	b.n	800669e <USBD_StdItfReq+0xc2>
          break;
 800669c:	bf00      	nop
      }
      break;
 800669e:	e004      	b.n	80066aa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80066a0:	6839      	ldr	r1, [r7, #0]
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 fceb 	bl	800707e <USBD_CtlError>
      break;
 80066a8:	bf00      	nop
  }

  return ret;
 80066aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3710      	adds	r7, #16
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80066be:	2300      	movs	r3, #0
 80066c0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	889b      	ldrh	r3, [r3, #4]
 80066c6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066d0:	2b40      	cmp	r3, #64	; 0x40
 80066d2:	d007      	beq.n	80066e4 <USBD_StdEPReq+0x30>
 80066d4:	2b40      	cmp	r3, #64	; 0x40
 80066d6:	f200 817f 	bhi.w	80069d8 <USBD_StdEPReq+0x324>
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d02a      	beq.n	8006734 <USBD_StdEPReq+0x80>
 80066de:	2b20      	cmp	r3, #32
 80066e0:	f040 817a 	bne.w	80069d8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80066e4:	7bbb      	ldrb	r3, [r7, #14]
 80066e6:	4619      	mov	r1, r3
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f7ff fe83 	bl	80063f4 <USBD_CoreFindEP>
 80066ee:	4603      	mov	r3, r0
 80066f0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80066f2:	7b7b      	ldrb	r3, [r7, #13]
 80066f4:	2bff      	cmp	r3, #255	; 0xff
 80066f6:	f000 8174 	beq.w	80069e2 <USBD_StdEPReq+0x32e>
 80066fa:	7b7b      	ldrb	r3, [r7, #13]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f040 8170 	bne.w	80069e2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006702:	7b7a      	ldrb	r2, [r7, #13]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800670a:	7b7a      	ldrb	r2, [r7, #13]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	32ae      	adds	r2, #174	; 0xae
 8006710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	2b00      	cmp	r3, #0
 8006718:	f000 8163 	beq.w	80069e2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800671c:	7b7a      	ldrb	r2, [r7, #13]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	32ae      	adds	r2, #174	; 0xae
 8006722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	6839      	ldr	r1, [r7, #0]
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	4798      	blx	r3
 800672e:	4603      	mov	r3, r0
 8006730:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006732:	e156      	b.n	80069e2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	785b      	ldrb	r3, [r3, #1]
 8006738:	2b03      	cmp	r3, #3
 800673a:	d008      	beq.n	800674e <USBD_StdEPReq+0x9a>
 800673c:	2b03      	cmp	r3, #3
 800673e:	f300 8145 	bgt.w	80069cc <USBD_StdEPReq+0x318>
 8006742:	2b00      	cmp	r3, #0
 8006744:	f000 809b 	beq.w	800687e <USBD_StdEPReq+0x1ca>
 8006748:	2b01      	cmp	r3, #1
 800674a:	d03c      	beq.n	80067c6 <USBD_StdEPReq+0x112>
 800674c:	e13e      	b.n	80069cc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006754:	b2db      	uxtb	r3, r3
 8006756:	2b02      	cmp	r3, #2
 8006758:	d002      	beq.n	8006760 <USBD_StdEPReq+0xac>
 800675a:	2b03      	cmp	r3, #3
 800675c:	d016      	beq.n	800678c <USBD_StdEPReq+0xd8>
 800675e:	e02c      	b.n	80067ba <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006760:	7bbb      	ldrb	r3, [r7, #14]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00d      	beq.n	8006782 <USBD_StdEPReq+0xce>
 8006766:	7bbb      	ldrb	r3, [r7, #14]
 8006768:	2b80      	cmp	r3, #128	; 0x80
 800676a:	d00a      	beq.n	8006782 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800676c:	7bbb      	ldrb	r3, [r7, #14]
 800676e:	4619      	mov	r1, r3
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f001 f88f 	bl	8007894 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006776:	2180      	movs	r1, #128	; 0x80
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f001 f88b 	bl	8007894 <USBD_LL_StallEP>
 800677e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006780:	e020      	b.n	80067c4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006782:	6839      	ldr	r1, [r7, #0]
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 fc7a 	bl	800707e <USBD_CtlError>
              break;
 800678a:	e01b      	b.n	80067c4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	885b      	ldrh	r3, [r3, #2]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d10e      	bne.n	80067b2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006794:	7bbb      	ldrb	r3, [r7, #14]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00b      	beq.n	80067b2 <USBD_StdEPReq+0xfe>
 800679a:	7bbb      	ldrb	r3, [r7, #14]
 800679c:	2b80      	cmp	r3, #128	; 0x80
 800679e:	d008      	beq.n	80067b2 <USBD_StdEPReq+0xfe>
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	88db      	ldrh	r3, [r3, #6]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d104      	bne.n	80067b2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80067a8:	7bbb      	ldrb	r3, [r7, #14]
 80067aa:	4619      	mov	r1, r3
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f001 f871 	bl	8007894 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 fd11 	bl	80071da <USBD_CtlSendStatus>

              break;
 80067b8:	e004      	b.n	80067c4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80067ba:	6839      	ldr	r1, [r7, #0]
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 fc5e 	bl	800707e <USBD_CtlError>
              break;
 80067c2:	bf00      	nop
          }
          break;
 80067c4:	e107      	b.n	80069d6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	d002      	beq.n	80067d8 <USBD_StdEPReq+0x124>
 80067d2:	2b03      	cmp	r3, #3
 80067d4:	d016      	beq.n	8006804 <USBD_StdEPReq+0x150>
 80067d6:	e04b      	b.n	8006870 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80067d8:	7bbb      	ldrb	r3, [r7, #14]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00d      	beq.n	80067fa <USBD_StdEPReq+0x146>
 80067de:	7bbb      	ldrb	r3, [r7, #14]
 80067e0:	2b80      	cmp	r3, #128	; 0x80
 80067e2:	d00a      	beq.n	80067fa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80067e4:	7bbb      	ldrb	r3, [r7, #14]
 80067e6:	4619      	mov	r1, r3
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f001 f853 	bl	8007894 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80067ee:	2180      	movs	r1, #128	; 0x80
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f001 f84f 	bl	8007894 <USBD_LL_StallEP>
 80067f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80067f8:	e040      	b.n	800687c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80067fa:	6839      	ldr	r1, [r7, #0]
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 fc3e 	bl	800707e <USBD_CtlError>
              break;
 8006802:	e03b      	b.n	800687c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	885b      	ldrh	r3, [r3, #2]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d136      	bne.n	800687a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800680c:	7bbb      	ldrb	r3, [r7, #14]
 800680e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006812:	2b00      	cmp	r3, #0
 8006814:	d004      	beq.n	8006820 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006816:	7bbb      	ldrb	r3, [r7, #14]
 8006818:	4619      	mov	r1, r3
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f001 f859 	bl	80078d2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 fcda 	bl	80071da <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006826:	7bbb      	ldrb	r3, [r7, #14]
 8006828:	4619      	mov	r1, r3
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f7ff fde2 	bl	80063f4 <USBD_CoreFindEP>
 8006830:	4603      	mov	r3, r0
 8006832:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006834:	7b7b      	ldrb	r3, [r7, #13]
 8006836:	2bff      	cmp	r3, #255	; 0xff
 8006838:	d01f      	beq.n	800687a <USBD_StdEPReq+0x1c6>
 800683a:	7b7b      	ldrb	r3, [r7, #13]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d11c      	bne.n	800687a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006840:	7b7a      	ldrb	r2, [r7, #13]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006848:	7b7a      	ldrb	r2, [r7, #13]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	32ae      	adds	r2, #174	; 0xae
 800684e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d010      	beq.n	800687a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006858:	7b7a      	ldrb	r2, [r7, #13]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	32ae      	adds	r2, #174	; 0xae
 800685e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	6839      	ldr	r1, [r7, #0]
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	4798      	blx	r3
 800686a:	4603      	mov	r3, r0
 800686c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800686e:	e004      	b.n	800687a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006870:	6839      	ldr	r1, [r7, #0]
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 fc03 	bl	800707e <USBD_CtlError>
              break;
 8006878:	e000      	b.n	800687c <USBD_StdEPReq+0x1c8>
              break;
 800687a:	bf00      	nop
          }
          break;
 800687c:	e0ab      	b.n	80069d6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006884:	b2db      	uxtb	r3, r3
 8006886:	2b02      	cmp	r3, #2
 8006888:	d002      	beq.n	8006890 <USBD_StdEPReq+0x1dc>
 800688a:	2b03      	cmp	r3, #3
 800688c:	d032      	beq.n	80068f4 <USBD_StdEPReq+0x240>
 800688e:	e097      	b.n	80069c0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006890:	7bbb      	ldrb	r3, [r7, #14]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d007      	beq.n	80068a6 <USBD_StdEPReq+0x1f2>
 8006896:	7bbb      	ldrb	r3, [r7, #14]
 8006898:	2b80      	cmp	r3, #128	; 0x80
 800689a:	d004      	beq.n	80068a6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800689c:	6839      	ldr	r1, [r7, #0]
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 fbed 	bl	800707e <USBD_CtlError>
                break;
 80068a4:	e091      	b.n	80069ca <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	da0b      	bge.n	80068c6 <USBD_StdEPReq+0x212>
 80068ae:	7bbb      	ldrb	r3, [r7, #14]
 80068b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80068b4:	4613      	mov	r3, r2
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	4413      	add	r3, r2
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	3310      	adds	r3, #16
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	4413      	add	r3, r2
 80068c2:	3304      	adds	r3, #4
 80068c4:	e00b      	b.n	80068de <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80068c6:	7bbb      	ldrb	r3, [r7, #14]
 80068c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068cc:	4613      	mov	r3, r2
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	4413      	add	r3, r2
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	4413      	add	r3, r2
 80068dc:	3304      	adds	r3, #4
 80068de:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	2200      	movs	r2, #0
 80068e4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	2202      	movs	r2, #2
 80068ea:	4619      	mov	r1, r3
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 fc37 	bl	8007160 <USBD_CtlSendData>
              break;
 80068f2:	e06a      	b.n	80069ca <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80068f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	da11      	bge.n	8006920 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80068fc:	7bbb      	ldrb	r3, [r7, #14]
 80068fe:	f003 020f 	and.w	r2, r3, #15
 8006902:	6879      	ldr	r1, [r7, #4]
 8006904:	4613      	mov	r3, r2
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	4413      	add	r3, r2
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	440b      	add	r3, r1
 800690e:	3324      	adds	r3, #36	; 0x24
 8006910:	881b      	ldrh	r3, [r3, #0]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d117      	bne.n	8006946 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006916:	6839      	ldr	r1, [r7, #0]
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 fbb0 	bl	800707e <USBD_CtlError>
                  break;
 800691e:	e054      	b.n	80069ca <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006920:	7bbb      	ldrb	r3, [r7, #14]
 8006922:	f003 020f 	and.w	r2, r3, #15
 8006926:	6879      	ldr	r1, [r7, #4]
 8006928:	4613      	mov	r3, r2
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	4413      	add	r3, r2
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	440b      	add	r3, r1
 8006932:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006936:	881b      	ldrh	r3, [r3, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d104      	bne.n	8006946 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800693c:	6839      	ldr	r1, [r7, #0]
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 fb9d 	bl	800707e <USBD_CtlError>
                  break;
 8006944:	e041      	b.n	80069ca <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006946:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800694a:	2b00      	cmp	r3, #0
 800694c:	da0b      	bge.n	8006966 <USBD_StdEPReq+0x2b2>
 800694e:	7bbb      	ldrb	r3, [r7, #14]
 8006950:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006954:	4613      	mov	r3, r2
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	4413      	add	r3, r2
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	3310      	adds	r3, #16
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	4413      	add	r3, r2
 8006962:	3304      	adds	r3, #4
 8006964:	e00b      	b.n	800697e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006966:	7bbb      	ldrb	r3, [r7, #14]
 8006968:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800696c:	4613      	mov	r3, r2
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	4413      	add	r3, r2
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	4413      	add	r3, r2
 800697c:	3304      	adds	r3, #4
 800697e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006980:	7bbb      	ldrb	r3, [r7, #14]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d002      	beq.n	800698c <USBD_StdEPReq+0x2d8>
 8006986:	7bbb      	ldrb	r3, [r7, #14]
 8006988:	2b80      	cmp	r3, #128	; 0x80
 800698a:	d103      	bne.n	8006994 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	2200      	movs	r2, #0
 8006990:	601a      	str	r2, [r3, #0]
 8006992:	e00e      	b.n	80069b2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006994:	7bbb      	ldrb	r3, [r7, #14]
 8006996:	4619      	mov	r1, r3
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 ffb9 	bl	8007910 <USBD_LL_IsStallEP>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d003      	beq.n	80069ac <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	2201      	movs	r2, #1
 80069a8:	601a      	str	r2, [r3, #0]
 80069aa:	e002      	b.n	80069b2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	2200      	movs	r2, #0
 80069b0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	2202      	movs	r2, #2
 80069b6:	4619      	mov	r1, r3
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 fbd1 	bl	8007160 <USBD_CtlSendData>
              break;
 80069be:	e004      	b.n	80069ca <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80069c0:	6839      	ldr	r1, [r7, #0]
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 fb5b 	bl	800707e <USBD_CtlError>
              break;
 80069c8:	bf00      	nop
          }
          break;
 80069ca:	e004      	b.n	80069d6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80069cc:	6839      	ldr	r1, [r7, #0]
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 fb55 	bl	800707e <USBD_CtlError>
          break;
 80069d4:	bf00      	nop
      }
      break;
 80069d6:	e005      	b.n	80069e4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80069d8:	6839      	ldr	r1, [r7, #0]
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 fb4f 	bl	800707e <USBD_CtlError>
      break;
 80069e0:	e000      	b.n	80069e4 <USBD_StdEPReq+0x330>
      break;
 80069e2:	bf00      	nop
  }

  return ret;
 80069e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3710      	adds	r7, #16
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
	...

080069f0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80069fa:	2300      	movs	r3, #0
 80069fc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80069fe:	2300      	movs	r3, #0
 8006a00:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006a02:	2300      	movs	r3, #0
 8006a04:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	885b      	ldrh	r3, [r3, #2]
 8006a0a:	0a1b      	lsrs	r3, r3, #8
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	2b06      	cmp	r3, #6
 8006a12:	f200 8128 	bhi.w	8006c66 <USBD_GetDescriptor+0x276>
 8006a16:	a201      	add	r2, pc, #4	; (adr r2, 8006a1c <USBD_GetDescriptor+0x2c>)
 8006a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a1c:	08006a39 	.word	0x08006a39
 8006a20:	08006a51 	.word	0x08006a51
 8006a24:	08006a91 	.word	0x08006a91
 8006a28:	08006c67 	.word	0x08006c67
 8006a2c:	08006c67 	.word	0x08006c67
 8006a30:	08006c07 	.word	0x08006c07
 8006a34:	08006c33 	.word	0x08006c33
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	7c12      	ldrb	r2, [r2, #16]
 8006a44:	f107 0108 	add.w	r1, r7, #8
 8006a48:	4610      	mov	r0, r2
 8006a4a:	4798      	blx	r3
 8006a4c:	60f8      	str	r0, [r7, #12]
      break;
 8006a4e:	e112      	b.n	8006c76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	7c1b      	ldrb	r3, [r3, #16]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d10d      	bne.n	8006a74 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a60:	f107 0208 	add.w	r2, r7, #8
 8006a64:	4610      	mov	r0, r2
 8006a66:	4798      	blx	r3
 8006a68:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	2202      	movs	r2, #2
 8006a70:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006a72:	e100      	b.n	8006c76 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a7c:	f107 0208 	add.w	r2, r7, #8
 8006a80:	4610      	mov	r0, r2
 8006a82:	4798      	blx	r3
 8006a84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	3301      	adds	r3, #1
 8006a8a:	2202      	movs	r2, #2
 8006a8c:	701a      	strb	r2, [r3, #0]
      break;
 8006a8e:	e0f2      	b.n	8006c76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	885b      	ldrh	r3, [r3, #2]
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	2b05      	cmp	r3, #5
 8006a98:	f200 80ac 	bhi.w	8006bf4 <USBD_GetDescriptor+0x204>
 8006a9c:	a201      	add	r2, pc, #4	; (adr r2, 8006aa4 <USBD_GetDescriptor+0xb4>)
 8006a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa2:	bf00      	nop
 8006aa4:	08006abd 	.word	0x08006abd
 8006aa8:	08006af1 	.word	0x08006af1
 8006aac:	08006b25 	.word	0x08006b25
 8006ab0:	08006b59 	.word	0x08006b59
 8006ab4:	08006b8d 	.word	0x08006b8d
 8006ab8:	08006bc1 	.word	0x08006bc1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d00b      	beq.n	8006ae0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	7c12      	ldrb	r2, [r2, #16]
 8006ad4:	f107 0108 	add.w	r1, r7, #8
 8006ad8:	4610      	mov	r0, r2
 8006ada:	4798      	blx	r3
 8006adc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ade:	e091      	b.n	8006c04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ae0:	6839      	ldr	r1, [r7, #0]
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 facb 	bl	800707e <USBD_CtlError>
            err++;
 8006ae8:	7afb      	ldrb	r3, [r7, #11]
 8006aea:	3301      	adds	r3, #1
 8006aec:	72fb      	strb	r3, [r7, #11]
          break;
 8006aee:	e089      	b.n	8006c04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d00b      	beq.n	8006b14 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	7c12      	ldrb	r2, [r2, #16]
 8006b08:	f107 0108 	add.w	r1, r7, #8
 8006b0c:	4610      	mov	r0, r2
 8006b0e:	4798      	blx	r3
 8006b10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b12:	e077      	b.n	8006c04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b14:	6839      	ldr	r1, [r7, #0]
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 fab1 	bl	800707e <USBD_CtlError>
            err++;
 8006b1c:	7afb      	ldrb	r3, [r7, #11]
 8006b1e:	3301      	adds	r3, #1
 8006b20:	72fb      	strb	r3, [r7, #11]
          break;
 8006b22:	e06f      	b.n	8006c04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d00b      	beq.n	8006b48 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	7c12      	ldrb	r2, [r2, #16]
 8006b3c:	f107 0108 	add.w	r1, r7, #8
 8006b40:	4610      	mov	r0, r2
 8006b42:	4798      	blx	r3
 8006b44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b46:	e05d      	b.n	8006c04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b48:	6839      	ldr	r1, [r7, #0]
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 fa97 	bl	800707e <USBD_CtlError>
            err++;
 8006b50:	7afb      	ldrb	r3, [r7, #11]
 8006b52:	3301      	adds	r3, #1
 8006b54:	72fb      	strb	r3, [r7, #11]
          break;
 8006b56:	e055      	b.n	8006c04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b5e:	691b      	ldr	r3, [r3, #16]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d00b      	beq.n	8006b7c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	7c12      	ldrb	r2, [r2, #16]
 8006b70:	f107 0108 	add.w	r1, r7, #8
 8006b74:	4610      	mov	r0, r2
 8006b76:	4798      	blx	r3
 8006b78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b7a:	e043      	b.n	8006c04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b7c:	6839      	ldr	r1, [r7, #0]
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 fa7d 	bl	800707e <USBD_CtlError>
            err++;
 8006b84:	7afb      	ldrb	r3, [r7, #11]
 8006b86:	3301      	adds	r3, #1
 8006b88:	72fb      	strb	r3, [r7, #11]
          break;
 8006b8a:	e03b      	b.n	8006c04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b92:	695b      	ldr	r3, [r3, #20]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d00b      	beq.n	8006bb0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b9e:	695b      	ldr	r3, [r3, #20]
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	7c12      	ldrb	r2, [r2, #16]
 8006ba4:	f107 0108 	add.w	r1, r7, #8
 8006ba8:	4610      	mov	r0, r2
 8006baa:	4798      	blx	r3
 8006bac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bae:	e029      	b.n	8006c04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006bb0:	6839      	ldr	r1, [r7, #0]
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 fa63 	bl	800707e <USBD_CtlError>
            err++;
 8006bb8:	7afb      	ldrb	r3, [r7, #11]
 8006bba:	3301      	adds	r3, #1
 8006bbc:	72fb      	strb	r3, [r7, #11]
          break;
 8006bbe:	e021      	b.n	8006c04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bc6:	699b      	ldr	r3, [r3, #24]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d00b      	beq.n	8006be4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bd2:	699b      	ldr	r3, [r3, #24]
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	7c12      	ldrb	r2, [r2, #16]
 8006bd8:	f107 0108 	add.w	r1, r7, #8
 8006bdc:	4610      	mov	r0, r2
 8006bde:	4798      	blx	r3
 8006be0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006be2:	e00f      	b.n	8006c04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006be4:	6839      	ldr	r1, [r7, #0]
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 fa49 	bl	800707e <USBD_CtlError>
            err++;
 8006bec:	7afb      	ldrb	r3, [r7, #11]
 8006bee:	3301      	adds	r3, #1
 8006bf0:	72fb      	strb	r3, [r7, #11]
          break;
 8006bf2:	e007      	b.n	8006c04 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006bf4:	6839      	ldr	r1, [r7, #0]
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 fa41 	bl	800707e <USBD_CtlError>
          err++;
 8006bfc:	7afb      	ldrb	r3, [r7, #11]
 8006bfe:	3301      	adds	r3, #1
 8006c00:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006c02:	bf00      	nop
      }
      break;
 8006c04:	e037      	b.n	8006c76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	7c1b      	ldrb	r3, [r3, #16]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d109      	bne.n	8006c22 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c16:	f107 0208 	add.w	r2, r7, #8
 8006c1a:	4610      	mov	r0, r2
 8006c1c:	4798      	blx	r3
 8006c1e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c20:	e029      	b.n	8006c76 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006c22:	6839      	ldr	r1, [r7, #0]
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 fa2a 	bl	800707e <USBD_CtlError>
        err++;
 8006c2a:	7afb      	ldrb	r3, [r7, #11]
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	72fb      	strb	r3, [r7, #11]
      break;
 8006c30:	e021      	b.n	8006c76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	7c1b      	ldrb	r3, [r3, #16]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d10d      	bne.n	8006c56 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c42:	f107 0208 	add.w	r2, r7, #8
 8006c46:	4610      	mov	r0, r2
 8006c48:	4798      	blx	r3
 8006c4a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	3301      	adds	r3, #1
 8006c50:	2207      	movs	r2, #7
 8006c52:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c54:	e00f      	b.n	8006c76 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006c56:	6839      	ldr	r1, [r7, #0]
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 fa10 	bl	800707e <USBD_CtlError>
        err++;
 8006c5e:	7afb      	ldrb	r3, [r7, #11]
 8006c60:	3301      	adds	r3, #1
 8006c62:	72fb      	strb	r3, [r7, #11]
      break;
 8006c64:	e007      	b.n	8006c76 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006c66:	6839      	ldr	r1, [r7, #0]
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 fa08 	bl	800707e <USBD_CtlError>
      err++;
 8006c6e:	7afb      	ldrb	r3, [r7, #11]
 8006c70:	3301      	adds	r3, #1
 8006c72:	72fb      	strb	r3, [r7, #11]
      break;
 8006c74:	bf00      	nop
  }

  if (err != 0U)
 8006c76:	7afb      	ldrb	r3, [r7, #11]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d11e      	bne.n	8006cba <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	88db      	ldrh	r3, [r3, #6]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d016      	beq.n	8006cb2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006c84:	893b      	ldrh	r3, [r7, #8]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00e      	beq.n	8006ca8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	88da      	ldrh	r2, [r3, #6]
 8006c8e:	893b      	ldrh	r3, [r7, #8]
 8006c90:	4293      	cmp	r3, r2
 8006c92:	bf28      	it	cs
 8006c94:	4613      	movcs	r3, r2
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006c9a:	893b      	ldrh	r3, [r7, #8]
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	68f9      	ldr	r1, [r7, #12]
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 fa5d 	bl	8007160 <USBD_CtlSendData>
 8006ca6:	e009      	b.n	8006cbc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006ca8:	6839      	ldr	r1, [r7, #0]
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 f9e7 	bl	800707e <USBD_CtlError>
 8006cb0:	e004      	b.n	8006cbc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 fa91 	bl	80071da <USBD_CtlSendStatus>
 8006cb8:	e000      	b.n	8006cbc <USBD_GetDescriptor+0x2cc>
    return;
 8006cba:	bf00      	nop
  }
}
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop

08006cc4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	889b      	ldrh	r3, [r3, #4]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d131      	bne.n	8006d3a <USBD_SetAddress+0x76>
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	88db      	ldrh	r3, [r3, #6]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d12d      	bne.n	8006d3a <USBD_SetAddress+0x76>
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	885b      	ldrh	r3, [r3, #2]
 8006ce2:	2b7f      	cmp	r3, #127	; 0x7f
 8006ce4:	d829      	bhi.n	8006d3a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	885b      	ldrh	r3, [r3, #2]
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cf0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	2b03      	cmp	r3, #3
 8006cfc:	d104      	bne.n	8006d08 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006cfe:	6839      	ldr	r1, [r7, #0]
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 f9bc 	bl	800707e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d06:	e01d      	b.n	8006d44 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	7bfa      	ldrb	r2, [r7, #15]
 8006d0c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006d10:	7bfb      	ldrb	r3, [r7, #15]
 8006d12:	4619      	mov	r1, r3
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 fe27 	bl	8007968 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 fa5d 	bl	80071da <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006d20:	7bfb      	ldrb	r3, [r7, #15]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d004      	beq.n	8006d30 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2202      	movs	r2, #2
 8006d2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d2e:	e009      	b.n	8006d44 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d38:	e004      	b.n	8006d44 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006d3a:	6839      	ldr	r1, [r7, #0]
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 f99e 	bl	800707e <USBD_CtlError>
  }
}
 8006d42:	bf00      	nop
 8006d44:	bf00      	nop
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d56:	2300      	movs	r3, #0
 8006d58:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	885b      	ldrh	r3, [r3, #2]
 8006d5e:	b2da      	uxtb	r2, r3
 8006d60:	4b4e      	ldr	r3, [pc, #312]	; (8006e9c <USBD_SetConfig+0x150>)
 8006d62:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006d64:	4b4d      	ldr	r3, [pc, #308]	; (8006e9c <USBD_SetConfig+0x150>)
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d905      	bls.n	8006d78 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006d6c:	6839      	ldr	r1, [r7, #0]
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 f985 	bl	800707e <USBD_CtlError>
    return USBD_FAIL;
 8006d74:	2303      	movs	r3, #3
 8006d76:	e08c      	b.n	8006e92 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d002      	beq.n	8006d8a <USBD_SetConfig+0x3e>
 8006d84:	2b03      	cmp	r3, #3
 8006d86:	d029      	beq.n	8006ddc <USBD_SetConfig+0x90>
 8006d88:	e075      	b.n	8006e76 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006d8a:	4b44      	ldr	r3, [pc, #272]	; (8006e9c <USBD_SetConfig+0x150>)
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d020      	beq.n	8006dd4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006d92:	4b42      	ldr	r3, [pc, #264]	; (8006e9c <USBD_SetConfig+0x150>)
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	461a      	mov	r2, r3
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006d9c:	4b3f      	ldr	r3, [pc, #252]	; (8006e9c <USBD_SetConfig+0x150>)
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	4619      	mov	r1, r3
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f7fe ffe7 	bl	8005d76 <USBD_SetClassConfig>
 8006da8:	4603      	mov	r3, r0
 8006daa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006dac:	7bfb      	ldrb	r3, [r7, #15]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d008      	beq.n	8006dc4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006db2:	6839      	ldr	r1, [r7, #0]
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 f962 	bl	800707e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2202      	movs	r2, #2
 8006dbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006dc2:	e065      	b.n	8006e90 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 fa08 	bl	80071da <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2203      	movs	r2, #3
 8006dce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006dd2:	e05d      	b.n	8006e90 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 fa00 	bl	80071da <USBD_CtlSendStatus>
      break;
 8006dda:	e059      	b.n	8006e90 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006ddc:	4b2f      	ldr	r3, [pc, #188]	; (8006e9c <USBD_SetConfig+0x150>)
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d112      	bne.n	8006e0a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2202      	movs	r2, #2
 8006de8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006dec:	4b2b      	ldr	r3, [pc, #172]	; (8006e9c <USBD_SetConfig+0x150>)
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	461a      	mov	r2, r3
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006df6:	4b29      	ldr	r3, [pc, #164]	; (8006e9c <USBD_SetConfig+0x150>)
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f7fe ffd6 	bl	8005dae <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 f9e9 	bl	80071da <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006e08:	e042      	b.n	8006e90 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006e0a:	4b24      	ldr	r3, [pc, #144]	; (8006e9c <USBD_SetConfig+0x150>)
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	461a      	mov	r2, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d02a      	beq.n	8006e6e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	4619      	mov	r1, r3
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f7fe ffc4 	bl	8005dae <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006e26:	4b1d      	ldr	r3, [pc, #116]	; (8006e9c <USBD_SetConfig+0x150>)
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006e30:	4b1a      	ldr	r3, [pc, #104]	; (8006e9c <USBD_SetConfig+0x150>)
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	4619      	mov	r1, r3
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f7fe ff9d 	bl	8005d76 <USBD_SetClassConfig>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006e40:	7bfb      	ldrb	r3, [r7, #15]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d00f      	beq.n	8006e66 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006e46:	6839      	ldr	r1, [r7, #0]
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 f918 	bl	800707e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	4619      	mov	r1, r3
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f7fe ffa9 	bl	8005dae <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2202      	movs	r2, #2
 8006e60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006e64:	e014      	b.n	8006e90 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 f9b7 	bl	80071da <USBD_CtlSendStatus>
      break;
 8006e6c:	e010      	b.n	8006e90 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 f9b3 	bl	80071da <USBD_CtlSendStatus>
      break;
 8006e74:	e00c      	b.n	8006e90 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006e76:	6839      	ldr	r1, [r7, #0]
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f000 f900 	bl	800707e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006e7e:	4b07      	ldr	r3, [pc, #28]	; (8006e9c <USBD_SetConfig+0x150>)
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	4619      	mov	r1, r3
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f7fe ff92 	bl	8005dae <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	73fb      	strb	r3, [r7, #15]
      break;
 8006e8e:	bf00      	nop
  }

  return ret;
 8006e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3710      	adds	r7, #16
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	20000180 	.word	0x20000180

08006ea0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b082      	sub	sp, #8
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	88db      	ldrh	r3, [r3, #6]
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d004      	beq.n	8006ebc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006eb2:	6839      	ldr	r1, [r7, #0]
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 f8e2 	bl	800707e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006eba:	e023      	b.n	8006f04 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	dc02      	bgt.n	8006ece <USBD_GetConfig+0x2e>
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	dc03      	bgt.n	8006ed4 <USBD_GetConfig+0x34>
 8006ecc:	e015      	b.n	8006efa <USBD_GetConfig+0x5a>
 8006ece:	2b03      	cmp	r3, #3
 8006ed0:	d00b      	beq.n	8006eea <USBD_GetConfig+0x4a>
 8006ed2:	e012      	b.n	8006efa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	3308      	adds	r3, #8
 8006ede:	2201      	movs	r2, #1
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 f93c 	bl	8007160 <USBD_CtlSendData>
        break;
 8006ee8:	e00c      	b.n	8006f04 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	3304      	adds	r3, #4
 8006eee:	2201      	movs	r2, #1
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 f934 	bl	8007160 <USBD_CtlSendData>
        break;
 8006ef8:	e004      	b.n	8006f04 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006efa:	6839      	ldr	r1, [r7, #0]
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 f8be 	bl	800707e <USBD_CtlError>
        break;
 8006f02:	bf00      	nop
}
 8006f04:	bf00      	nop
 8006f06:	3708      	adds	r7, #8
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b082      	sub	sp, #8
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	3b01      	subs	r3, #1
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d81e      	bhi.n	8006f62 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	88db      	ldrh	r3, [r3, #6]
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	d004      	beq.n	8006f36 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006f2c:	6839      	ldr	r1, [r7, #0]
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 f8a5 	bl	800707e <USBD_CtlError>
        break;
 8006f34:	e01a      	b.n	8006f6c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d005      	beq.n	8006f52 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	f043 0202 	orr.w	r2, r3, #2
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	330c      	adds	r3, #12
 8006f56:	2202      	movs	r2, #2
 8006f58:	4619      	mov	r1, r3
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 f900 	bl	8007160 <USBD_CtlSendData>
      break;
 8006f60:	e004      	b.n	8006f6c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006f62:	6839      	ldr	r1, [r7, #0]
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 f88a 	bl	800707e <USBD_CtlError>
      break;
 8006f6a:	bf00      	nop
  }
}
 8006f6c:	bf00      	nop
 8006f6e:	3708      	adds	r7, #8
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b082      	sub	sp, #8
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	885b      	ldrh	r3, [r3, #2]
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d107      	bne.n	8006f96 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 f923 	bl	80071da <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006f94:	e013      	b.n	8006fbe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	885b      	ldrh	r3, [r3, #2]
 8006f9a:	2b02      	cmp	r3, #2
 8006f9c:	d10b      	bne.n	8006fb6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	889b      	ldrh	r3, [r3, #4]
 8006fa2:	0a1b      	lsrs	r3, r3, #8
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	b2da      	uxtb	r2, r3
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 f913 	bl	80071da <USBD_CtlSendStatus>
}
 8006fb4:	e003      	b.n	8006fbe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006fb6:	6839      	ldr	r1, [r7, #0]
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 f860 	bl	800707e <USBD_CtlError>
}
 8006fbe:	bf00      	nop
 8006fc0:	3708      	adds	r7, #8
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}

08006fc6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fc6:	b580      	push	{r7, lr}
 8006fc8:	b082      	sub	sp, #8
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
 8006fce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	3b01      	subs	r3, #1
 8006fda:	2b02      	cmp	r3, #2
 8006fdc:	d80b      	bhi.n	8006ff6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	885b      	ldrh	r3, [r3, #2]
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d10c      	bne.n	8007000 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 f8f3 	bl	80071da <USBD_CtlSendStatus>
      }
      break;
 8006ff4:	e004      	b.n	8007000 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006ff6:	6839      	ldr	r1, [r7, #0]
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 f840 	bl	800707e <USBD_CtlError>
      break;
 8006ffe:	e000      	b.n	8007002 <USBD_ClrFeature+0x3c>
      break;
 8007000:	bf00      	nop
  }
}
 8007002:	bf00      	nop
 8007004:	3708      	adds	r7, #8
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}

0800700a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800700a:	b580      	push	{r7, lr}
 800700c:	b084      	sub	sp, #16
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
 8007012:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	781a      	ldrb	r2, [r3, #0]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	3301      	adds	r3, #1
 8007024:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	781a      	ldrb	r2, [r3, #0]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	3301      	adds	r3, #1
 8007032:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007034:	68f8      	ldr	r0, [r7, #12]
 8007036:	f7ff fa41 	bl	80064bc <SWAPBYTE>
 800703a:	4603      	mov	r3, r0
 800703c:	461a      	mov	r2, r3
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	3301      	adds	r3, #1
 8007046:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	3301      	adds	r3, #1
 800704c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800704e:	68f8      	ldr	r0, [r7, #12]
 8007050:	f7ff fa34 	bl	80064bc <SWAPBYTE>
 8007054:	4603      	mov	r3, r0
 8007056:	461a      	mov	r2, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	3301      	adds	r3, #1
 8007060:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	3301      	adds	r3, #1
 8007066:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007068:	68f8      	ldr	r0, [r7, #12]
 800706a:	f7ff fa27 	bl	80064bc <SWAPBYTE>
 800706e:	4603      	mov	r3, r0
 8007070:	461a      	mov	r2, r3
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	80da      	strh	r2, [r3, #6]
}
 8007076:	bf00      	nop
 8007078:	3710      	adds	r7, #16
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b082      	sub	sp, #8
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
 8007086:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007088:	2180      	movs	r1, #128	; 0x80
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 fc02 	bl	8007894 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007090:	2100      	movs	r1, #0
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 fbfe 	bl	8007894 <USBD_LL_StallEP>
}
 8007098:	bf00      	nop
 800709a:	3708      	adds	r7, #8
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b086      	sub	sp, #24
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80070ac:	2300      	movs	r3, #0
 80070ae:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d036      	beq.n	8007124 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80070ba:	6938      	ldr	r0, [r7, #16]
 80070bc:	f000 f836 	bl	800712c <USBD_GetLen>
 80070c0:	4603      	mov	r3, r0
 80070c2:	3301      	adds	r3, #1
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	005b      	lsls	r3, r3, #1
 80070c8:	b29a      	uxth	r2, r3
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80070ce:	7dfb      	ldrb	r3, [r7, #23]
 80070d0:	68ba      	ldr	r2, [r7, #8]
 80070d2:	4413      	add	r3, r2
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	7812      	ldrb	r2, [r2, #0]
 80070d8:	701a      	strb	r2, [r3, #0]
  idx++;
 80070da:	7dfb      	ldrb	r3, [r7, #23]
 80070dc:	3301      	adds	r3, #1
 80070de:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80070e0:	7dfb      	ldrb	r3, [r7, #23]
 80070e2:	68ba      	ldr	r2, [r7, #8]
 80070e4:	4413      	add	r3, r2
 80070e6:	2203      	movs	r2, #3
 80070e8:	701a      	strb	r2, [r3, #0]
  idx++;
 80070ea:	7dfb      	ldrb	r3, [r7, #23]
 80070ec:	3301      	adds	r3, #1
 80070ee:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80070f0:	e013      	b.n	800711a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80070f2:	7dfb      	ldrb	r3, [r7, #23]
 80070f4:	68ba      	ldr	r2, [r7, #8]
 80070f6:	4413      	add	r3, r2
 80070f8:	693a      	ldr	r2, [r7, #16]
 80070fa:	7812      	ldrb	r2, [r2, #0]
 80070fc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	3301      	adds	r3, #1
 8007102:	613b      	str	r3, [r7, #16]
    idx++;
 8007104:	7dfb      	ldrb	r3, [r7, #23]
 8007106:	3301      	adds	r3, #1
 8007108:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800710a:	7dfb      	ldrb	r3, [r7, #23]
 800710c:	68ba      	ldr	r2, [r7, #8]
 800710e:	4413      	add	r3, r2
 8007110:	2200      	movs	r2, #0
 8007112:	701a      	strb	r2, [r3, #0]
    idx++;
 8007114:	7dfb      	ldrb	r3, [r7, #23]
 8007116:	3301      	adds	r3, #1
 8007118:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1e7      	bne.n	80070f2 <USBD_GetString+0x52>
 8007122:	e000      	b.n	8007126 <USBD_GetString+0x86>
    return;
 8007124:	bf00      	nop
  }
}
 8007126:	3718      	adds	r7, #24
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800712c:	b480      	push	{r7}
 800712e:	b085      	sub	sp, #20
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007134:	2300      	movs	r3, #0
 8007136:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800713c:	e005      	b.n	800714a <USBD_GetLen+0x1e>
  {
    len++;
 800713e:	7bfb      	ldrb	r3, [r7, #15]
 8007140:	3301      	adds	r3, #1
 8007142:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	3301      	adds	r3, #1
 8007148:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d1f5      	bne.n	800713e <USBD_GetLen+0x12>
  }

  return len;
 8007152:	7bfb      	ldrb	r3, [r7, #15]
}
 8007154:	4618      	mov	r0, r3
 8007156:	3714      	adds	r7, #20
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2202      	movs	r2, #2
 8007170:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	68ba      	ldr	r2, [r7, #8]
 8007184:	2100      	movs	r1, #0
 8007186:	68f8      	ldr	r0, [r7, #12]
 8007188:	f000 fc0d 	bl	80079a6 <USBD_LL_Transmit>

  return USBD_OK;
 800718c:	2300      	movs	r3, #0
}
 800718e:	4618      	mov	r0, r3
 8007190:	3710      	adds	r7, #16
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}

08007196 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007196:	b580      	push	{r7, lr}
 8007198:	b084      	sub	sp, #16
 800719a:	af00      	add	r7, sp, #0
 800719c:	60f8      	str	r0, [r7, #12]
 800719e:	60b9      	str	r1, [r7, #8]
 80071a0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	68ba      	ldr	r2, [r7, #8]
 80071a6:	2100      	movs	r1, #0
 80071a8:	68f8      	ldr	r0, [r7, #12]
 80071aa:	f000 fbfc 	bl	80079a6 <USBD_LL_Transmit>

  return USBD_OK;
 80071ae:	2300      	movs	r3, #0
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3710      	adds	r7, #16
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	68ba      	ldr	r2, [r7, #8]
 80071c8:	2100      	movs	r1, #0
 80071ca:	68f8      	ldr	r0, [r7, #12]
 80071cc:	f000 fc0c 	bl	80079e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3710      	adds	r7, #16
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}

080071da <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80071da:	b580      	push	{r7, lr}
 80071dc:	b082      	sub	sp, #8
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2204      	movs	r2, #4
 80071e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80071ea:	2300      	movs	r3, #0
 80071ec:	2200      	movs	r2, #0
 80071ee:	2100      	movs	r1, #0
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 fbd8 	bl	80079a6 <USBD_LL_Transmit>

  return USBD_OK;
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3708      	adds	r7, #8
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2205      	movs	r2, #5
 800720c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007210:	2300      	movs	r3, #0
 8007212:	2200      	movs	r2, #0
 8007214:	2100      	movs	r1, #0
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 fbe6 	bl	80079e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800721c:	2300      	movs	r3, #0
}
 800721e:	4618      	mov	r0, r3
 8007220:	3708      	adds	r7, #8
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
	...

08007228 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800722c:	2200      	movs	r2, #0
 800722e:	490e      	ldr	r1, [pc, #56]	; (8007268 <MX_USB_DEVICE_Init+0x40>)
 8007230:	480e      	ldr	r0, [pc, #56]	; (800726c <MX_USB_DEVICE_Init+0x44>)
 8007232:	f7fe fd23 	bl	8005c7c <USBD_Init>
 8007236:	4603      	mov	r3, r0
 8007238:	2b00      	cmp	r3, #0
 800723a:	d001      	beq.n	8007240 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800723c:	f7fa f838 	bl	80012b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007240:	490b      	ldr	r1, [pc, #44]	; (8007270 <MX_USB_DEVICE_Init+0x48>)
 8007242:	480a      	ldr	r0, [pc, #40]	; (800726c <MX_USB_DEVICE_Init+0x44>)
 8007244:	f7fe fd4a 	bl	8005cdc <USBD_RegisterClass>
 8007248:	4603      	mov	r3, r0
 800724a:	2b00      	cmp	r3, #0
 800724c:	d001      	beq.n	8007252 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800724e:	f7fa f82f 	bl	80012b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007252:	4806      	ldr	r0, [pc, #24]	; (800726c <MX_USB_DEVICE_Init+0x44>)
 8007254:	f7fe fd78 	bl	8005d48 <USBD_Start>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d001      	beq.n	8007262 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800725e:	f7fa f827 	bl	80012b0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007262:	bf00      	nop
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	200000cc 	.word	0x200000cc
 800726c:	20000184 	.word	0x20000184
 8007270:	2000000c 	.word	0x2000000c

08007274 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007274:	b480      	push	{r7}
 8007276:	b083      	sub	sp, #12
 8007278:	af00      	add	r7, sp, #0
 800727a:	4603      	mov	r3, r0
 800727c:	6039      	str	r1, [r7, #0]
 800727e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	2212      	movs	r2, #18
 8007284:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007286:	4b03      	ldr	r3, [pc, #12]	; (8007294 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007288:	4618      	mov	r0, r3
 800728a:	370c      	adds	r7, #12
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr
 8007294:	200000e8 	.word	0x200000e8

08007298 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	4603      	mov	r3, r0
 80072a0:	6039      	str	r1, [r7, #0]
 80072a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	2204      	movs	r2, #4
 80072a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80072aa:	4b03      	ldr	r3, [pc, #12]	; (80072b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	370c      	adds	r7, #12
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr
 80072b8:	200000fc 	.word	0x200000fc

080072bc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	4603      	mov	r3, r0
 80072c4:	6039      	str	r1, [r7, #0]
 80072c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80072c8:	79fb      	ldrb	r3, [r7, #7]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d105      	bne.n	80072da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80072ce:	683a      	ldr	r2, [r7, #0]
 80072d0:	4907      	ldr	r1, [pc, #28]	; (80072f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80072d2:	4808      	ldr	r0, [pc, #32]	; (80072f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80072d4:	f7ff fee4 	bl	80070a0 <USBD_GetString>
 80072d8:	e004      	b.n	80072e4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80072da:	683a      	ldr	r2, [r7, #0]
 80072dc:	4904      	ldr	r1, [pc, #16]	; (80072f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80072de:	4805      	ldr	r0, [pc, #20]	; (80072f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80072e0:	f7ff fede 	bl	80070a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80072e4:	4b02      	ldr	r3, [pc, #8]	; (80072f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3708      	adds	r7, #8
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	20000460 	.word	0x20000460
 80072f4:	08008c68 	.word	0x08008c68

080072f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	4603      	mov	r3, r0
 8007300:	6039      	str	r1, [r7, #0]
 8007302:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007304:	683a      	ldr	r2, [r7, #0]
 8007306:	4904      	ldr	r1, [pc, #16]	; (8007318 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007308:	4804      	ldr	r0, [pc, #16]	; (800731c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800730a:	f7ff fec9 	bl	80070a0 <USBD_GetString>
  return USBD_StrDesc;
 800730e:	4b02      	ldr	r3, [pc, #8]	; (8007318 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007310:	4618      	mov	r0, r3
 8007312:	3708      	adds	r7, #8
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}
 8007318:	20000460 	.word	0x20000460
 800731c:	08008c80 	.word	0x08008c80

08007320 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
 8007326:	4603      	mov	r3, r0
 8007328:	6039      	str	r1, [r7, #0]
 800732a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	221a      	movs	r2, #26
 8007330:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007332:	f000 f843 	bl	80073bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007336:	4b02      	ldr	r3, [pc, #8]	; (8007340 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007338:	4618      	mov	r0, r3
 800733a:	3708      	adds	r7, #8
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}
 8007340:	20000100 	.word	0x20000100

08007344 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b082      	sub	sp, #8
 8007348:	af00      	add	r7, sp, #0
 800734a:	4603      	mov	r3, r0
 800734c:	6039      	str	r1, [r7, #0]
 800734e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007350:	79fb      	ldrb	r3, [r7, #7]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d105      	bne.n	8007362 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007356:	683a      	ldr	r2, [r7, #0]
 8007358:	4907      	ldr	r1, [pc, #28]	; (8007378 <USBD_FS_ConfigStrDescriptor+0x34>)
 800735a:	4808      	ldr	r0, [pc, #32]	; (800737c <USBD_FS_ConfigStrDescriptor+0x38>)
 800735c:	f7ff fea0 	bl	80070a0 <USBD_GetString>
 8007360:	e004      	b.n	800736c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007362:	683a      	ldr	r2, [r7, #0]
 8007364:	4904      	ldr	r1, [pc, #16]	; (8007378 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007366:	4805      	ldr	r0, [pc, #20]	; (800737c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007368:	f7ff fe9a 	bl	80070a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800736c:	4b02      	ldr	r3, [pc, #8]	; (8007378 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800736e:	4618      	mov	r0, r3
 8007370:	3708      	adds	r7, #8
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	20000460 	.word	0x20000460
 800737c:	08008c94 	.word	0x08008c94

08007380 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
 8007386:	4603      	mov	r3, r0
 8007388:	6039      	str	r1, [r7, #0]
 800738a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800738c:	79fb      	ldrb	r3, [r7, #7]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d105      	bne.n	800739e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007392:	683a      	ldr	r2, [r7, #0]
 8007394:	4907      	ldr	r1, [pc, #28]	; (80073b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007396:	4808      	ldr	r0, [pc, #32]	; (80073b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007398:	f7ff fe82 	bl	80070a0 <USBD_GetString>
 800739c:	e004      	b.n	80073a8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800739e:	683a      	ldr	r2, [r7, #0]
 80073a0:	4904      	ldr	r1, [pc, #16]	; (80073b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80073a2:	4805      	ldr	r0, [pc, #20]	; (80073b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80073a4:	f7ff fe7c 	bl	80070a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80073a8:	4b02      	ldr	r3, [pc, #8]	; (80073b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3708      	adds	r7, #8
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	20000460 	.word	0x20000460
 80073b8:	08008ca0 	.word	0x08008ca0

080073bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80073c2:	4b0f      	ldr	r3, [pc, #60]	; (8007400 <Get_SerialNum+0x44>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80073c8:	4b0e      	ldr	r3, [pc, #56]	; (8007404 <Get_SerialNum+0x48>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80073ce:	4b0e      	ldr	r3, [pc, #56]	; (8007408 <Get_SerialNum+0x4c>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80073d4:	68fa      	ldr	r2, [r7, #12]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	4413      	add	r3, r2
 80073da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d009      	beq.n	80073f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80073e2:	2208      	movs	r2, #8
 80073e4:	4909      	ldr	r1, [pc, #36]	; (800740c <Get_SerialNum+0x50>)
 80073e6:	68f8      	ldr	r0, [r7, #12]
 80073e8:	f000 f814 	bl	8007414 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80073ec:	2204      	movs	r2, #4
 80073ee:	4908      	ldr	r1, [pc, #32]	; (8007410 <Get_SerialNum+0x54>)
 80073f0:	68b8      	ldr	r0, [r7, #8]
 80073f2:	f000 f80f 	bl	8007414 <IntToUnicode>
  }
}
 80073f6:	bf00      	nop
 80073f8:	3710      	adds	r7, #16
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop
 8007400:	1fff7a10 	.word	0x1fff7a10
 8007404:	1fff7a14 	.word	0x1fff7a14
 8007408:	1fff7a18 	.word	0x1fff7a18
 800740c:	20000102 	.word	0x20000102
 8007410:	20000112 	.word	0x20000112

08007414 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007414:	b480      	push	{r7}
 8007416:	b087      	sub	sp, #28
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	4613      	mov	r3, r2
 8007420:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007422:	2300      	movs	r3, #0
 8007424:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007426:	2300      	movs	r3, #0
 8007428:	75fb      	strb	r3, [r7, #23]
 800742a:	e027      	b.n	800747c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	0f1b      	lsrs	r3, r3, #28
 8007430:	2b09      	cmp	r3, #9
 8007432:	d80b      	bhi.n	800744c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	0f1b      	lsrs	r3, r3, #28
 8007438:	b2da      	uxtb	r2, r3
 800743a:	7dfb      	ldrb	r3, [r7, #23]
 800743c:	005b      	lsls	r3, r3, #1
 800743e:	4619      	mov	r1, r3
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	440b      	add	r3, r1
 8007444:	3230      	adds	r2, #48	; 0x30
 8007446:	b2d2      	uxtb	r2, r2
 8007448:	701a      	strb	r2, [r3, #0]
 800744a:	e00a      	b.n	8007462 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	0f1b      	lsrs	r3, r3, #28
 8007450:	b2da      	uxtb	r2, r3
 8007452:	7dfb      	ldrb	r3, [r7, #23]
 8007454:	005b      	lsls	r3, r3, #1
 8007456:	4619      	mov	r1, r3
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	440b      	add	r3, r1
 800745c:	3237      	adds	r2, #55	; 0x37
 800745e:	b2d2      	uxtb	r2, r2
 8007460:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	011b      	lsls	r3, r3, #4
 8007466:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007468:	7dfb      	ldrb	r3, [r7, #23]
 800746a:	005b      	lsls	r3, r3, #1
 800746c:	3301      	adds	r3, #1
 800746e:	68ba      	ldr	r2, [r7, #8]
 8007470:	4413      	add	r3, r2
 8007472:	2200      	movs	r2, #0
 8007474:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007476:	7dfb      	ldrb	r3, [r7, #23]
 8007478:	3301      	adds	r3, #1
 800747a:	75fb      	strb	r3, [r7, #23]
 800747c:	7dfa      	ldrb	r2, [r7, #23]
 800747e:	79fb      	ldrb	r3, [r7, #7]
 8007480:	429a      	cmp	r2, r3
 8007482:	d3d3      	bcc.n	800742c <IntToUnicode+0x18>
  }
}
 8007484:	bf00      	nop
 8007486:	bf00      	nop
 8007488:	371c      	adds	r7, #28
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr
	...

08007494 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b08a      	sub	sp, #40	; 0x28
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800749c:	f107 0314 	add.w	r3, r7, #20
 80074a0:	2200      	movs	r2, #0
 80074a2:	601a      	str	r2, [r3, #0]
 80074a4:	605a      	str	r2, [r3, #4]
 80074a6:	609a      	str	r2, [r3, #8]
 80074a8:	60da      	str	r2, [r3, #12]
 80074aa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074b4:	d147      	bne.n	8007546 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074b6:	2300      	movs	r3, #0
 80074b8:	613b      	str	r3, [r7, #16]
 80074ba:	4b25      	ldr	r3, [pc, #148]	; (8007550 <HAL_PCD_MspInit+0xbc>)
 80074bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074be:	4a24      	ldr	r2, [pc, #144]	; (8007550 <HAL_PCD_MspInit+0xbc>)
 80074c0:	f043 0301 	orr.w	r3, r3, #1
 80074c4:	6313      	str	r3, [r2, #48]	; 0x30
 80074c6:	4b22      	ldr	r3, [pc, #136]	; (8007550 <HAL_PCD_MspInit+0xbc>)
 80074c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ca:	f003 0301 	and.w	r3, r3, #1
 80074ce:	613b      	str	r3, [r7, #16]
 80074d0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80074d2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80074d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074d8:	2302      	movs	r3, #2
 80074da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074dc:	2300      	movs	r3, #0
 80074de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074e0:	2303      	movs	r3, #3
 80074e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80074e4:	230a      	movs	r3, #10
 80074e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074e8:	f107 0314 	add.w	r3, r7, #20
 80074ec:	4619      	mov	r1, r3
 80074ee:	4819      	ldr	r0, [pc, #100]	; (8007554 <HAL_PCD_MspInit+0xc0>)
 80074f0:	f7fa f96c 	bl	80017cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80074f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80074fa:	2300      	movs	r3, #0
 80074fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074fe:	2300      	movs	r3, #0
 8007500:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8007502:	f107 0314 	add.w	r3, r7, #20
 8007506:	4619      	mov	r1, r3
 8007508:	4812      	ldr	r0, [pc, #72]	; (8007554 <HAL_PCD_MspInit+0xc0>)
 800750a:	f7fa f95f 	bl	80017cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800750e:	4b10      	ldr	r3, [pc, #64]	; (8007550 <HAL_PCD_MspInit+0xbc>)
 8007510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007512:	4a0f      	ldr	r2, [pc, #60]	; (8007550 <HAL_PCD_MspInit+0xbc>)
 8007514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007518:	6353      	str	r3, [r2, #52]	; 0x34
 800751a:	2300      	movs	r3, #0
 800751c:	60fb      	str	r3, [r7, #12]
 800751e:	4b0c      	ldr	r3, [pc, #48]	; (8007550 <HAL_PCD_MspInit+0xbc>)
 8007520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007522:	4a0b      	ldr	r2, [pc, #44]	; (8007550 <HAL_PCD_MspInit+0xbc>)
 8007524:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007528:	6453      	str	r3, [r2, #68]	; 0x44
 800752a:	4b09      	ldr	r3, [pc, #36]	; (8007550 <HAL_PCD_MspInit+0xbc>)
 800752c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800752e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007532:	60fb      	str	r3, [r7, #12]
 8007534:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007536:	2200      	movs	r2, #0
 8007538:	2100      	movs	r1, #0
 800753a:	2043      	movs	r0, #67	; 0x43
 800753c:	f7fa f90f 	bl	800175e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007540:	2043      	movs	r0, #67	; 0x43
 8007542:	f7fa f928 	bl	8001796 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007546:	bf00      	nop
 8007548:	3728      	adds	r7, #40	; 0x28
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop
 8007550:	40023800 	.word	0x40023800
 8007554:	40020000 	.word	0x40020000

08007558 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800756c:	4619      	mov	r1, r3
 800756e:	4610      	mov	r0, r2
 8007570:	f7fe fc37 	bl	8005de2 <USBD_LL_SetupStage>
}
 8007574:	bf00      	nop
 8007576:	3708      	adds	r7, #8
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b082      	sub	sp, #8
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	460b      	mov	r3, r1
 8007586:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800758e:	78fa      	ldrb	r2, [r7, #3]
 8007590:	6879      	ldr	r1, [r7, #4]
 8007592:	4613      	mov	r3, r2
 8007594:	00db      	lsls	r3, r3, #3
 8007596:	4413      	add	r3, r2
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	440b      	add	r3, r1
 800759c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	78fb      	ldrb	r3, [r7, #3]
 80075a4:	4619      	mov	r1, r3
 80075a6:	f7fe fc71 	bl	8005e8c <USBD_LL_DataOutStage>
}
 80075aa:	bf00      	nop
 80075ac:	3708      	adds	r7, #8
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b082      	sub	sp, #8
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
 80075ba:	460b      	mov	r3, r1
 80075bc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80075c4:	78fa      	ldrb	r2, [r7, #3]
 80075c6:	6879      	ldr	r1, [r7, #4]
 80075c8:	4613      	mov	r3, r2
 80075ca:	00db      	lsls	r3, r3, #3
 80075cc:	4413      	add	r3, r2
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	440b      	add	r3, r1
 80075d2:	334c      	adds	r3, #76	; 0x4c
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	78fb      	ldrb	r3, [r7, #3]
 80075d8:	4619      	mov	r1, r3
 80075da:	f7fe fd0a 	bl	8005ff2 <USBD_LL_DataInStage>
}
 80075de:	bf00      	nop
 80075e0:	3708      	adds	r7, #8
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}

080075e6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075e6:	b580      	push	{r7, lr}
 80075e8:	b082      	sub	sp, #8
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80075f4:	4618      	mov	r0, r3
 80075f6:	f7fe fe3e 	bl	8006276 <USBD_LL_SOF>
}
 80075fa:	bf00      	nop
 80075fc:	3708      	adds	r7, #8
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}

08007602 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007602:	b580      	push	{r7, lr}
 8007604:	b084      	sub	sp, #16
 8007606:	af00      	add	r7, sp, #0
 8007608:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800760a:	2301      	movs	r3, #1
 800760c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d102      	bne.n	800761c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007616:	2300      	movs	r3, #0
 8007618:	73fb      	strb	r3, [r7, #15]
 800761a:	e008      	b.n	800762e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	68db      	ldr	r3, [r3, #12]
 8007620:	2b02      	cmp	r3, #2
 8007622:	d102      	bne.n	800762a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007624:	2301      	movs	r3, #1
 8007626:	73fb      	strb	r3, [r7, #15]
 8007628:	e001      	b.n	800762e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800762a:	f7f9 fe41 	bl	80012b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007634:	7bfa      	ldrb	r2, [r7, #15]
 8007636:	4611      	mov	r1, r2
 8007638:	4618      	mov	r0, r3
 800763a:	f7fe fdde 	bl	80061fa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007644:	4618      	mov	r0, r3
 8007646:	f7fe fd86 	bl	8006156 <USBD_LL_Reset>
}
 800764a:	bf00      	nop
 800764c:	3710      	adds	r7, #16
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
	...

08007654 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007662:	4618      	mov	r0, r3
 8007664:	f7fe fdd9 	bl	800621a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	6812      	ldr	r2, [r2, #0]
 8007676:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800767a:	f043 0301 	orr.w	r3, r3, #1
 800767e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6a1b      	ldr	r3, [r3, #32]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d005      	beq.n	8007694 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007688:	4b04      	ldr	r3, [pc, #16]	; (800769c <HAL_PCD_SuspendCallback+0x48>)
 800768a:	691b      	ldr	r3, [r3, #16]
 800768c:	4a03      	ldr	r2, [pc, #12]	; (800769c <HAL_PCD_SuspendCallback+0x48>)
 800768e:	f043 0306 	orr.w	r3, r3, #6
 8007692:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007694:	bf00      	nop
 8007696:	3708      	adds	r7, #8
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}
 800769c:	e000ed00 	.word	0xe000ed00

080076a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80076ae:	4618      	mov	r0, r3
 80076b0:	f7fe fdc9 	bl	8006246 <USBD_LL_Resume>
}
 80076b4:	bf00      	nop
 80076b6:	3708      	adds	r7, #8
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b082      	sub	sp, #8
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	460b      	mov	r3, r1
 80076c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80076ce:	78fa      	ldrb	r2, [r7, #3]
 80076d0:	4611      	mov	r1, r2
 80076d2:	4618      	mov	r0, r3
 80076d4:	f7fe fe21 	bl	800631a <USBD_LL_IsoOUTIncomplete>
}
 80076d8:	bf00      	nop
 80076da:	3708      	adds	r7, #8
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}

080076e0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	460b      	mov	r3, r1
 80076ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80076f2:	78fa      	ldrb	r2, [r7, #3]
 80076f4:	4611      	mov	r1, r2
 80076f6:	4618      	mov	r0, r3
 80076f8:	f7fe fddd 	bl	80062b6 <USBD_LL_IsoINIncomplete>
}
 80076fc:	bf00      	nop
 80076fe:	3708      	adds	r7, #8
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007712:	4618      	mov	r0, r3
 8007714:	f7fe fe33 	bl	800637e <USBD_LL_DevConnected>
}
 8007718:	bf00      	nop
 800771a:	3708      	adds	r7, #8
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800772e:	4618      	mov	r0, r3
 8007730:	f7fe fe30 	bl	8006394 <USBD_LL_DevDisconnected>
}
 8007734:	bf00      	nop
 8007736:	3708      	adds	r7, #8
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b082      	sub	sp, #8
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d13c      	bne.n	80077c6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800774c:	4a20      	ldr	r2, [pc, #128]	; (80077d0 <USBD_LL_Init+0x94>)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	4a1e      	ldr	r2, [pc, #120]	; (80077d0 <USBD_LL_Init+0x94>)
 8007758:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800775c:	4b1c      	ldr	r3, [pc, #112]	; (80077d0 <USBD_LL_Init+0x94>)
 800775e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007762:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007764:	4b1a      	ldr	r3, [pc, #104]	; (80077d0 <USBD_LL_Init+0x94>)
 8007766:	2204      	movs	r2, #4
 8007768:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800776a:	4b19      	ldr	r3, [pc, #100]	; (80077d0 <USBD_LL_Init+0x94>)
 800776c:	2202      	movs	r2, #2
 800776e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007770:	4b17      	ldr	r3, [pc, #92]	; (80077d0 <USBD_LL_Init+0x94>)
 8007772:	2200      	movs	r2, #0
 8007774:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007776:	4b16      	ldr	r3, [pc, #88]	; (80077d0 <USBD_LL_Init+0x94>)
 8007778:	2202      	movs	r2, #2
 800777a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800777c:	4b14      	ldr	r3, [pc, #80]	; (80077d0 <USBD_LL_Init+0x94>)
 800777e:	2201      	movs	r2, #1
 8007780:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007782:	4b13      	ldr	r3, [pc, #76]	; (80077d0 <USBD_LL_Init+0x94>)
 8007784:	2200      	movs	r2, #0
 8007786:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007788:	4b11      	ldr	r3, [pc, #68]	; (80077d0 <USBD_LL_Init+0x94>)
 800778a:	2200      	movs	r2, #0
 800778c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800778e:	4b10      	ldr	r3, [pc, #64]	; (80077d0 <USBD_LL_Init+0x94>)
 8007790:	2201      	movs	r2, #1
 8007792:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007794:	4b0e      	ldr	r3, [pc, #56]	; (80077d0 <USBD_LL_Init+0x94>)
 8007796:	2200      	movs	r2, #0
 8007798:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800779a:	480d      	ldr	r0, [pc, #52]	; (80077d0 <USBD_LL_Init+0x94>)
 800779c:	f7fa f9f3 	bl	8001b86 <HAL_PCD_Init>
 80077a0:	4603      	mov	r3, r0
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d001      	beq.n	80077aa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80077a6:	f7f9 fd83 	bl	80012b0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80077aa:	2180      	movs	r1, #128	; 0x80
 80077ac:	4808      	ldr	r0, [pc, #32]	; (80077d0 <USBD_LL_Init+0x94>)
 80077ae:	f7fb fc32 	bl	8003016 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80077b2:	2240      	movs	r2, #64	; 0x40
 80077b4:	2100      	movs	r1, #0
 80077b6:	4806      	ldr	r0, [pc, #24]	; (80077d0 <USBD_LL_Init+0x94>)
 80077b8:	f7fb fbe6 	bl	8002f88 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80077bc:	2280      	movs	r2, #128	; 0x80
 80077be:	2101      	movs	r1, #1
 80077c0:	4803      	ldr	r0, [pc, #12]	; (80077d0 <USBD_LL_Init+0x94>)
 80077c2:	f7fb fbe1 	bl	8002f88 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80077c6:	2300      	movs	r3, #0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3708      	adds	r7, #8
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}
 80077d0:	20000660 	.word	0x20000660

080077d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b084      	sub	sp, #16
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077dc:	2300      	movs	r3, #0
 80077de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077e0:	2300      	movs	r3, #0
 80077e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80077ea:	4618      	mov	r0, r3
 80077ec:	f7fa fae8 	bl	8001dc0 <HAL_PCD_Start>
 80077f0:	4603      	mov	r3, r0
 80077f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077f4:	7bfb      	ldrb	r3, [r7, #15]
 80077f6:	4618      	mov	r0, r3
 80077f8:	f000 f930 	bl	8007a5c <USBD_Get_USB_Status>
 80077fc:	4603      	mov	r3, r0
 80077fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007800:	7bbb      	ldrb	r3, [r7, #14]
}
 8007802:	4618      	mov	r0, r3
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800780a:	b580      	push	{r7, lr}
 800780c:	b084      	sub	sp, #16
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
 8007812:	4608      	mov	r0, r1
 8007814:	4611      	mov	r1, r2
 8007816:	461a      	mov	r2, r3
 8007818:	4603      	mov	r3, r0
 800781a:	70fb      	strb	r3, [r7, #3]
 800781c:	460b      	mov	r3, r1
 800781e:	70bb      	strb	r3, [r7, #2]
 8007820:	4613      	mov	r3, r2
 8007822:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007824:	2300      	movs	r3, #0
 8007826:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007828:	2300      	movs	r3, #0
 800782a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007832:	78bb      	ldrb	r3, [r7, #2]
 8007834:	883a      	ldrh	r2, [r7, #0]
 8007836:	78f9      	ldrb	r1, [r7, #3]
 8007838:	f7fa ffb9 	bl	80027ae <HAL_PCD_EP_Open>
 800783c:	4603      	mov	r3, r0
 800783e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007840:	7bfb      	ldrb	r3, [r7, #15]
 8007842:	4618      	mov	r0, r3
 8007844:	f000 f90a 	bl	8007a5c <USBD_Get_USB_Status>
 8007848:	4603      	mov	r3, r0
 800784a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800784c:	7bbb      	ldrb	r3, [r7, #14]
}
 800784e:	4618      	mov	r0, r3
 8007850:	3710      	adds	r7, #16
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007856:	b580      	push	{r7, lr}
 8007858:	b084      	sub	sp, #16
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
 800785e:	460b      	mov	r3, r1
 8007860:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007862:	2300      	movs	r3, #0
 8007864:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007866:	2300      	movs	r3, #0
 8007868:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007870:	78fa      	ldrb	r2, [r7, #3]
 8007872:	4611      	mov	r1, r2
 8007874:	4618      	mov	r0, r3
 8007876:	f7fb f802 	bl	800287e <HAL_PCD_EP_Close>
 800787a:	4603      	mov	r3, r0
 800787c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800787e:	7bfb      	ldrb	r3, [r7, #15]
 8007880:	4618      	mov	r0, r3
 8007882:	f000 f8eb 	bl	8007a5c <USBD_Get_USB_Status>
 8007886:	4603      	mov	r3, r0
 8007888:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800788a:	7bbb      	ldrb	r3, [r7, #14]
}
 800788c:	4618      	mov	r0, r3
 800788e:	3710      	adds	r7, #16
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	460b      	mov	r3, r1
 800789e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078a0:	2300      	movs	r3, #0
 80078a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078a4:	2300      	movs	r3, #0
 80078a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80078ae:	78fa      	ldrb	r2, [r7, #3]
 80078b0:	4611      	mov	r1, r2
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7fb f8c2 	bl	8002a3c <HAL_PCD_EP_SetStall>
 80078b8:	4603      	mov	r3, r0
 80078ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078bc:	7bfb      	ldrb	r3, [r7, #15]
 80078be:	4618      	mov	r0, r3
 80078c0:	f000 f8cc 	bl	8007a5c <USBD_Get_USB_Status>
 80078c4:	4603      	mov	r3, r0
 80078c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3710      	adds	r7, #16
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b084      	sub	sp, #16
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
 80078da:	460b      	mov	r3, r1
 80078dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078de:	2300      	movs	r3, #0
 80078e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078e2:	2300      	movs	r3, #0
 80078e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80078ec:	78fa      	ldrb	r2, [r7, #3]
 80078ee:	4611      	mov	r1, r2
 80078f0:	4618      	mov	r0, r3
 80078f2:	f7fb f907 	bl	8002b04 <HAL_PCD_EP_ClrStall>
 80078f6:	4603      	mov	r3, r0
 80078f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078fa:	7bfb      	ldrb	r3, [r7, #15]
 80078fc:	4618      	mov	r0, r3
 80078fe:	f000 f8ad 	bl	8007a5c <USBD_Get_USB_Status>
 8007902:	4603      	mov	r3, r0
 8007904:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007906:	7bbb      	ldrb	r3, [r7, #14]
}
 8007908:	4618      	mov	r0, r3
 800790a:	3710      	adds	r7, #16
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007910:	b480      	push	{r7}
 8007912:	b085      	sub	sp, #20
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	460b      	mov	r3, r1
 800791a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007922:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007924:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007928:	2b00      	cmp	r3, #0
 800792a:	da0b      	bge.n	8007944 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800792c:	78fb      	ldrb	r3, [r7, #3]
 800792e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007932:	68f9      	ldr	r1, [r7, #12]
 8007934:	4613      	mov	r3, r2
 8007936:	00db      	lsls	r3, r3, #3
 8007938:	4413      	add	r3, r2
 800793a:	009b      	lsls	r3, r3, #2
 800793c:	440b      	add	r3, r1
 800793e:	333e      	adds	r3, #62	; 0x3e
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	e00b      	b.n	800795c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007944:	78fb      	ldrb	r3, [r7, #3]
 8007946:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800794a:	68f9      	ldr	r1, [r7, #12]
 800794c:	4613      	mov	r3, r2
 800794e:	00db      	lsls	r3, r3, #3
 8007950:	4413      	add	r3, r2
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	440b      	add	r3, r1
 8007956:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800795a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800795c:	4618      	mov	r0, r3
 800795e:	3714      	adds	r7, #20
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	460b      	mov	r3, r1
 8007972:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007974:	2300      	movs	r3, #0
 8007976:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007978:	2300      	movs	r3, #0
 800797a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007982:	78fa      	ldrb	r2, [r7, #3]
 8007984:	4611      	mov	r1, r2
 8007986:	4618      	mov	r0, r3
 8007988:	f7fa feec 	bl	8002764 <HAL_PCD_SetAddress>
 800798c:	4603      	mov	r3, r0
 800798e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007990:	7bfb      	ldrb	r3, [r7, #15]
 8007992:	4618      	mov	r0, r3
 8007994:	f000 f862 	bl	8007a5c <USBD_Get_USB_Status>
 8007998:	4603      	mov	r3, r0
 800799a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800799c:	7bbb      	ldrb	r3, [r7, #14]
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3710      	adds	r7, #16
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}

080079a6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80079a6:	b580      	push	{r7, lr}
 80079a8:	b086      	sub	sp, #24
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	60f8      	str	r0, [r7, #12]
 80079ae:	607a      	str	r2, [r7, #4]
 80079b0:	603b      	str	r3, [r7, #0]
 80079b2:	460b      	mov	r3, r1
 80079b4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079b6:	2300      	movs	r3, #0
 80079b8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079ba:	2300      	movs	r3, #0
 80079bc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80079c4:	7af9      	ldrb	r1, [r7, #11]
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	f7fa ffed 	bl	80029a8 <HAL_PCD_EP_Transmit>
 80079ce:	4603      	mov	r3, r0
 80079d0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079d2:	7dfb      	ldrb	r3, [r7, #23]
 80079d4:	4618      	mov	r0, r3
 80079d6:	f000 f841 	bl	8007a5c <USBD_Get_USB_Status>
 80079da:	4603      	mov	r3, r0
 80079dc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80079de:	7dbb      	ldrb	r3, [r7, #22]
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3718      	adds	r7, #24
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b086      	sub	sp, #24
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	607a      	str	r2, [r7, #4]
 80079f2:	603b      	str	r3, [r7, #0]
 80079f4:	460b      	mov	r3, r1
 80079f6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079f8:	2300      	movs	r3, #0
 80079fa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079fc:	2300      	movs	r3, #0
 80079fe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007a06:	7af9      	ldrb	r1, [r7, #11]
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	f7fa ff81 	bl	8002912 <HAL_PCD_EP_Receive>
 8007a10:	4603      	mov	r3, r0
 8007a12:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a14:	7dfb      	ldrb	r3, [r7, #23]
 8007a16:	4618      	mov	r0, r3
 8007a18:	f000 f820 	bl	8007a5c <USBD_Get_USB_Status>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007a20:	7dbb      	ldrb	r3, [r7, #22]
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3718      	adds	r7, #24
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
	...

08007a2c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007a34:	4b03      	ldr	r3, [pc, #12]	; (8007a44 <USBD_static_malloc+0x18>)
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	370c      	adds	r7, #12
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr
 8007a42:	bf00      	nop
 8007a44:	20000b6c 	.word	0x20000b6c

08007a48 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b083      	sub	sp, #12
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]

}
 8007a50:	bf00      	nop
 8007a52:	370c      	adds	r7, #12
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b085      	sub	sp, #20
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	4603      	mov	r3, r0
 8007a64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a66:	2300      	movs	r3, #0
 8007a68:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007a6a:	79fb      	ldrb	r3, [r7, #7]
 8007a6c:	2b03      	cmp	r3, #3
 8007a6e:	d817      	bhi.n	8007aa0 <USBD_Get_USB_Status+0x44>
 8007a70:	a201      	add	r2, pc, #4	; (adr r2, 8007a78 <USBD_Get_USB_Status+0x1c>)
 8007a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a76:	bf00      	nop
 8007a78:	08007a89 	.word	0x08007a89
 8007a7c:	08007a8f 	.word	0x08007a8f
 8007a80:	08007a95 	.word	0x08007a95
 8007a84:	08007a9b 	.word	0x08007a9b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	73fb      	strb	r3, [r7, #15]
    break;
 8007a8c:	e00b      	b.n	8007aa6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007a8e:	2303      	movs	r3, #3
 8007a90:	73fb      	strb	r3, [r7, #15]
    break;
 8007a92:	e008      	b.n	8007aa6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007a94:	2301      	movs	r3, #1
 8007a96:	73fb      	strb	r3, [r7, #15]
    break;
 8007a98:	e005      	b.n	8007aa6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007a9a:	2303      	movs	r3, #3
 8007a9c:	73fb      	strb	r3, [r7, #15]
    break;
 8007a9e:	e002      	b.n	8007aa6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007aa0:	2303      	movs	r3, #3
 8007aa2:	73fb      	strb	r3, [r7, #15]
    break;
 8007aa4:	bf00      	nop
  }
  return usb_status;
 8007aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3714      	adds	r7, #20
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <__libc_init_array>:
 8007ab4:	b570      	push	{r4, r5, r6, lr}
 8007ab6:	4d0d      	ldr	r5, [pc, #52]	; (8007aec <__libc_init_array+0x38>)
 8007ab8:	4c0d      	ldr	r4, [pc, #52]	; (8007af0 <__libc_init_array+0x3c>)
 8007aba:	1b64      	subs	r4, r4, r5
 8007abc:	10a4      	asrs	r4, r4, #2
 8007abe:	2600      	movs	r6, #0
 8007ac0:	42a6      	cmp	r6, r4
 8007ac2:	d109      	bne.n	8007ad8 <__libc_init_array+0x24>
 8007ac4:	4d0b      	ldr	r5, [pc, #44]	; (8007af4 <__libc_init_array+0x40>)
 8007ac6:	4c0c      	ldr	r4, [pc, #48]	; (8007af8 <__libc_init_array+0x44>)
 8007ac8:	f001 f8c0 	bl	8008c4c <_init>
 8007acc:	1b64      	subs	r4, r4, r5
 8007ace:	10a4      	asrs	r4, r4, #2
 8007ad0:	2600      	movs	r6, #0
 8007ad2:	42a6      	cmp	r6, r4
 8007ad4:	d105      	bne.n	8007ae2 <__libc_init_array+0x2e>
 8007ad6:	bd70      	pop	{r4, r5, r6, pc}
 8007ad8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007adc:	4798      	blx	r3
 8007ade:	3601      	adds	r6, #1
 8007ae0:	e7ee      	b.n	8007ac0 <__libc_init_array+0xc>
 8007ae2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ae6:	4798      	blx	r3
 8007ae8:	3601      	adds	r6, #1
 8007aea:	e7f2      	b.n	8007ad2 <__libc_init_array+0x1e>
 8007aec:	08008ea8 	.word	0x08008ea8
 8007af0:	08008ea8 	.word	0x08008ea8
 8007af4:	08008ea8 	.word	0x08008ea8
 8007af8:	08008eac 	.word	0x08008eac

08007afc <memset>:
 8007afc:	4402      	add	r2, r0
 8007afe:	4603      	mov	r3, r0
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d100      	bne.n	8007b06 <memset+0xa>
 8007b04:	4770      	bx	lr
 8007b06:	f803 1b01 	strb.w	r1, [r3], #1
 8007b0a:	e7f9      	b.n	8007b00 <memset+0x4>
 8007b0c:	0000      	movs	r0, r0
	...

08007b10 <cos>:
 8007b10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b12:	ec53 2b10 	vmov	r2, r3, d0
 8007b16:	4826      	ldr	r0, [pc, #152]	; (8007bb0 <cos+0xa0>)
 8007b18:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007b1c:	4281      	cmp	r1, r0
 8007b1e:	dc06      	bgt.n	8007b2e <cos+0x1e>
 8007b20:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8007ba8 <cos+0x98>
 8007b24:	b005      	add	sp, #20
 8007b26:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b2a:	f000 baa9 	b.w	8008080 <__kernel_cos>
 8007b2e:	4821      	ldr	r0, [pc, #132]	; (8007bb4 <cos+0xa4>)
 8007b30:	4281      	cmp	r1, r0
 8007b32:	dd09      	ble.n	8007b48 <cos+0x38>
 8007b34:	ee10 0a10 	vmov	r0, s0
 8007b38:	4619      	mov	r1, r3
 8007b3a:	f7f8 fc87 	bl	800044c <__aeabi_dsub>
 8007b3e:	ec41 0b10 	vmov	d0, r0, r1
 8007b42:	b005      	add	sp, #20
 8007b44:	f85d fb04 	ldr.w	pc, [sp], #4
 8007b48:	4668      	mov	r0, sp
 8007b4a:	f000 f88d 	bl	8007c68 <__ieee754_rem_pio2>
 8007b4e:	f000 0003 	and.w	r0, r0, #3
 8007b52:	2801      	cmp	r0, #1
 8007b54:	d00b      	beq.n	8007b6e <cos+0x5e>
 8007b56:	2802      	cmp	r0, #2
 8007b58:	d016      	beq.n	8007b88 <cos+0x78>
 8007b5a:	b9e0      	cbnz	r0, 8007b96 <cos+0x86>
 8007b5c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007b60:	ed9d 0b00 	vldr	d0, [sp]
 8007b64:	f000 fa8c 	bl	8008080 <__kernel_cos>
 8007b68:	ec51 0b10 	vmov	r0, r1, d0
 8007b6c:	e7e7      	b.n	8007b3e <cos+0x2e>
 8007b6e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007b72:	ed9d 0b00 	vldr	d0, [sp]
 8007b76:	f000 fe9b 	bl	80088b0 <__kernel_sin>
 8007b7a:	ec53 2b10 	vmov	r2, r3, d0
 8007b7e:	ee10 0a10 	vmov	r0, s0
 8007b82:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007b86:	e7da      	b.n	8007b3e <cos+0x2e>
 8007b88:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007b8c:	ed9d 0b00 	vldr	d0, [sp]
 8007b90:	f000 fa76 	bl	8008080 <__kernel_cos>
 8007b94:	e7f1      	b.n	8007b7a <cos+0x6a>
 8007b96:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007b9a:	ed9d 0b00 	vldr	d0, [sp]
 8007b9e:	2001      	movs	r0, #1
 8007ba0:	f000 fe86 	bl	80088b0 <__kernel_sin>
 8007ba4:	e7e0      	b.n	8007b68 <cos+0x58>
 8007ba6:	bf00      	nop
	...
 8007bb0:	3fe921fb 	.word	0x3fe921fb
 8007bb4:	7fefffff 	.word	0x7fefffff

08007bb8 <sin>:
 8007bb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007bba:	ec53 2b10 	vmov	r2, r3, d0
 8007bbe:	4828      	ldr	r0, [pc, #160]	; (8007c60 <sin+0xa8>)
 8007bc0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007bc4:	4281      	cmp	r1, r0
 8007bc6:	dc07      	bgt.n	8007bd8 <sin+0x20>
 8007bc8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8007c58 <sin+0xa0>
 8007bcc:	2000      	movs	r0, #0
 8007bce:	b005      	add	sp, #20
 8007bd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007bd4:	f000 be6c 	b.w	80088b0 <__kernel_sin>
 8007bd8:	4822      	ldr	r0, [pc, #136]	; (8007c64 <sin+0xac>)
 8007bda:	4281      	cmp	r1, r0
 8007bdc:	dd09      	ble.n	8007bf2 <sin+0x3a>
 8007bde:	ee10 0a10 	vmov	r0, s0
 8007be2:	4619      	mov	r1, r3
 8007be4:	f7f8 fc32 	bl	800044c <__aeabi_dsub>
 8007be8:	ec41 0b10 	vmov	d0, r0, r1
 8007bec:	b005      	add	sp, #20
 8007bee:	f85d fb04 	ldr.w	pc, [sp], #4
 8007bf2:	4668      	mov	r0, sp
 8007bf4:	f000 f838 	bl	8007c68 <__ieee754_rem_pio2>
 8007bf8:	f000 0003 	and.w	r0, r0, #3
 8007bfc:	2801      	cmp	r0, #1
 8007bfe:	d00c      	beq.n	8007c1a <sin+0x62>
 8007c00:	2802      	cmp	r0, #2
 8007c02:	d011      	beq.n	8007c28 <sin+0x70>
 8007c04:	b9f0      	cbnz	r0, 8007c44 <sin+0x8c>
 8007c06:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007c0a:	ed9d 0b00 	vldr	d0, [sp]
 8007c0e:	2001      	movs	r0, #1
 8007c10:	f000 fe4e 	bl	80088b0 <__kernel_sin>
 8007c14:	ec51 0b10 	vmov	r0, r1, d0
 8007c18:	e7e6      	b.n	8007be8 <sin+0x30>
 8007c1a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007c1e:	ed9d 0b00 	vldr	d0, [sp]
 8007c22:	f000 fa2d 	bl	8008080 <__kernel_cos>
 8007c26:	e7f5      	b.n	8007c14 <sin+0x5c>
 8007c28:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007c2c:	ed9d 0b00 	vldr	d0, [sp]
 8007c30:	2001      	movs	r0, #1
 8007c32:	f000 fe3d 	bl	80088b0 <__kernel_sin>
 8007c36:	ec53 2b10 	vmov	r2, r3, d0
 8007c3a:	ee10 0a10 	vmov	r0, s0
 8007c3e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007c42:	e7d1      	b.n	8007be8 <sin+0x30>
 8007c44:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007c48:	ed9d 0b00 	vldr	d0, [sp]
 8007c4c:	f000 fa18 	bl	8008080 <__kernel_cos>
 8007c50:	e7f1      	b.n	8007c36 <sin+0x7e>
 8007c52:	bf00      	nop
 8007c54:	f3af 8000 	nop.w
	...
 8007c60:	3fe921fb 	.word	0x3fe921fb
 8007c64:	7fefffff 	.word	0x7fefffff

08007c68 <__ieee754_rem_pio2>:
 8007c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c6c:	ed2d 8b02 	vpush	{d8}
 8007c70:	ec55 4b10 	vmov	r4, r5, d0
 8007c74:	4bca      	ldr	r3, [pc, #808]	; (8007fa0 <__ieee754_rem_pio2+0x338>)
 8007c76:	b08b      	sub	sp, #44	; 0x2c
 8007c78:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8007c7c:	4598      	cmp	r8, r3
 8007c7e:	4682      	mov	sl, r0
 8007c80:	9502      	str	r5, [sp, #8]
 8007c82:	dc08      	bgt.n	8007c96 <__ieee754_rem_pio2+0x2e>
 8007c84:	2200      	movs	r2, #0
 8007c86:	2300      	movs	r3, #0
 8007c88:	ed80 0b00 	vstr	d0, [r0]
 8007c8c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007c90:	f04f 0b00 	mov.w	fp, #0
 8007c94:	e028      	b.n	8007ce8 <__ieee754_rem_pio2+0x80>
 8007c96:	4bc3      	ldr	r3, [pc, #780]	; (8007fa4 <__ieee754_rem_pio2+0x33c>)
 8007c98:	4598      	cmp	r8, r3
 8007c9a:	dc78      	bgt.n	8007d8e <__ieee754_rem_pio2+0x126>
 8007c9c:	9b02      	ldr	r3, [sp, #8]
 8007c9e:	4ec2      	ldr	r6, [pc, #776]	; (8007fa8 <__ieee754_rem_pio2+0x340>)
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	ee10 0a10 	vmov	r0, s0
 8007ca6:	a3b0      	add	r3, pc, #704	; (adr r3, 8007f68 <__ieee754_rem_pio2+0x300>)
 8007ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cac:	4629      	mov	r1, r5
 8007cae:	dd39      	ble.n	8007d24 <__ieee754_rem_pio2+0xbc>
 8007cb0:	f7f8 fbcc 	bl	800044c <__aeabi_dsub>
 8007cb4:	45b0      	cmp	r8, r6
 8007cb6:	4604      	mov	r4, r0
 8007cb8:	460d      	mov	r5, r1
 8007cba:	d01b      	beq.n	8007cf4 <__ieee754_rem_pio2+0x8c>
 8007cbc:	a3ac      	add	r3, pc, #688	; (adr r3, 8007f70 <__ieee754_rem_pio2+0x308>)
 8007cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc2:	f7f8 fbc3 	bl	800044c <__aeabi_dsub>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	460b      	mov	r3, r1
 8007cca:	e9ca 2300 	strd	r2, r3, [sl]
 8007cce:	4620      	mov	r0, r4
 8007cd0:	4629      	mov	r1, r5
 8007cd2:	f7f8 fbbb 	bl	800044c <__aeabi_dsub>
 8007cd6:	a3a6      	add	r3, pc, #664	; (adr r3, 8007f70 <__ieee754_rem_pio2+0x308>)
 8007cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cdc:	f7f8 fbb6 	bl	800044c <__aeabi_dsub>
 8007ce0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007ce4:	f04f 0b01 	mov.w	fp, #1
 8007ce8:	4658      	mov	r0, fp
 8007cea:	b00b      	add	sp, #44	; 0x2c
 8007cec:	ecbd 8b02 	vpop	{d8}
 8007cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cf4:	a3a0      	add	r3, pc, #640	; (adr r3, 8007f78 <__ieee754_rem_pio2+0x310>)
 8007cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfa:	f7f8 fba7 	bl	800044c <__aeabi_dsub>
 8007cfe:	a3a0      	add	r3, pc, #640	; (adr r3, 8007f80 <__ieee754_rem_pio2+0x318>)
 8007d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d04:	4604      	mov	r4, r0
 8007d06:	460d      	mov	r5, r1
 8007d08:	f7f8 fba0 	bl	800044c <__aeabi_dsub>
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	460b      	mov	r3, r1
 8007d10:	e9ca 2300 	strd	r2, r3, [sl]
 8007d14:	4620      	mov	r0, r4
 8007d16:	4629      	mov	r1, r5
 8007d18:	f7f8 fb98 	bl	800044c <__aeabi_dsub>
 8007d1c:	a398      	add	r3, pc, #608	; (adr r3, 8007f80 <__ieee754_rem_pio2+0x318>)
 8007d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d22:	e7db      	b.n	8007cdc <__ieee754_rem_pio2+0x74>
 8007d24:	f7f8 fb94 	bl	8000450 <__adddf3>
 8007d28:	45b0      	cmp	r8, r6
 8007d2a:	4604      	mov	r4, r0
 8007d2c:	460d      	mov	r5, r1
 8007d2e:	d016      	beq.n	8007d5e <__ieee754_rem_pio2+0xf6>
 8007d30:	a38f      	add	r3, pc, #572	; (adr r3, 8007f70 <__ieee754_rem_pio2+0x308>)
 8007d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d36:	f7f8 fb8b 	bl	8000450 <__adddf3>
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	e9ca 2300 	strd	r2, r3, [sl]
 8007d42:	4620      	mov	r0, r4
 8007d44:	4629      	mov	r1, r5
 8007d46:	f7f8 fb81 	bl	800044c <__aeabi_dsub>
 8007d4a:	a389      	add	r3, pc, #548	; (adr r3, 8007f70 <__ieee754_rem_pio2+0x308>)
 8007d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d50:	f7f8 fb7e 	bl	8000450 <__adddf3>
 8007d54:	f04f 3bff 	mov.w	fp, #4294967295
 8007d58:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007d5c:	e7c4      	b.n	8007ce8 <__ieee754_rem_pio2+0x80>
 8007d5e:	a386      	add	r3, pc, #536	; (adr r3, 8007f78 <__ieee754_rem_pio2+0x310>)
 8007d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d64:	f7f8 fb74 	bl	8000450 <__adddf3>
 8007d68:	a385      	add	r3, pc, #532	; (adr r3, 8007f80 <__ieee754_rem_pio2+0x318>)
 8007d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d6e:	4604      	mov	r4, r0
 8007d70:	460d      	mov	r5, r1
 8007d72:	f7f8 fb6d 	bl	8000450 <__adddf3>
 8007d76:	4602      	mov	r2, r0
 8007d78:	460b      	mov	r3, r1
 8007d7a:	e9ca 2300 	strd	r2, r3, [sl]
 8007d7e:	4620      	mov	r0, r4
 8007d80:	4629      	mov	r1, r5
 8007d82:	f7f8 fb63 	bl	800044c <__aeabi_dsub>
 8007d86:	a37e      	add	r3, pc, #504	; (adr r3, 8007f80 <__ieee754_rem_pio2+0x318>)
 8007d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d8c:	e7e0      	b.n	8007d50 <__ieee754_rem_pio2+0xe8>
 8007d8e:	4b87      	ldr	r3, [pc, #540]	; (8007fac <__ieee754_rem_pio2+0x344>)
 8007d90:	4598      	cmp	r8, r3
 8007d92:	f300 80d9 	bgt.w	8007f48 <__ieee754_rem_pio2+0x2e0>
 8007d96:	f000 fe49 	bl	8008a2c <fabs>
 8007d9a:	ec55 4b10 	vmov	r4, r5, d0
 8007d9e:	ee10 0a10 	vmov	r0, s0
 8007da2:	a379      	add	r3, pc, #484	; (adr r3, 8007f88 <__ieee754_rem_pio2+0x320>)
 8007da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da8:	4629      	mov	r1, r5
 8007daa:	f7f8 fa21 	bl	80001f0 <__aeabi_dmul>
 8007dae:	4b80      	ldr	r3, [pc, #512]	; (8007fb0 <__ieee754_rem_pio2+0x348>)
 8007db0:	2200      	movs	r2, #0
 8007db2:	f7f8 fb4d 	bl	8000450 <__adddf3>
 8007db6:	f7f8 fd89 	bl	80008cc <__aeabi_d2iz>
 8007dba:	4683      	mov	fp, r0
 8007dbc:	f7f8 fc94 	bl	80006e8 <__aeabi_i2d>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	ec43 2b18 	vmov	d8, r2, r3
 8007dc8:	a367      	add	r3, pc, #412	; (adr r3, 8007f68 <__ieee754_rem_pio2+0x300>)
 8007dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dce:	f7f8 fa0f 	bl	80001f0 <__aeabi_dmul>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	4620      	mov	r0, r4
 8007dd8:	4629      	mov	r1, r5
 8007dda:	f7f8 fb37 	bl	800044c <__aeabi_dsub>
 8007dde:	a364      	add	r3, pc, #400	; (adr r3, 8007f70 <__ieee754_rem_pio2+0x308>)
 8007de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de4:	4606      	mov	r6, r0
 8007de6:	460f      	mov	r7, r1
 8007de8:	ec51 0b18 	vmov	r0, r1, d8
 8007dec:	f7f8 fa00 	bl	80001f0 <__aeabi_dmul>
 8007df0:	f1bb 0f1f 	cmp.w	fp, #31
 8007df4:	4604      	mov	r4, r0
 8007df6:	460d      	mov	r5, r1
 8007df8:	dc0d      	bgt.n	8007e16 <__ieee754_rem_pio2+0x1ae>
 8007dfa:	4b6e      	ldr	r3, [pc, #440]	; (8007fb4 <__ieee754_rem_pio2+0x34c>)
 8007dfc:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e04:	4543      	cmp	r3, r8
 8007e06:	d006      	beq.n	8007e16 <__ieee754_rem_pio2+0x1ae>
 8007e08:	4622      	mov	r2, r4
 8007e0a:	462b      	mov	r3, r5
 8007e0c:	4630      	mov	r0, r6
 8007e0e:	4639      	mov	r1, r7
 8007e10:	f7f8 fb1c 	bl	800044c <__aeabi_dsub>
 8007e14:	e00f      	b.n	8007e36 <__ieee754_rem_pio2+0x1ce>
 8007e16:	462b      	mov	r3, r5
 8007e18:	4622      	mov	r2, r4
 8007e1a:	4630      	mov	r0, r6
 8007e1c:	4639      	mov	r1, r7
 8007e1e:	f7f8 fb15 	bl	800044c <__aeabi_dsub>
 8007e22:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007e26:	9303      	str	r3, [sp, #12]
 8007e28:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007e2c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8007e30:	f1b8 0f10 	cmp.w	r8, #16
 8007e34:	dc02      	bgt.n	8007e3c <__ieee754_rem_pio2+0x1d4>
 8007e36:	e9ca 0100 	strd	r0, r1, [sl]
 8007e3a:	e039      	b.n	8007eb0 <__ieee754_rem_pio2+0x248>
 8007e3c:	a34e      	add	r3, pc, #312	; (adr r3, 8007f78 <__ieee754_rem_pio2+0x310>)
 8007e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e42:	ec51 0b18 	vmov	r0, r1, d8
 8007e46:	f7f8 f9d3 	bl	80001f0 <__aeabi_dmul>
 8007e4a:	4604      	mov	r4, r0
 8007e4c:	460d      	mov	r5, r1
 8007e4e:	4602      	mov	r2, r0
 8007e50:	460b      	mov	r3, r1
 8007e52:	4630      	mov	r0, r6
 8007e54:	4639      	mov	r1, r7
 8007e56:	f7f8 faf9 	bl	800044c <__aeabi_dsub>
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	4680      	mov	r8, r0
 8007e60:	4689      	mov	r9, r1
 8007e62:	4630      	mov	r0, r6
 8007e64:	4639      	mov	r1, r7
 8007e66:	f7f8 faf1 	bl	800044c <__aeabi_dsub>
 8007e6a:	4622      	mov	r2, r4
 8007e6c:	462b      	mov	r3, r5
 8007e6e:	f7f8 faed 	bl	800044c <__aeabi_dsub>
 8007e72:	a343      	add	r3, pc, #268	; (adr r3, 8007f80 <__ieee754_rem_pio2+0x318>)
 8007e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e78:	4604      	mov	r4, r0
 8007e7a:	460d      	mov	r5, r1
 8007e7c:	ec51 0b18 	vmov	r0, r1, d8
 8007e80:	f7f8 f9b6 	bl	80001f0 <__aeabi_dmul>
 8007e84:	4622      	mov	r2, r4
 8007e86:	462b      	mov	r3, r5
 8007e88:	f7f8 fae0 	bl	800044c <__aeabi_dsub>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	460b      	mov	r3, r1
 8007e90:	4604      	mov	r4, r0
 8007e92:	460d      	mov	r5, r1
 8007e94:	4640      	mov	r0, r8
 8007e96:	4649      	mov	r1, r9
 8007e98:	f7f8 fad8 	bl	800044c <__aeabi_dsub>
 8007e9c:	9a03      	ldr	r2, [sp, #12]
 8007e9e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007ea2:	1ad3      	subs	r3, r2, r3
 8007ea4:	2b31      	cmp	r3, #49	; 0x31
 8007ea6:	dc24      	bgt.n	8007ef2 <__ieee754_rem_pio2+0x28a>
 8007ea8:	e9ca 0100 	strd	r0, r1, [sl]
 8007eac:	4646      	mov	r6, r8
 8007eae:	464f      	mov	r7, r9
 8007eb0:	e9da 8900 	ldrd	r8, r9, [sl]
 8007eb4:	4630      	mov	r0, r6
 8007eb6:	4642      	mov	r2, r8
 8007eb8:	464b      	mov	r3, r9
 8007eba:	4639      	mov	r1, r7
 8007ebc:	f7f8 fac6 	bl	800044c <__aeabi_dsub>
 8007ec0:	462b      	mov	r3, r5
 8007ec2:	4622      	mov	r2, r4
 8007ec4:	f7f8 fac2 	bl	800044c <__aeabi_dsub>
 8007ec8:	9b02      	ldr	r3, [sp, #8]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007ed0:	f6bf af0a 	bge.w	8007ce8 <__ieee754_rem_pio2+0x80>
 8007ed4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007ed8:	f8ca 3004 	str.w	r3, [sl, #4]
 8007edc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ee0:	f8ca 8000 	str.w	r8, [sl]
 8007ee4:	f8ca 0008 	str.w	r0, [sl, #8]
 8007ee8:	f8ca 300c 	str.w	r3, [sl, #12]
 8007eec:	f1cb 0b00 	rsb	fp, fp, #0
 8007ef0:	e6fa      	b.n	8007ce8 <__ieee754_rem_pio2+0x80>
 8007ef2:	a327      	add	r3, pc, #156	; (adr r3, 8007f90 <__ieee754_rem_pio2+0x328>)
 8007ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef8:	ec51 0b18 	vmov	r0, r1, d8
 8007efc:	f7f8 f978 	bl	80001f0 <__aeabi_dmul>
 8007f00:	4604      	mov	r4, r0
 8007f02:	460d      	mov	r5, r1
 8007f04:	4602      	mov	r2, r0
 8007f06:	460b      	mov	r3, r1
 8007f08:	4640      	mov	r0, r8
 8007f0a:	4649      	mov	r1, r9
 8007f0c:	f7f8 fa9e 	bl	800044c <__aeabi_dsub>
 8007f10:	4602      	mov	r2, r0
 8007f12:	460b      	mov	r3, r1
 8007f14:	4606      	mov	r6, r0
 8007f16:	460f      	mov	r7, r1
 8007f18:	4640      	mov	r0, r8
 8007f1a:	4649      	mov	r1, r9
 8007f1c:	f7f8 fa96 	bl	800044c <__aeabi_dsub>
 8007f20:	4622      	mov	r2, r4
 8007f22:	462b      	mov	r3, r5
 8007f24:	f7f8 fa92 	bl	800044c <__aeabi_dsub>
 8007f28:	a31b      	add	r3, pc, #108	; (adr r3, 8007f98 <__ieee754_rem_pio2+0x330>)
 8007f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2e:	4604      	mov	r4, r0
 8007f30:	460d      	mov	r5, r1
 8007f32:	ec51 0b18 	vmov	r0, r1, d8
 8007f36:	f7f8 f95b 	bl	80001f0 <__aeabi_dmul>
 8007f3a:	4622      	mov	r2, r4
 8007f3c:	462b      	mov	r3, r5
 8007f3e:	f7f8 fa85 	bl	800044c <__aeabi_dsub>
 8007f42:	4604      	mov	r4, r0
 8007f44:	460d      	mov	r5, r1
 8007f46:	e75f      	b.n	8007e08 <__ieee754_rem_pio2+0x1a0>
 8007f48:	4b1b      	ldr	r3, [pc, #108]	; (8007fb8 <__ieee754_rem_pio2+0x350>)
 8007f4a:	4598      	cmp	r8, r3
 8007f4c:	dd36      	ble.n	8007fbc <__ieee754_rem_pio2+0x354>
 8007f4e:	ee10 2a10 	vmov	r2, s0
 8007f52:	462b      	mov	r3, r5
 8007f54:	4620      	mov	r0, r4
 8007f56:	4629      	mov	r1, r5
 8007f58:	f7f8 fa78 	bl	800044c <__aeabi_dsub>
 8007f5c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007f60:	e9ca 0100 	strd	r0, r1, [sl]
 8007f64:	e694      	b.n	8007c90 <__ieee754_rem_pio2+0x28>
 8007f66:	bf00      	nop
 8007f68:	54400000 	.word	0x54400000
 8007f6c:	3ff921fb 	.word	0x3ff921fb
 8007f70:	1a626331 	.word	0x1a626331
 8007f74:	3dd0b461 	.word	0x3dd0b461
 8007f78:	1a600000 	.word	0x1a600000
 8007f7c:	3dd0b461 	.word	0x3dd0b461
 8007f80:	2e037073 	.word	0x2e037073
 8007f84:	3ba3198a 	.word	0x3ba3198a
 8007f88:	6dc9c883 	.word	0x6dc9c883
 8007f8c:	3fe45f30 	.word	0x3fe45f30
 8007f90:	2e000000 	.word	0x2e000000
 8007f94:	3ba3198a 	.word	0x3ba3198a
 8007f98:	252049c1 	.word	0x252049c1
 8007f9c:	397b839a 	.word	0x397b839a
 8007fa0:	3fe921fb 	.word	0x3fe921fb
 8007fa4:	4002d97b 	.word	0x4002d97b
 8007fa8:	3ff921fb 	.word	0x3ff921fb
 8007fac:	413921fb 	.word	0x413921fb
 8007fb0:	3fe00000 	.word	0x3fe00000
 8007fb4:	08008cc8 	.word	0x08008cc8
 8007fb8:	7fefffff 	.word	0x7fefffff
 8007fbc:	ea4f 5428 	mov.w	r4, r8, asr #20
 8007fc0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8007fc4:	ee10 0a10 	vmov	r0, s0
 8007fc8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8007fcc:	ee10 6a10 	vmov	r6, s0
 8007fd0:	460f      	mov	r7, r1
 8007fd2:	f7f8 fc7b 	bl	80008cc <__aeabi_d2iz>
 8007fd6:	f7f8 fb87 	bl	80006e8 <__aeabi_i2d>
 8007fda:	4602      	mov	r2, r0
 8007fdc:	460b      	mov	r3, r1
 8007fde:	4630      	mov	r0, r6
 8007fe0:	4639      	mov	r1, r7
 8007fe2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007fe6:	f7f8 fa31 	bl	800044c <__aeabi_dsub>
 8007fea:	4b23      	ldr	r3, [pc, #140]	; (8008078 <__ieee754_rem_pio2+0x410>)
 8007fec:	2200      	movs	r2, #0
 8007fee:	f7f8 f8ff 	bl	80001f0 <__aeabi_dmul>
 8007ff2:	460f      	mov	r7, r1
 8007ff4:	4606      	mov	r6, r0
 8007ff6:	f7f8 fc69 	bl	80008cc <__aeabi_d2iz>
 8007ffa:	f7f8 fb75 	bl	80006e8 <__aeabi_i2d>
 8007ffe:	4602      	mov	r2, r0
 8008000:	460b      	mov	r3, r1
 8008002:	4630      	mov	r0, r6
 8008004:	4639      	mov	r1, r7
 8008006:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800800a:	f7f8 fa1f 	bl	800044c <__aeabi_dsub>
 800800e:	4b1a      	ldr	r3, [pc, #104]	; (8008078 <__ieee754_rem_pio2+0x410>)
 8008010:	2200      	movs	r2, #0
 8008012:	f7f8 f8ed 	bl	80001f0 <__aeabi_dmul>
 8008016:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800801a:	ad04      	add	r5, sp, #16
 800801c:	f04f 0803 	mov.w	r8, #3
 8008020:	46a9      	mov	r9, r5
 8008022:	2600      	movs	r6, #0
 8008024:	2700      	movs	r7, #0
 8008026:	4632      	mov	r2, r6
 8008028:	463b      	mov	r3, r7
 800802a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800802e:	46c3      	mov	fp, r8
 8008030:	3d08      	subs	r5, #8
 8008032:	f108 38ff 	add.w	r8, r8, #4294967295
 8008036:	f7f8 fc17 	bl	8000868 <__aeabi_dcmpeq>
 800803a:	2800      	cmp	r0, #0
 800803c:	d1f3      	bne.n	8008026 <__ieee754_rem_pio2+0x3be>
 800803e:	4b0f      	ldr	r3, [pc, #60]	; (800807c <__ieee754_rem_pio2+0x414>)
 8008040:	9301      	str	r3, [sp, #4]
 8008042:	2302      	movs	r3, #2
 8008044:	9300      	str	r3, [sp, #0]
 8008046:	4622      	mov	r2, r4
 8008048:	465b      	mov	r3, fp
 800804a:	4651      	mov	r1, sl
 800804c:	4648      	mov	r0, r9
 800804e:	f000 f8df 	bl	8008210 <__kernel_rem_pio2>
 8008052:	9b02      	ldr	r3, [sp, #8]
 8008054:	2b00      	cmp	r3, #0
 8008056:	4683      	mov	fp, r0
 8008058:	f6bf ae46 	bge.w	8007ce8 <__ieee754_rem_pio2+0x80>
 800805c:	e9da 2100 	ldrd	r2, r1, [sl]
 8008060:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008064:	e9ca 2300 	strd	r2, r3, [sl]
 8008068:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800806c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008070:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8008074:	e73a      	b.n	8007eec <__ieee754_rem_pio2+0x284>
 8008076:	bf00      	nop
 8008078:	41700000 	.word	0x41700000
 800807c:	08008d48 	.word	0x08008d48

08008080 <__kernel_cos>:
 8008080:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008084:	ec57 6b10 	vmov	r6, r7, d0
 8008088:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800808c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8008090:	ed8d 1b00 	vstr	d1, [sp]
 8008094:	da07      	bge.n	80080a6 <__kernel_cos+0x26>
 8008096:	ee10 0a10 	vmov	r0, s0
 800809a:	4639      	mov	r1, r7
 800809c:	f7f8 fc16 	bl	80008cc <__aeabi_d2iz>
 80080a0:	2800      	cmp	r0, #0
 80080a2:	f000 8088 	beq.w	80081b6 <__kernel_cos+0x136>
 80080a6:	4632      	mov	r2, r6
 80080a8:	463b      	mov	r3, r7
 80080aa:	4630      	mov	r0, r6
 80080ac:	4639      	mov	r1, r7
 80080ae:	f7f8 f89f 	bl	80001f0 <__aeabi_dmul>
 80080b2:	4b51      	ldr	r3, [pc, #324]	; (80081f8 <__kernel_cos+0x178>)
 80080b4:	2200      	movs	r2, #0
 80080b6:	4604      	mov	r4, r0
 80080b8:	460d      	mov	r5, r1
 80080ba:	f7f8 f899 	bl	80001f0 <__aeabi_dmul>
 80080be:	a340      	add	r3, pc, #256	; (adr r3, 80081c0 <__kernel_cos+0x140>)
 80080c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c4:	4682      	mov	sl, r0
 80080c6:	468b      	mov	fp, r1
 80080c8:	4620      	mov	r0, r4
 80080ca:	4629      	mov	r1, r5
 80080cc:	f7f8 f890 	bl	80001f0 <__aeabi_dmul>
 80080d0:	a33d      	add	r3, pc, #244	; (adr r3, 80081c8 <__kernel_cos+0x148>)
 80080d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d6:	f7f8 f9bb 	bl	8000450 <__adddf3>
 80080da:	4622      	mov	r2, r4
 80080dc:	462b      	mov	r3, r5
 80080de:	f7f8 f887 	bl	80001f0 <__aeabi_dmul>
 80080e2:	a33b      	add	r3, pc, #236	; (adr r3, 80081d0 <__kernel_cos+0x150>)
 80080e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e8:	f7f8 f9b0 	bl	800044c <__aeabi_dsub>
 80080ec:	4622      	mov	r2, r4
 80080ee:	462b      	mov	r3, r5
 80080f0:	f7f8 f87e 	bl	80001f0 <__aeabi_dmul>
 80080f4:	a338      	add	r3, pc, #224	; (adr r3, 80081d8 <__kernel_cos+0x158>)
 80080f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080fa:	f7f8 f9a9 	bl	8000450 <__adddf3>
 80080fe:	4622      	mov	r2, r4
 8008100:	462b      	mov	r3, r5
 8008102:	f7f8 f875 	bl	80001f0 <__aeabi_dmul>
 8008106:	a336      	add	r3, pc, #216	; (adr r3, 80081e0 <__kernel_cos+0x160>)
 8008108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810c:	f7f8 f99e 	bl	800044c <__aeabi_dsub>
 8008110:	4622      	mov	r2, r4
 8008112:	462b      	mov	r3, r5
 8008114:	f7f8 f86c 	bl	80001f0 <__aeabi_dmul>
 8008118:	a333      	add	r3, pc, #204	; (adr r3, 80081e8 <__kernel_cos+0x168>)
 800811a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800811e:	f7f8 f997 	bl	8000450 <__adddf3>
 8008122:	4622      	mov	r2, r4
 8008124:	462b      	mov	r3, r5
 8008126:	f7f8 f863 	bl	80001f0 <__aeabi_dmul>
 800812a:	4622      	mov	r2, r4
 800812c:	462b      	mov	r3, r5
 800812e:	f7f8 f85f 	bl	80001f0 <__aeabi_dmul>
 8008132:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008136:	4604      	mov	r4, r0
 8008138:	460d      	mov	r5, r1
 800813a:	4630      	mov	r0, r6
 800813c:	4639      	mov	r1, r7
 800813e:	f7f8 f857 	bl	80001f0 <__aeabi_dmul>
 8008142:	460b      	mov	r3, r1
 8008144:	4602      	mov	r2, r0
 8008146:	4629      	mov	r1, r5
 8008148:	4620      	mov	r0, r4
 800814a:	f7f8 f97f 	bl	800044c <__aeabi_dsub>
 800814e:	4b2b      	ldr	r3, [pc, #172]	; (80081fc <__kernel_cos+0x17c>)
 8008150:	4598      	cmp	r8, r3
 8008152:	4606      	mov	r6, r0
 8008154:	460f      	mov	r7, r1
 8008156:	dc10      	bgt.n	800817a <__kernel_cos+0xfa>
 8008158:	4602      	mov	r2, r0
 800815a:	460b      	mov	r3, r1
 800815c:	4650      	mov	r0, sl
 800815e:	4659      	mov	r1, fp
 8008160:	f7f8 f974 	bl	800044c <__aeabi_dsub>
 8008164:	460b      	mov	r3, r1
 8008166:	4926      	ldr	r1, [pc, #152]	; (8008200 <__kernel_cos+0x180>)
 8008168:	4602      	mov	r2, r0
 800816a:	2000      	movs	r0, #0
 800816c:	f7f8 f96e 	bl	800044c <__aeabi_dsub>
 8008170:	ec41 0b10 	vmov	d0, r0, r1
 8008174:	b003      	add	sp, #12
 8008176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800817a:	4b22      	ldr	r3, [pc, #136]	; (8008204 <__kernel_cos+0x184>)
 800817c:	4920      	ldr	r1, [pc, #128]	; (8008200 <__kernel_cos+0x180>)
 800817e:	4598      	cmp	r8, r3
 8008180:	bfcc      	ite	gt
 8008182:	4d21      	ldrgt	r5, [pc, #132]	; (8008208 <__kernel_cos+0x188>)
 8008184:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8008188:	2400      	movs	r4, #0
 800818a:	4622      	mov	r2, r4
 800818c:	462b      	mov	r3, r5
 800818e:	2000      	movs	r0, #0
 8008190:	f7f8 f95c 	bl	800044c <__aeabi_dsub>
 8008194:	4622      	mov	r2, r4
 8008196:	4680      	mov	r8, r0
 8008198:	4689      	mov	r9, r1
 800819a:	462b      	mov	r3, r5
 800819c:	4650      	mov	r0, sl
 800819e:	4659      	mov	r1, fp
 80081a0:	f7f8 f954 	bl	800044c <__aeabi_dsub>
 80081a4:	4632      	mov	r2, r6
 80081a6:	463b      	mov	r3, r7
 80081a8:	f7f8 f950 	bl	800044c <__aeabi_dsub>
 80081ac:	4602      	mov	r2, r0
 80081ae:	460b      	mov	r3, r1
 80081b0:	4640      	mov	r0, r8
 80081b2:	4649      	mov	r1, r9
 80081b4:	e7da      	b.n	800816c <__kernel_cos+0xec>
 80081b6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80081f0 <__kernel_cos+0x170>
 80081ba:	e7db      	b.n	8008174 <__kernel_cos+0xf4>
 80081bc:	f3af 8000 	nop.w
 80081c0:	be8838d4 	.word	0xbe8838d4
 80081c4:	bda8fae9 	.word	0xbda8fae9
 80081c8:	bdb4b1c4 	.word	0xbdb4b1c4
 80081cc:	3e21ee9e 	.word	0x3e21ee9e
 80081d0:	809c52ad 	.word	0x809c52ad
 80081d4:	3e927e4f 	.word	0x3e927e4f
 80081d8:	19cb1590 	.word	0x19cb1590
 80081dc:	3efa01a0 	.word	0x3efa01a0
 80081e0:	16c15177 	.word	0x16c15177
 80081e4:	3f56c16c 	.word	0x3f56c16c
 80081e8:	5555554c 	.word	0x5555554c
 80081ec:	3fa55555 	.word	0x3fa55555
 80081f0:	00000000 	.word	0x00000000
 80081f4:	3ff00000 	.word	0x3ff00000
 80081f8:	3fe00000 	.word	0x3fe00000
 80081fc:	3fd33332 	.word	0x3fd33332
 8008200:	3ff00000 	.word	0x3ff00000
 8008204:	3fe90000 	.word	0x3fe90000
 8008208:	3fd20000 	.word	0x3fd20000
 800820c:	00000000 	.word	0x00000000

08008210 <__kernel_rem_pio2>:
 8008210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008214:	ed2d 8b02 	vpush	{d8}
 8008218:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800821c:	f112 0f14 	cmn.w	r2, #20
 8008220:	9308      	str	r3, [sp, #32]
 8008222:	9101      	str	r1, [sp, #4]
 8008224:	4bc4      	ldr	r3, [pc, #784]	; (8008538 <__kernel_rem_pio2+0x328>)
 8008226:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8008228:	900b      	str	r0, [sp, #44]	; 0x2c
 800822a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800822e:	9302      	str	r3, [sp, #8]
 8008230:	9b08      	ldr	r3, [sp, #32]
 8008232:	f103 33ff 	add.w	r3, r3, #4294967295
 8008236:	bfa8      	it	ge
 8008238:	1ed4      	subge	r4, r2, #3
 800823a:	9306      	str	r3, [sp, #24]
 800823c:	bfb2      	itee	lt
 800823e:	2400      	movlt	r4, #0
 8008240:	2318      	movge	r3, #24
 8008242:	fb94 f4f3 	sdivge	r4, r4, r3
 8008246:	f06f 0317 	mvn.w	r3, #23
 800824a:	fb04 3303 	mla	r3, r4, r3, r3
 800824e:	eb03 0a02 	add.w	sl, r3, r2
 8008252:	9b02      	ldr	r3, [sp, #8]
 8008254:	9a06      	ldr	r2, [sp, #24]
 8008256:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8008528 <__kernel_rem_pio2+0x318>
 800825a:	eb03 0802 	add.w	r8, r3, r2
 800825e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008260:	1aa7      	subs	r7, r4, r2
 8008262:	ae22      	add	r6, sp, #136	; 0x88
 8008264:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008268:	2500      	movs	r5, #0
 800826a:	4545      	cmp	r5, r8
 800826c:	dd13      	ble.n	8008296 <__kernel_rem_pio2+0x86>
 800826e:	9b08      	ldr	r3, [sp, #32]
 8008270:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8008528 <__kernel_rem_pio2+0x318>
 8008274:	aa22      	add	r2, sp, #136	; 0x88
 8008276:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800827a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800827e:	f04f 0800 	mov.w	r8, #0
 8008282:	9b02      	ldr	r3, [sp, #8]
 8008284:	4598      	cmp	r8, r3
 8008286:	dc2f      	bgt.n	80082e8 <__kernel_rem_pio2+0xd8>
 8008288:	ed8d 8b04 	vstr	d8, [sp, #16]
 800828c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8008290:	462f      	mov	r7, r5
 8008292:	2600      	movs	r6, #0
 8008294:	e01b      	b.n	80082ce <__kernel_rem_pio2+0xbe>
 8008296:	42ef      	cmn	r7, r5
 8008298:	d407      	bmi.n	80082aa <__kernel_rem_pio2+0x9a>
 800829a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800829e:	f7f8 fa23 	bl	80006e8 <__aeabi_i2d>
 80082a2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80082a6:	3501      	adds	r5, #1
 80082a8:	e7df      	b.n	800826a <__kernel_rem_pio2+0x5a>
 80082aa:	ec51 0b18 	vmov	r0, r1, d8
 80082ae:	e7f8      	b.n	80082a2 <__kernel_rem_pio2+0x92>
 80082b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082b4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80082b8:	f7f7 ff9a 	bl	80001f0 <__aeabi_dmul>
 80082bc:	4602      	mov	r2, r0
 80082be:	460b      	mov	r3, r1
 80082c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082c4:	f7f8 f8c4 	bl	8000450 <__adddf3>
 80082c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80082cc:	3601      	adds	r6, #1
 80082ce:	9b06      	ldr	r3, [sp, #24]
 80082d0:	429e      	cmp	r6, r3
 80082d2:	f1a7 0708 	sub.w	r7, r7, #8
 80082d6:	ddeb      	ble.n	80082b0 <__kernel_rem_pio2+0xa0>
 80082d8:	ed9d 7b04 	vldr	d7, [sp, #16]
 80082dc:	f108 0801 	add.w	r8, r8, #1
 80082e0:	ecab 7b02 	vstmia	fp!, {d7}
 80082e4:	3508      	adds	r5, #8
 80082e6:	e7cc      	b.n	8008282 <__kernel_rem_pio2+0x72>
 80082e8:	9b02      	ldr	r3, [sp, #8]
 80082ea:	aa0e      	add	r2, sp, #56	; 0x38
 80082ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80082f0:	930d      	str	r3, [sp, #52]	; 0x34
 80082f2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80082f4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80082f8:	9c02      	ldr	r4, [sp, #8]
 80082fa:	930c      	str	r3, [sp, #48]	; 0x30
 80082fc:	00e3      	lsls	r3, r4, #3
 80082fe:	930a      	str	r3, [sp, #40]	; 0x28
 8008300:	ab9a      	add	r3, sp, #616	; 0x268
 8008302:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008306:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800830a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800830e:	ab72      	add	r3, sp, #456	; 0x1c8
 8008310:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8008314:	46c3      	mov	fp, r8
 8008316:	46a1      	mov	r9, r4
 8008318:	f1b9 0f00 	cmp.w	r9, #0
 800831c:	f1a5 0508 	sub.w	r5, r5, #8
 8008320:	dc77      	bgt.n	8008412 <__kernel_rem_pio2+0x202>
 8008322:	ec47 6b10 	vmov	d0, r6, r7
 8008326:	4650      	mov	r0, sl
 8008328:	f000 fc0a 	bl	8008b40 <scalbn>
 800832c:	ec57 6b10 	vmov	r6, r7, d0
 8008330:	2200      	movs	r2, #0
 8008332:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008336:	ee10 0a10 	vmov	r0, s0
 800833a:	4639      	mov	r1, r7
 800833c:	f7f7 ff58 	bl	80001f0 <__aeabi_dmul>
 8008340:	ec41 0b10 	vmov	d0, r0, r1
 8008344:	f000 fb7c 	bl	8008a40 <floor>
 8008348:	4b7c      	ldr	r3, [pc, #496]	; (800853c <__kernel_rem_pio2+0x32c>)
 800834a:	ec51 0b10 	vmov	r0, r1, d0
 800834e:	2200      	movs	r2, #0
 8008350:	f7f7 ff4e 	bl	80001f0 <__aeabi_dmul>
 8008354:	4602      	mov	r2, r0
 8008356:	460b      	mov	r3, r1
 8008358:	4630      	mov	r0, r6
 800835a:	4639      	mov	r1, r7
 800835c:	f7f8 f876 	bl	800044c <__aeabi_dsub>
 8008360:	460f      	mov	r7, r1
 8008362:	4606      	mov	r6, r0
 8008364:	f7f8 fab2 	bl	80008cc <__aeabi_d2iz>
 8008368:	9004      	str	r0, [sp, #16]
 800836a:	f7f8 f9bd 	bl	80006e8 <__aeabi_i2d>
 800836e:	4602      	mov	r2, r0
 8008370:	460b      	mov	r3, r1
 8008372:	4630      	mov	r0, r6
 8008374:	4639      	mov	r1, r7
 8008376:	f7f8 f869 	bl	800044c <__aeabi_dsub>
 800837a:	f1ba 0f00 	cmp.w	sl, #0
 800837e:	4606      	mov	r6, r0
 8008380:	460f      	mov	r7, r1
 8008382:	dd6d      	ble.n	8008460 <__kernel_rem_pio2+0x250>
 8008384:	1e62      	subs	r2, r4, #1
 8008386:	ab0e      	add	r3, sp, #56	; 0x38
 8008388:	9d04      	ldr	r5, [sp, #16]
 800838a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800838e:	f1ca 0118 	rsb	r1, sl, #24
 8008392:	fa40 f301 	asr.w	r3, r0, r1
 8008396:	441d      	add	r5, r3
 8008398:	408b      	lsls	r3, r1
 800839a:	1ac0      	subs	r0, r0, r3
 800839c:	ab0e      	add	r3, sp, #56	; 0x38
 800839e:	9504      	str	r5, [sp, #16]
 80083a0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80083a4:	f1ca 0317 	rsb	r3, sl, #23
 80083a8:	fa40 fb03 	asr.w	fp, r0, r3
 80083ac:	f1bb 0f00 	cmp.w	fp, #0
 80083b0:	dd65      	ble.n	800847e <__kernel_rem_pio2+0x26e>
 80083b2:	9b04      	ldr	r3, [sp, #16]
 80083b4:	2200      	movs	r2, #0
 80083b6:	3301      	adds	r3, #1
 80083b8:	9304      	str	r3, [sp, #16]
 80083ba:	4615      	mov	r5, r2
 80083bc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80083c0:	4294      	cmp	r4, r2
 80083c2:	f300 809c 	bgt.w	80084fe <__kernel_rem_pio2+0x2ee>
 80083c6:	f1ba 0f00 	cmp.w	sl, #0
 80083ca:	dd07      	ble.n	80083dc <__kernel_rem_pio2+0x1cc>
 80083cc:	f1ba 0f01 	cmp.w	sl, #1
 80083d0:	f000 80c0 	beq.w	8008554 <__kernel_rem_pio2+0x344>
 80083d4:	f1ba 0f02 	cmp.w	sl, #2
 80083d8:	f000 80c6 	beq.w	8008568 <__kernel_rem_pio2+0x358>
 80083dc:	f1bb 0f02 	cmp.w	fp, #2
 80083e0:	d14d      	bne.n	800847e <__kernel_rem_pio2+0x26e>
 80083e2:	4632      	mov	r2, r6
 80083e4:	463b      	mov	r3, r7
 80083e6:	4956      	ldr	r1, [pc, #344]	; (8008540 <__kernel_rem_pio2+0x330>)
 80083e8:	2000      	movs	r0, #0
 80083ea:	f7f8 f82f 	bl	800044c <__aeabi_dsub>
 80083ee:	4606      	mov	r6, r0
 80083f0:	460f      	mov	r7, r1
 80083f2:	2d00      	cmp	r5, #0
 80083f4:	d043      	beq.n	800847e <__kernel_rem_pio2+0x26e>
 80083f6:	4650      	mov	r0, sl
 80083f8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8008530 <__kernel_rem_pio2+0x320>
 80083fc:	f000 fba0 	bl	8008b40 <scalbn>
 8008400:	4630      	mov	r0, r6
 8008402:	4639      	mov	r1, r7
 8008404:	ec53 2b10 	vmov	r2, r3, d0
 8008408:	f7f8 f820 	bl	800044c <__aeabi_dsub>
 800840c:	4606      	mov	r6, r0
 800840e:	460f      	mov	r7, r1
 8008410:	e035      	b.n	800847e <__kernel_rem_pio2+0x26e>
 8008412:	4b4c      	ldr	r3, [pc, #304]	; (8008544 <__kernel_rem_pio2+0x334>)
 8008414:	2200      	movs	r2, #0
 8008416:	4630      	mov	r0, r6
 8008418:	4639      	mov	r1, r7
 800841a:	f7f7 fee9 	bl	80001f0 <__aeabi_dmul>
 800841e:	f7f8 fa55 	bl	80008cc <__aeabi_d2iz>
 8008422:	f7f8 f961 	bl	80006e8 <__aeabi_i2d>
 8008426:	4602      	mov	r2, r0
 8008428:	460b      	mov	r3, r1
 800842a:	ec43 2b18 	vmov	d8, r2, r3
 800842e:	4b46      	ldr	r3, [pc, #280]	; (8008548 <__kernel_rem_pio2+0x338>)
 8008430:	2200      	movs	r2, #0
 8008432:	f7f7 fedd 	bl	80001f0 <__aeabi_dmul>
 8008436:	4602      	mov	r2, r0
 8008438:	460b      	mov	r3, r1
 800843a:	4630      	mov	r0, r6
 800843c:	4639      	mov	r1, r7
 800843e:	f7f8 f805 	bl	800044c <__aeabi_dsub>
 8008442:	f7f8 fa43 	bl	80008cc <__aeabi_d2iz>
 8008446:	e9d5 2300 	ldrd	r2, r3, [r5]
 800844a:	f84b 0b04 	str.w	r0, [fp], #4
 800844e:	ec51 0b18 	vmov	r0, r1, d8
 8008452:	f7f7 fffd 	bl	8000450 <__adddf3>
 8008456:	f109 39ff 	add.w	r9, r9, #4294967295
 800845a:	4606      	mov	r6, r0
 800845c:	460f      	mov	r7, r1
 800845e:	e75b      	b.n	8008318 <__kernel_rem_pio2+0x108>
 8008460:	d106      	bne.n	8008470 <__kernel_rem_pio2+0x260>
 8008462:	1e63      	subs	r3, r4, #1
 8008464:	aa0e      	add	r2, sp, #56	; 0x38
 8008466:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800846a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800846e:	e79d      	b.n	80083ac <__kernel_rem_pio2+0x19c>
 8008470:	4b36      	ldr	r3, [pc, #216]	; (800854c <__kernel_rem_pio2+0x33c>)
 8008472:	2200      	movs	r2, #0
 8008474:	f7f8 fa16 	bl	80008a4 <__aeabi_dcmpge>
 8008478:	2800      	cmp	r0, #0
 800847a:	d13d      	bne.n	80084f8 <__kernel_rem_pio2+0x2e8>
 800847c:	4683      	mov	fp, r0
 800847e:	2200      	movs	r2, #0
 8008480:	2300      	movs	r3, #0
 8008482:	4630      	mov	r0, r6
 8008484:	4639      	mov	r1, r7
 8008486:	f7f8 f9ef 	bl	8000868 <__aeabi_dcmpeq>
 800848a:	2800      	cmp	r0, #0
 800848c:	f000 80c0 	beq.w	8008610 <__kernel_rem_pio2+0x400>
 8008490:	1e65      	subs	r5, r4, #1
 8008492:	462b      	mov	r3, r5
 8008494:	2200      	movs	r2, #0
 8008496:	9902      	ldr	r1, [sp, #8]
 8008498:	428b      	cmp	r3, r1
 800849a:	da6c      	bge.n	8008576 <__kernel_rem_pio2+0x366>
 800849c:	2a00      	cmp	r2, #0
 800849e:	f000 8089 	beq.w	80085b4 <__kernel_rem_pio2+0x3a4>
 80084a2:	ab0e      	add	r3, sp, #56	; 0x38
 80084a4:	f1aa 0a18 	sub.w	sl, sl, #24
 80084a8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	f000 80ad 	beq.w	800860c <__kernel_rem_pio2+0x3fc>
 80084b2:	4650      	mov	r0, sl
 80084b4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8008530 <__kernel_rem_pio2+0x320>
 80084b8:	f000 fb42 	bl	8008b40 <scalbn>
 80084bc:	ab9a      	add	r3, sp, #616	; 0x268
 80084be:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80084c2:	ec57 6b10 	vmov	r6, r7, d0
 80084c6:	00ec      	lsls	r4, r5, #3
 80084c8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 80084cc:	46aa      	mov	sl, r5
 80084ce:	f1ba 0f00 	cmp.w	sl, #0
 80084d2:	f280 80d6 	bge.w	8008682 <__kernel_rem_pio2+0x472>
 80084d6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8008528 <__kernel_rem_pio2+0x318>
 80084da:	462e      	mov	r6, r5
 80084dc:	2e00      	cmp	r6, #0
 80084de:	f2c0 8104 	blt.w	80086ea <__kernel_rem_pio2+0x4da>
 80084e2:	ab72      	add	r3, sp, #456	; 0x1c8
 80084e4:	ed8d 8b06 	vstr	d8, [sp, #24]
 80084e8:	f8df a064 	ldr.w	sl, [pc, #100]	; 8008550 <__kernel_rem_pio2+0x340>
 80084ec:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80084f0:	f04f 0800 	mov.w	r8, #0
 80084f4:	1baf      	subs	r7, r5, r6
 80084f6:	e0ea      	b.n	80086ce <__kernel_rem_pio2+0x4be>
 80084f8:	f04f 0b02 	mov.w	fp, #2
 80084fc:	e759      	b.n	80083b2 <__kernel_rem_pio2+0x1a2>
 80084fe:	f8d8 3000 	ldr.w	r3, [r8]
 8008502:	b955      	cbnz	r5, 800851a <__kernel_rem_pio2+0x30a>
 8008504:	b123      	cbz	r3, 8008510 <__kernel_rem_pio2+0x300>
 8008506:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800850a:	f8c8 3000 	str.w	r3, [r8]
 800850e:	2301      	movs	r3, #1
 8008510:	3201      	adds	r2, #1
 8008512:	f108 0804 	add.w	r8, r8, #4
 8008516:	461d      	mov	r5, r3
 8008518:	e752      	b.n	80083c0 <__kernel_rem_pio2+0x1b0>
 800851a:	1acb      	subs	r3, r1, r3
 800851c:	f8c8 3000 	str.w	r3, [r8]
 8008520:	462b      	mov	r3, r5
 8008522:	e7f5      	b.n	8008510 <__kernel_rem_pio2+0x300>
 8008524:	f3af 8000 	nop.w
	...
 8008534:	3ff00000 	.word	0x3ff00000
 8008538:	08008e90 	.word	0x08008e90
 800853c:	40200000 	.word	0x40200000
 8008540:	3ff00000 	.word	0x3ff00000
 8008544:	3e700000 	.word	0x3e700000
 8008548:	41700000 	.word	0x41700000
 800854c:	3fe00000 	.word	0x3fe00000
 8008550:	08008e50 	.word	0x08008e50
 8008554:	1e62      	subs	r2, r4, #1
 8008556:	ab0e      	add	r3, sp, #56	; 0x38
 8008558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800855c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008560:	a90e      	add	r1, sp, #56	; 0x38
 8008562:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008566:	e739      	b.n	80083dc <__kernel_rem_pio2+0x1cc>
 8008568:	1e62      	subs	r2, r4, #1
 800856a:	ab0e      	add	r3, sp, #56	; 0x38
 800856c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008570:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008574:	e7f4      	b.n	8008560 <__kernel_rem_pio2+0x350>
 8008576:	a90e      	add	r1, sp, #56	; 0x38
 8008578:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800857c:	3b01      	subs	r3, #1
 800857e:	430a      	orrs	r2, r1
 8008580:	e789      	b.n	8008496 <__kernel_rem_pio2+0x286>
 8008582:	3301      	adds	r3, #1
 8008584:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008588:	2900      	cmp	r1, #0
 800858a:	d0fa      	beq.n	8008582 <__kernel_rem_pio2+0x372>
 800858c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800858e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8008592:	446a      	add	r2, sp
 8008594:	3a98      	subs	r2, #152	; 0x98
 8008596:	920a      	str	r2, [sp, #40]	; 0x28
 8008598:	9a08      	ldr	r2, [sp, #32]
 800859a:	18e3      	adds	r3, r4, r3
 800859c:	18a5      	adds	r5, r4, r2
 800859e:	aa22      	add	r2, sp, #136	; 0x88
 80085a0:	f104 0801 	add.w	r8, r4, #1
 80085a4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80085a8:	9304      	str	r3, [sp, #16]
 80085aa:	9b04      	ldr	r3, [sp, #16]
 80085ac:	4543      	cmp	r3, r8
 80085ae:	da04      	bge.n	80085ba <__kernel_rem_pio2+0x3aa>
 80085b0:	461c      	mov	r4, r3
 80085b2:	e6a3      	b.n	80082fc <__kernel_rem_pio2+0xec>
 80085b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80085b6:	2301      	movs	r3, #1
 80085b8:	e7e4      	b.n	8008584 <__kernel_rem_pio2+0x374>
 80085ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085bc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80085c0:	f7f8 f892 	bl	80006e8 <__aeabi_i2d>
 80085c4:	e8e5 0102 	strd	r0, r1, [r5], #8
 80085c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085ca:	46ab      	mov	fp, r5
 80085cc:	461c      	mov	r4, r3
 80085ce:	f04f 0900 	mov.w	r9, #0
 80085d2:	2600      	movs	r6, #0
 80085d4:	2700      	movs	r7, #0
 80085d6:	9b06      	ldr	r3, [sp, #24]
 80085d8:	4599      	cmp	r9, r3
 80085da:	dd06      	ble.n	80085ea <__kernel_rem_pio2+0x3da>
 80085dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085de:	e8e3 6702 	strd	r6, r7, [r3], #8
 80085e2:	f108 0801 	add.w	r8, r8, #1
 80085e6:	930a      	str	r3, [sp, #40]	; 0x28
 80085e8:	e7df      	b.n	80085aa <__kernel_rem_pio2+0x39a>
 80085ea:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80085ee:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80085f2:	f7f7 fdfd 	bl	80001f0 <__aeabi_dmul>
 80085f6:	4602      	mov	r2, r0
 80085f8:	460b      	mov	r3, r1
 80085fa:	4630      	mov	r0, r6
 80085fc:	4639      	mov	r1, r7
 80085fe:	f7f7 ff27 	bl	8000450 <__adddf3>
 8008602:	f109 0901 	add.w	r9, r9, #1
 8008606:	4606      	mov	r6, r0
 8008608:	460f      	mov	r7, r1
 800860a:	e7e4      	b.n	80085d6 <__kernel_rem_pio2+0x3c6>
 800860c:	3d01      	subs	r5, #1
 800860e:	e748      	b.n	80084a2 <__kernel_rem_pio2+0x292>
 8008610:	ec47 6b10 	vmov	d0, r6, r7
 8008614:	f1ca 0000 	rsb	r0, sl, #0
 8008618:	f000 fa92 	bl	8008b40 <scalbn>
 800861c:	ec57 6b10 	vmov	r6, r7, d0
 8008620:	4ba0      	ldr	r3, [pc, #640]	; (80088a4 <__kernel_rem_pio2+0x694>)
 8008622:	ee10 0a10 	vmov	r0, s0
 8008626:	2200      	movs	r2, #0
 8008628:	4639      	mov	r1, r7
 800862a:	f7f8 f93b 	bl	80008a4 <__aeabi_dcmpge>
 800862e:	b1f8      	cbz	r0, 8008670 <__kernel_rem_pio2+0x460>
 8008630:	4b9d      	ldr	r3, [pc, #628]	; (80088a8 <__kernel_rem_pio2+0x698>)
 8008632:	2200      	movs	r2, #0
 8008634:	4630      	mov	r0, r6
 8008636:	4639      	mov	r1, r7
 8008638:	f7f7 fdda 	bl	80001f0 <__aeabi_dmul>
 800863c:	f7f8 f946 	bl	80008cc <__aeabi_d2iz>
 8008640:	4680      	mov	r8, r0
 8008642:	f7f8 f851 	bl	80006e8 <__aeabi_i2d>
 8008646:	4b97      	ldr	r3, [pc, #604]	; (80088a4 <__kernel_rem_pio2+0x694>)
 8008648:	2200      	movs	r2, #0
 800864a:	f7f7 fdd1 	bl	80001f0 <__aeabi_dmul>
 800864e:	460b      	mov	r3, r1
 8008650:	4602      	mov	r2, r0
 8008652:	4639      	mov	r1, r7
 8008654:	4630      	mov	r0, r6
 8008656:	f7f7 fef9 	bl	800044c <__aeabi_dsub>
 800865a:	f7f8 f937 	bl	80008cc <__aeabi_d2iz>
 800865e:	1c65      	adds	r5, r4, #1
 8008660:	ab0e      	add	r3, sp, #56	; 0x38
 8008662:	f10a 0a18 	add.w	sl, sl, #24
 8008666:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800866a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800866e:	e720      	b.n	80084b2 <__kernel_rem_pio2+0x2a2>
 8008670:	4630      	mov	r0, r6
 8008672:	4639      	mov	r1, r7
 8008674:	f7f8 f92a 	bl	80008cc <__aeabi_d2iz>
 8008678:	ab0e      	add	r3, sp, #56	; 0x38
 800867a:	4625      	mov	r5, r4
 800867c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008680:	e717      	b.n	80084b2 <__kernel_rem_pio2+0x2a2>
 8008682:	ab0e      	add	r3, sp, #56	; 0x38
 8008684:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8008688:	f7f8 f82e 	bl	80006e8 <__aeabi_i2d>
 800868c:	4632      	mov	r2, r6
 800868e:	463b      	mov	r3, r7
 8008690:	f7f7 fdae 	bl	80001f0 <__aeabi_dmul>
 8008694:	4b84      	ldr	r3, [pc, #528]	; (80088a8 <__kernel_rem_pio2+0x698>)
 8008696:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800869a:	2200      	movs	r2, #0
 800869c:	4630      	mov	r0, r6
 800869e:	4639      	mov	r1, r7
 80086a0:	f7f7 fda6 	bl	80001f0 <__aeabi_dmul>
 80086a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80086a8:	4606      	mov	r6, r0
 80086aa:	460f      	mov	r7, r1
 80086ac:	e70f      	b.n	80084ce <__kernel_rem_pio2+0x2be>
 80086ae:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80086b2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80086b6:	f7f7 fd9b 	bl	80001f0 <__aeabi_dmul>
 80086ba:	4602      	mov	r2, r0
 80086bc:	460b      	mov	r3, r1
 80086be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80086c2:	f7f7 fec5 	bl	8000450 <__adddf3>
 80086c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80086ca:	f108 0801 	add.w	r8, r8, #1
 80086ce:	9b02      	ldr	r3, [sp, #8]
 80086d0:	4598      	cmp	r8, r3
 80086d2:	dc01      	bgt.n	80086d8 <__kernel_rem_pio2+0x4c8>
 80086d4:	45b8      	cmp	r8, r7
 80086d6:	ddea      	ble.n	80086ae <__kernel_rem_pio2+0x49e>
 80086d8:	ed9d 7b06 	vldr	d7, [sp, #24]
 80086dc:	ab4a      	add	r3, sp, #296	; 0x128
 80086de:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80086e2:	ed87 7b00 	vstr	d7, [r7]
 80086e6:	3e01      	subs	r6, #1
 80086e8:	e6f8      	b.n	80084dc <__kernel_rem_pio2+0x2cc>
 80086ea:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80086ec:	2b02      	cmp	r3, #2
 80086ee:	dc0b      	bgt.n	8008708 <__kernel_rem_pio2+0x4f8>
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	dc35      	bgt.n	8008760 <__kernel_rem_pio2+0x550>
 80086f4:	d059      	beq.n	80087aa <__kernel_rem_pio2+0x59a>
 80086f6:	9b04      	ldr	r3, [sp, #16]
 80086f8:	f003 0007 	and.w	r0, r3, #7
 80086fc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8008700:	ecbd 8b02 	vpop	{d8}
 8008704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008708:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800870a:	2b03      	cmp	r3, #3
 800870c:	d1f3      	bne.n	80086f6 <__kernel_rem_pio2+0x4e6>
 800870e:	ab4a      	add	r3, sp, #296	; 0x128
 8008710:	4423      	add	r3, r4
 8008712:	9306      	str	r3, [sp, #24]
 8008714:	461c      	mov	r4, r3
 8008716:	469a      	mov	sl, r3
 8008718:	9502      	str	r5, [sp, #8]
 800871a:	9b02      	ldr	r3, [sp, #8]
 800871c:	2b00      	cmp	r3, #0
 800871e:	f1aa 0a08 	sub.w	sl, sl, #8
 8008722:	dc6b      	bgt.n	80087fc <__kernel_rem_pio2+0x5ec>
 8008724:	46aa      	mov	sl, r5
 8008726:	f1ba 0f01 	cmp.w	sl, #1
 800872a:	f1a4 0408 	sub.w	r4, r4, #8
 800872e:	f300 8085 	bgt.w	800883c <__kernel_rem_pio2+0x62c>
 8008732:	9c06      	ldr	r4, [sp, #24]
 8008734:	2000      	movs	r0, #0
 8008736:	3408      	adds	r4, #8
 8008738:	2100      	movs	r1, #0
 800873a:	2d01      	cmp	r5, #1
 800873c:	f300 809d 	bgt.w	800887a <__kernel_rem_pio2+0x66a>
 8008740:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8008744:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8008748:	f1bb 0f00 	cmp.w	fp, #0
 800874c:	f040 809b 	bne.w	8008886 <__kernel_rem_pio2+0x676>
 8008750:	9b01      	ldr	r3, [sp, #4]
 8008752:	e9c3 5600 	strd	r5, r6, [r3]
 8008756:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800875a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800875e:	e7ca      	b.n	80086f6 <__kernel_rem_pio2+0x4e6>
 8008760:	3408      	adds	r4, #8
 8008762:	ab4a      	add	r3, sp, #296	; 0x128
 8008764:	441c      	add	r4, r3
 8008766:	462e      	mov	r6, r5
 8008768:	2000      	movs	r0, #0
 800876a:	2100      	movs	r1, #0
 800876c:	2e00      	cmp	r6, #0
 800876e:	da36      	bge.n	80087de <__kernel_rem_pio2+0x5ce>
 8008770:	f1bb 0f00 	cmp.w	fp, #0
 8008774:	d039      	beq.n	80087ea <__kernel_rem_pio2+0x5da>
 8008776:	4602      	mov	r2, r0
 8008778:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800877c:	9c01      	ldr	r4, [sp, #4]
 800877e:	e9c4 2300 	strd	r2, r3, [r4]
 8008782:	4602      	mov	r2, r0
 8008784:	460b      	mov	r3, r1
 8008786:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800878a:	f7f7 fe5f 	bl	800044c <__aeabi_dsub>
 800878e:	ae4c      	add	r6, sp, #304	; 0x130
 8008790:	2401      	movs	r4, #1
 8008792:	42a5      	cmp	r5, r4
 8008794:	da2c      	bge.n	80087f0 <__kernel_rem_pio2+0x5e0>
 8008796:	f1bb 0f00 	cmp.w	fp, #0
 800879a:	d002      	beq.n	80087a2 <__kernel_rem_pio2+0x592>
 800879c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80087a0:	4619      	mov	r1, r3
 80087a2:	9b01      	ldr	r3, [sp, #4]
 80087a4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80087a8:	e7a5      	b.n	80086f6 <__kernel_rem_pio2+0x4e6>
 80087aa:	f504 731a 	add.w	r3, r4, #616	; 0x268
 80087ae:	eb0d 0403 	add.w	r4, sp, r3
 80087b2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80087b6:	2000      	movs	r0, #0
 80087b8:	2100      	movs	r1, #0
 80087ba:	2d00      	cmp	r5, #0
 80087bc:	da09      	bge.n	80087d2 <__kernel_rem_pio2+0x5c2>
 80087be:	f1bb 0f00 	cmp.w	fp, #0
 80087c2:	d002      	beq.n	80087ca <__kernel_rem_pio2+0x5ba>
 80087c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80087c8:	4619      	mov	r1, r3
 80087ca:	9b01      	ldr	r3, [sp, #4]
 80087cc:	e9c3 0100 	strd	r0, r1, [r3]
 80087d0:	e791      	b.n	80086f6 <__kernel_rem_pio2+0x4e6>
 80087d2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80087d6:	f7f7 fe3b 	bl	8000450 <__adddf3>
 80087da:	3d01      	subs	r5, #1
 80087dc:	e7ed      	b.n	80087ba <__kernel_rem_pio2+0x5aa>
 80087de:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80087e2:	f7f7 fe35 	bl	8000450 <__adddf3>
 80087e6:	3e01      	subs	r6, #1
 80087e8:	e7c0      	b.n	800876c <__kernel_rem_pio2+0x55c>
 80087ea:	4602      	mov	r2, r0
 80087ec:	460b      	mov	r3, r1
 80087ee:	e7c5      	b.n	800877c <__kernel_rem_pio2+0x56c>
 80087f0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80087f4:	f7f7 fe2c 	bl	8000450 <__adddf3>
 80087f8:	3401      	adds	r4, #1
 80087fa:	e7ca      	b.n	8008792 <__kernel_rem_pio2+0x582>
 80087fc:	e9da 8900 	ldrd	r8, r9, [sl]
 8008800:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8008804:	9b02      	ldr	r3, [sp, #8]
 8008806:	3b01      	subs	r3, #1
 8008808:	9302      	str	r3, [sp, #8]
 800880a:	4632      	mov	r2, r6
 800880c:	463b      	mov	r3, r7
 800880e:	4640      	mov	r0, r8
 8008810:	4649      	mov	r1, r9
 8008812:	f7f7 fe1d 	bl	8000450 <__adddf3>
 8008816:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800881a:	4602      	mov	r2, r0
 800881c:	460b      	mov	r3, r1
 800881e:	4640      	mov	r0, r8
 8008820:	4649      	mov	r1, r9
 8008822:	f7f7 fe13 	bl	800044c <__aeabi_dsub>
 8008826:	4632      	mov	r2, r6
 8008828:	463b      	mov	r3, r7
 800882a:	f7f7 fe11 	bl	8000450 <__adddf3>
 800882e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8008832:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008836:	ed8a 7b00 	vstr	d7, [sl]
 800883a:	e76e      	b.n	800871a <__kernel_rem_pio2+0x50a>
 800883c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008840:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8008844:	4640      	mov	r0, r8
 8008846:	4632      	mov	r2, r6
 8008848:	463b      	mov	r3, r7
 800884a:	4649      	mov	r1, r9
 800884c:	f7f7 fe00 	bl	8000450 <__adddf3>
 8008850:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008854:	4602      	mov	r2, r0
 8008856:	460b      	mov	r3, r1
 8008858:	4640      	mov	r0, r8
 800885a:	4649      	mov	r1, r9
 800885c:	f7f7 fdf6 	bl	800044c <__aeabi_dsub>
 8008860:	4632      	mov	r2, r6
 8008862:	463b      	mov	r3, r7
 8008864:	f7f7 fdf4 	bl	8000450 <__adddf3>
 8008868:	ed9d 7b02 	vldr	d7, [sp, #8]
 800886c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008870:	ed84 7b00 	vstr	d7, [r4]
 8008874:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008878:	e755      	b.n	8008726 <__kernel_rem_pio2+0x516>
 800887a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800887e:	f7f7 fde7 	bl	8000450 <__adddf3>
 8008882:	3d01      	subs	r5, #1
 8008884:	e759      	b.n	800873a <__kernel_rem_pio2+0x52a>
 8008886:	9b01      	ldr	r3, [sp, #4]
 8008888:	9a01      	ldr	r2, [sp, #4]
 800888a:	601d      	str	r5, [r3, #0]
 800888c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8008890:	605c      	str	r4, [r3, #4]
 8008892:	609f      	str	r7, [r3, #8]
 8008894:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8008898:	60d3      	str	r3, [r2, #12]
 800889a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800889e:	6110      	str	r0, [r2, #16]
 80088a0:	6153      	str	r3, [r2, #20]
 80088a2:	e728      	b.n	80086f6 <__kernel_rem_pio2+0x4e6>
 80088a4:	41700000 	.word	0x41700000
 80088a8:	3e700000 	.word	0x3e700000
 80088ac:	00000000 	.word	0x00000000

080088b0 <__kernel_sin>:
 80088b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b4:	ed2d 8b04 	vpush	{d8-d9}
 80088b8:	eeb0 8a41 	vmov.f32	s16, s2
 80088bc:	eef0 8a61 	vmov.f32	s17, s3
 80088c0:	ec55 4b10 	vmov	r4, r5, d0
 80088c4:	b083      	sub	sp, #12
 80088c6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80088ca:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80088ce:	9001      	str	r0, [sp, #4]
 80088d0:	da06      	bge.n	80088e0 <__kernel_sin+0x30>
 80088d2:	ee10 0a10 	vmov	r0, s0
 80088d6:	4629      	mov	r1, r5
 80088d8:	f7f7 fff8 	bl	80008cc <__aeabi_d2iz>
 80088dc:	2800      	cmp	r0, #0
 80088de:	d051      	beq.n	8008984 <__kernel_sin+0xd4>
 80088e0:	4622      	mov	r2, r4
 80088e2:	462b      	mov	r3, r5
 80088e4:	4620      	mov	r0, r4
 80088e6:	4629      	mov	r1, r5
 80088e8:	f7f7 fc82 	bl	80001f0 <__aeabi_dmul>
 80088ec:	4682      	mov	sl, r0
 80088ee:	468b      	mov	fp, r1
 80088f0:	4602      	mov	r2, r0
 80088f2:	460b      	mov	r3, r1
 80088f4:	4620      	mov	r0, r4
 80088f6:	4629      	mov	r1, r5
 80088f8:	f7f7 fc7a 	bl	80001f0 <__aeabi_dmul>
 80088fc:	a341      	add	r3, pc, #260	; (adr r3, 8008a04 <__kernel_sin+0x154>)
 80088fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008902:	4680      	mov	r8, r0
 8008904:	4689      	mov	r9, r1
 8008906:	4650      	mov	r0, sl
 8008908:	4659      	mov	r1, fp
 800890a:	f7f7 fc71 	bl	80001f0 <__aeabi_dmul>
 800890e:	a33f      	add	r3, pc, #252	; (adr r3, 8008a0c <__kernel_sin+0x15c>)
 8008910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008914:	f7f7 fd9a 	bl	800044c <__aeabi_dsub>
 8008918:	4652      	mov	r2, sl
 800891a:	465b      	mov	r3, fp
 800891c:	f7f7 fc68 	bl	80001f0 <__aeabi_dmul>
 8008920:	a33c      	add	r3, pc, #240	; (adr r3, 8008a14 <__kernel_sin+0x164>)
 8008922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008926:	f7f7 fd93 	bl	8000450 <__adddf3>
 800892a:	4652      	mov	r2, sl
 800892c:	465b      	mov	r3, fp
 800892e:	f7f7 fc5f 	bl	80001f0 <__aeabi_dmul>
 8008932:	a33a      	add	r3, pc, #232	; (adr r3, 8008a1c <__kernel_sin+0x16c>)
 8008934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008938:	f7f7 fd88 	bl	800044c <__aeabi_dsub>
 800893c:	4652      	mov	r2, sl
 800893e:	465b      	mov	r3, fp
 8008940:	f7f7 fc56 	bl	80001f0 <__aeabi_dmul>
 8008944:	a337      	add	r3, pc, #220	; (adr r3, 8008a24 <__kernel_sin+0x174>)
 8008946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800894a:	f7f7 fd81 	bl	8000450 <__adddf3>
 800894e:	9b01      	ldr	r3, [sp, #4]
 8008950:	4606      	mov	r6, r0
 8008952:	460f      	mov	r7, r1
 8008954:	b9eb      	cbnz	r3, 8008992 <__kernel_sin+0xe2>
 8008956:	4602      	mov	r2, r0
 8008958:	460b      	mov	r3, r1
 800895a:	4650      	mov	r0, sl
 800895c:	4659      	mov	r1, fp
 800895e:	f7f7 fc47 	bl	80001f0 <__aeabi_dmul>
 8008962:	a325      	add	r3, pc, #148	; (adr r3, 80089f8 <__kernel_sin+0x148>)
 8008964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008968:	f7f7 fd70 	bl	800044c <__aeabi_dsub>
 800896c:	4642      	mov	r2, r8
 800896e:	464b      	mov	r3, r9
 8008970:	f7f7 fc3e 	bl	80001f0 <__aeabi_dmul>
 8008974:	4602      	mov	r2, r0
 8008976:	460b      	mov	r3, r1
 8008978:	4620      	mov	r0, r4
 800897a:	4629      	mov	r1, r5
 800897c:	f7f7 fd68 	bl	8000450 <__adddf3>
 8008980:	4604      	mov	r4, r0
 8008982:	460d      	mov	r5, r1
 8008984:	ec45 4b10 	vmov	d0, r4, r5
 8008988:	b003      	add	sp, #12
 800898a:	ecbd 8b04 	vpop	{d8-d9}
 800898e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008992:	4b1b      	ldr	r3, [pc, #108]	; (8008a00 <__kernel_sin+0x150>)
 8008994:	ec51 0b18 	vmov	r0, r1, d8
 8008998:	2200      	movs	r2, #0
 800899a:	f7f7 fc29 	bl	80001f0 <__aeabi_dmul>
 800899e:	4632      	mov	r2, r6
 80089a0:	ec41 0b19 	vmov	d9, r0, r1
 80089a4:	463b      	mov	r3, r7
 80089a6:	4640      	mov	r0, r8
 80089a8:	4649      	mov	r1, r9
 80089aa:	f7f7 fc21 	bl	80001f0 <__aeabi_dmul>
 80089ae:	4602      	mov	r2, r0
 80089b0:	460b      	mov	r3, r1
 80089b2:	ec51 0b19 	vmov	r0, r1, d9
 80089b6:	f7f7 fd49 	bl	800044c <__aeabi_dsub>
 80089ba:	4652      	mov	r2, sl
 80089bc:	465b      	mov	r3, fp
 80089be:	f7f7 fc17 	bl	80001f0 <__aeabi_dmul>
 80089c2:	ec53 2b18 	vmov	r2, r3, d8
 80089c6:	f7f7 fd41 	bl	800044c <__aeabi_dsub>
 80089ca:	a30b      	add	r3, pc, #44	; (adr r3, 80089f8 <__kernel_sin+0x148>)
 80089cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d0:	4606      	mov	r6, r0
 80089d2:	460f      	mov	r7, r1
 80089d4:	4640      	mov	r0, r8
 80089d6:	4649      	mov	r1, r9
 80089d8:	f7f7 fc0a 	bl	80001f0 <__aeabi_dmul>
 80089dc:	4602      	mov	r2, r0
 80089de:	460b      	mov	r3, r1
 80089e0:	4630      	mov	r0, r6
 80089e2:	4639      	mov	r1, r7
 80089e4:	f7f7 fd34 	bl	8000450 <__adddf3>
 80089e8:	4602      	mov	r2, r0
 80089ea:	460b      	mov	r3, r1
 80089ec:	4620      	mov	r0, r4
 80089ee:	4629      	mov	r1, r5
 80089f0:	f7f7 fd2c 	bl	800044c <__aeabi_dsub>
 80089f4:	e7c4      	b.n	8008980 <__kernel_sin+0xd0>
 80089f6:	bf00      	nop
 80089f8:	55555549 	.word	0x55555549
 80089fc:	3fc55555 	.word	0x3fc55555
 8008a00:	3fe00000 	.word	0x3fe00000
 8008a04:	5acfd57c 	.word	0x5acfd57c
 8008a08:	3de5d93a 	.word	0x3de5d93a
 8008a0c:	8a2b9ceb 	.word	0x8a2b9ceb
 8008a10:	3e5ae5e6 	.word	0x3e5ae5e6
 8008a14:	57b1fe7d 	.word	0x57b1fe7d
 8008a18:	3ec71de3 	.word	0x3ec71de3
 8008a1c:	19c161d5 	.word	0x19c161d5
 8008a20:	3f2a01a0 	.word	0x3f2a01a0
 8008a24:	1110f8a6 	.word	0x1110f8a6
 8008a28:	3f811111 	.word	0x3f811111

08008a2c <fabs>:
 8008a2c:	ec51 0b10 	vmov	r0, r1, d0
 8008a30:	ee10 2a10 	vmov	r2, s0
 8008a34:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008a38:	ec43 2b10 	vmov	d0, r2, r3
 8008a3c:	4770      	bx	lr
	...

08008a40 <floor>:
 8008a40:	ec51 0b10 	vmov	r0, r1, d0
 8008a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a48:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008a4c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008a50:	2e13      	cmp	r6, #19
 8008a52:	ee10 5a10 	vmov	r5, s0
 8008a56:	ee10 8a10 	vmov	r8, s0
 8008a5a:	460c      	mov	r4, r1
 8008a5c:	dc32      	bgt.n	8008ac4 <floor+0x84>
 8008a5e:	2e00      	cmp	r6, #0
 8008a60:	da14      	bge.n	8008a8c <floor+0x4c>
 8008a62:	a333      	add	r3, pc, #204	; (adr r3, 8008b30 <floor+0xf0>)
 8008a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a68:	f7f7 fcf2 	bl	8000450 <__adddf3>
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	2300      	movs	r3, #0
 8008a70:	f7f7 ff22 	bl	80008b8 <__aeabi_dcmpgt>
 8008a74:	b138      	cbz	r0, 8008a86 <floor+0x46>
 8008a76:	2c00      	cmp	r4, #0
 8008a78:	da57      	bge.n	8008b2a <floor+0xea>
 8008a7a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8008a7e:	431d      	orrs	r5, r3
 8008a80:	d001      	beq.n	8008a86 <floor+0x46>
 8008a82:	4c2d      	ldr	r4, [pc, #180]	; (8008b38 <floor+0xf8>)
 8008a84:	2500      	movs	r5, #0
 8008a86:	4621      	mov	r1, r4
 8008a88:	4628      	mov	r0, r5
 8008a8a:	e025      	b.n	8008ad8 <floor+0x98>
 8008a8c:	4f2b      	ldr	r7, [pc, #172]	; (8008b3c <floor+0xfc>)
 8008a8e:	4137      	asrs	r7, r6
 8008a90:	ea01 0307 	and.w	r3, r1, r7
 8008a94:	4303      	orrs	r3, r0
 8008a96:	d01f      	beq.n	8008ad8 <floor+0x98>
 8008a98:	a325      	add	r3, pc, #148	; (adr r3, 8008b30 <floor+0xf0>)
 8008a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a9e:	f7f7 fcd7 	bl	8000450 <__adddf3>
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	f7f7 ff07 	bl	80008b8 <__aeabi_dcmpgt>
 8008aaa:	2800      	cmp	r0, #0
 8008aac:	d0eb      	beq.n	8008a86 <floor+0x46>
 8008aae:	2c00      	cmp	r4, #0
 8008ab0:	bfbe      	ittt	lt
 8008ab2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008ab6:	fa43 f606 	asrlt.w	r6, r3, r6
 8008aba:	19a4      	addlt	r4, r4, r6
 8008abc:	ea24 0407 	bic.w	r4, r4, r7
 8008ac0:	2500      	movs	r5, #0
 8008ac2:	e7e0      	b.n	8008a86 <floor+0x46>
 8008ac4:	2e33      	cmp	r6, #51	; 0x33
 8008ac6:	dd0b      	ble.n	8008ae0 <floor+0xa0>
 8008ac8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008acc:	d104      	bne.n	8008ad8 <floor+0x98>
 8008ace:	ee10 2a10 	vmov	r2, s0
 8008ad2:	460b      	mov	r3, r1
 8008ad4:	f7f7 fcbc 	bl	8000450 <__adddf3>
 8008ad8:	ec41 0b10 	vmov	d0, r0, r1
 8008adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ae0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8008ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ae8:	fa23 f707 	lsr.w	r7, r3, r7
 8008aec:	4207      	tst	r7, r0
 8008aee:	d0f3      	beq.n	8008ad8 <floor+0x98>
 8008af0:	a30f      	add	r3, pc, #60	; (adr r3, 8008b30 <floor+0xf0>)
 8008af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af6:	f7f7 fcab 	bl	8000450 <__adddf3>
 8008afa:	2200      	movs	r2, #0
 8008afc:	2300      	movs	r3, #0
 8008afe:	f7f7 fedb 	bl	80008b8 <__aeabi_dcmpgt>
 8008b02:	2800      	cmp	r0, #0
 8008b04:	d0bf      	beq.n	8008a86 <floor+0x46>
 8008b06:	2c00      	cmp	r4, #0
 8008b08:	da02      	bge.n	8008b10 <floor+0xd0>
 8008b0a:	2e14      	cmp	r6, #20
 8008b0c:	d103      	bne.n	8008b16 <floor+0xd6>
 8008b0e:	3401      	adds	r4, #1
 8008b10:	ea25 0507 	bic.w	r5, r5, r7
 8008b14:	e7b7      	b.n	8008a86 <floor+0x46>
 8008b16:	2301      	movs	r3, #1
 8008b18:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008b1c:	fa03 f606 	lsl.w	r6, r3, r6
 8008b20:	4435      	add	r5, r6
 8008b22:	4545      	cmp	r5, r8
 8008b24:	bf38      	it	cc
 8008b26:	18e4      	addcc	r4, r4, r3
 8008b28:	e7f2      	b.n	8008b10 <floor+0xd0>
 8008b2a:	2500      	movs	r5, #0
 8008b2c:	462c      	mov	r4, r5
 8008b2e:	e7aa      	b.n	8008a86 <floor+0x46>
 8008b30:	8800759c 	.word	0x8800759c
 8008b34:	7e37e43c 	.word	0x7e37e43c
 8008b38:	bff00000 	.word	0xbff00000
 8008b3c:	000fffff 	.word	0x000fffff

08008b40 <scalbn>:
 8008b40:	b570      	push	{r4, r5, r6, lr}
 8008b42:	ec55 4b10 	vmov	r4, r5, d0
 8008b46:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008b4a:	4606      	mov	r6, r0
 8008b4c:	462b      	mov	r3, r5
 8008b4e:	b99a      	cbnz	r2, 8008b78 <scalbn+0x38>
 8008b50:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008b54:	4323      	orrs	r3, r4
 8008b56:	d036      	beq.n	8008bc6 <scalbn+0x86>
 8008b58:	4b39      	ldr	r3, [pc, #228]	; (8008c40 <scalbn+0x100>)
 8008b5a:	4629      	mov	r1, r5
 8008b5c:	ee10 0a10 	vmov	r0, s0
 8008b60:	2200      	movs	r2, #0
 8008b62:	f7f7 fb45 	bl	80001f0 <__aeabi_dmul>
 8008b66:	4b37      	ldr	r3, [pc, #220]	; (8008c44 <scalbn+0x104>)
 8008b68:	429e      	cmp	r6, r3
 8008b6a:	4604      	mov	r4, r0
 8008b6c:	460d      	mov	r5, r1
 8008b6e:	da10      	bge.n	8008b92 <scalbn+0x52>
 8008b70:	a32b      	add	r3, pc, #172	; (adr r3, 8008c20 <scalbn+0xe0>)
 8008b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b76:	e03a      	b.n	8008bee <scalbn+0xae>
 8008b78:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008b7c:	428a      	cmp	r2, r1
 8008b7e:	d10c      	bne.n	8008b9a <scalbn+0x5a>
 8008b80:	ee10 2a10 	vmov	r2, s0
 8008b84:	4620      	mov	r0, r4
 8008b86:	4629      	mov	r1, r5
 8008b88:	f7f7 fc62 	bl	8000450 <__adddf3>
 8008b8c:	4604      	mov	r4, r0
 8008b8e:	460d      	mov	r5, r1
 8008b90:	e019      	b.n	8008bc6 <scalbn+0x86>
 8008b92:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008b96:	460b      	mov	r3, r1
 8008b98:	3a36      	subs	r2, #54	; 0x36
 8008b9a:	4432      	add	r2, r6
 8008b9c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008ba0:	428a      	cmp	r2, r1
 8008ba2:	dd08      	ble.n	8008bb6 <scalbn+0x76>
 8008ba4:	2d00      	cmp	r5, #0
 8008ba6:	a120      	add	r1, pc, #128	; (adr r1, 8008c28 <scalbn+0xe8>)
 8008ba8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008bac:	da1c      	bge.n	8008be8 <scalbn+0xa8>
 8008bae:	a120      	add	r1, pc, #128	; (adr r1, 8008c30 <scalbn+0xf0>)
 8008bb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008bb4:	e018      	b.n	8008be8 <scalbn+0xa8>
 8008bb6:	2a00      	cmp	r2, #0
 8008bb8:	dd08      	ble.n	8008bcc <scalbn+0x8c>
 8008bba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008bbe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008bc2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008bc6:	ec45 4b10 	vmov	d0, r4, r5
 8008bca:	bd70      	pop	{r4, r5, r6, pc}
 8008bcc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008bd0:	da19      	bge.n	8008c06 <scalbn+0xc6>
 8008bd2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008bd6:	429e      	cmp	r6, r3
 8008bd8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8008bdc:	dd0a      	ble.n	8008bf4 <scalbn+0xb4>
 8008bde:	a112      	add	r1, pc, #72	; (adr r1, 8008c28 <scalbn+0xe8>)
 8008be0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d1e2      	bne.n	8008bae <scalbn+0x6e>
 8008be8:	a30f      	add	r3, pc, #60	; (adr r3, 8008c28 <scalbn+0xe8>)
 8008bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bee:	f7f7 faff 	bl	80001f0 <__aeabi_dmul>
 8008bf2:	e7cb      	b.n	8008b8c <scalbn+0x4c>
 8008bf4:	a10a      	add	r1, pc, #40	; (adr r1, 8008c20 <scalbn+0xe0>)
 8008bf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d0b8      	beq.n	8008b70 <scalbn+0x30>
 8008bfe:	a10e      	add	r1, pc, #56	; (adr r1, 8008c38 <scalbn+0xf8>)
 8008c00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c04:	e7b4      	b.n	8008b70 <scalbn+0x30>
 8008c06:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008c0a:	3236      	adds	r2, #54	; 0x36
 8008c0c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008c10:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008c14:	4620      	mov	r0, r4
 8008c16:	4b0c      	ldr	r3, [pc, #48]	; (8008c48 <scalbn+0x108>)
 8008c18:	2200      	movs	r2, #0
 8008c1a:	e7e8      	b.n	8008bee <scalbn+0xae>
 8008c1c:	f3af 8000 	nop.w
 8008c20:	c2f8f359 	.word	0xc2f8f359
 8008c24:	01a56e1f 	.word	0x01a56e1f
 8008c28:	8800759c 	.word	0x8800759c
 8008c2c:	7e37e43c 	.word	0x7e37e43c
 8008c30:	8800759c 	.word	0x8800759c
 8008c34:	fe37e43c 	.word	0xfe37e43c
 8008c38:	c2f8f359 	.word	0xc2f8f359
 8008c3c:	81a56e1f 	.word	0x81a56e1f
 8008c40:	43500000 	.word	0x43500000
 8008c44:	ffff3cb0 	.word	0xffff3cb0
 8008c48:	3c900000 	.word	0x3c900000

08008c4c <_init>:
 8008c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c4e:	bf00      	nop
 8008c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c52:	bc08      	pop	{r3}
 8008c54:	469e      	mov	lr, r3
 8008c56:	4770      	bx	lr

08008c58 <_fini>:
 8008c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c5a:	bf00      	nop
 8008c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c5e:	bc08      	pop	{r3}
 8008c60:	469e      	mov	lr, r3
 8008c62:	4770      	bx	lr
