
cv03B.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021ac  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800226c  0800226c  0001226c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800231c  0800231c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800231c  0800231c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800231c  0800231c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800231c  0800231c  0001231c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002320  08002320  00012320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002324  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000000c  08002330  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08002330  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bbd6  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017bb  00000000  00000000  0002bc0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b00  00000000  00000000  0002d3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a68  00000000  00000000  0002dec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f7df  00000000  00000000  0002e930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cce9  00000000  00000000  0003e10f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000610ed  00000000  00000000  0004adf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000abee5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002790  00000000  00000000  000abf38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002254 	.word	0x08002254

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002254 	.word	0x08002254

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fb22 	bl	800086c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f81c 	bl	8000264 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f8fa 	bl	8000424 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000230:	f000 f8c8 	bl	80003c4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000234:	f000 f860 	bl	80002f8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  	  HAL_TIM_Encoder_Start(&htim1, htim1.Channel);
 8000238:	4b09      	ldr	r3, [pc, #36]	; (8000260 <main+0x40>)
 800023a:	7f1b      	ldrb	r3, [r3, #28]
 800023c:	001a      	movs	r2, r3
 800023e:	4b08      	ldr	r3, [pc, #32]	; (8000260 <main+0x40>)
 8000240:	0011      	movs	r1, r2
 8000242:	0018      	movs	r0, r3
 8000244:	f001 faf0 	bl	8001828 <HAL_TIM_Encoder_Start>
	  /**for(uint32_t i = 0; i<999; i+=111){
	  	  	sct_value(i);
	  	  	HAL_Delay(1000);
	  }**/

	sct_value(__HAL_TIM_GET_COUNTER(&htim1));
 8000248:	4b05      	ldr	r3, [pc, #20]	; (8000260 <main+0x40>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800024e:	b29b      	uxth	r3, r3
 8000250:	0018      	movs	r0, r3
 8000252:	f000 f9b9 	bl	80005c8 <sct_value>
	HAL_Delay(50);
 8000256:	2032      	movs	r0, #50	; 0x32
 8000258:	f000 fb6c 	bl	8000934 <HAL_Delay>
	sct_value(__HAL_TIM_GET_COUNTER(&htim1));
 800025c:	e7f4      	b.n	8000248 <main+0x28>
 800025e:	46c0      	nop			; (mov r8, r8)
 8000260:	20000028 	.word	0x20000028

08000264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000264:	b590      	push	{r4, r7, lr}
 8000266:	b091      	sub	sp, #68	; 0x44
 8000268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026a:	2410      	movs	r4, #16
 800026c:	193b      	adds	r3, r7, r4
 800026e:	0018      	movs	r0, r3
 8000270:	2330      	movs	r3, #48	; 0x30
 8000272:	001a      	movs	r2, r3
 8000274:	2100      	movs	r1, #0
 8000276:	f001 ffe5 	bl	8002244 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800027a:	003b      	movs	r3, r7
 800027c:	0018      	movs	r0, r3
 800027e:	2310      	movs	r3, #16
 8000280:	001a      	movs	r2, r3
 8000282:	2100      	movs	r1, #0
 8000284:	f001 ffde 	bl	8002244 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000288:	0021      	movs	r1, r4
 800028a:	187b      	adds	r3, r7, r1
 800028c:	2202      	movs	r2, #2
 800028e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000290:	187b      	adds	r3, r7, r1
 8000292:	2201      	movs	r2, #1
 8000294:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000296:	187b      	adds	r3, r7, r1
 8000298:	2210      	movs	r2, #16
 800029a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800029c:	187b      	adds	r3, r7, r1
 800029e:	2202      	movs	r2, #2
 80002a0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002a2:	187b      	adds	r3, r7, r1
 80002a4:	2200      	movs	r2, #0
 80002a6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80002a8:	187b      	adds	r3, r7, r1
 80002aa:	22a0      	movs	r2, #160	; 0xa0
 80002ac:	0392      	lsls	r2, r2, #14
 80002ae:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002b0:	187b      	adds	r3, r7, r1
 80002b2:	2200      	movs	r2, #0
 80002b4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b6:	187b      	adds	r3, r7, r1
 80002b8:	0018      	movs	r0, r3
 80002ba:	f000 fda1 	bl	8000e00 <HAL_RCC_OscConfig>
 80002be:	1e03      	subs	r3, r0, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80002c2:	f000 f943 	bl	800054c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c6:	003b      	movs	r3, r7
 80002c8:	2207      	movs	r2, #7
 80002ca:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002cc:	003b      	movs	r3, r7
 80002ce:	2202      	movs	r2, #2
 80002d0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d2:	003b      	movs	r3, r7
 80002d4:	2200      	movs	r2, #0
 80002d6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d8:	003b      	movs	r3, r7
 80002da:	2200      	movs	r2, #0
 80002dc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002de:	003b      	movs	r3, r7
 80002e0:	2101      	movs	r1, #1
 80002e2:	0018      	movs	r0, r3
 80002e4:	f001 f8a6 	bl	8001434 <HAL_RCC_ClockConfig>
 80002e8:	1e03      	subs	r3, r0, #0
 80002ea:	d001      	beq.n	80002f0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80002ec:	f000 f92e 	bl	800054c <Error_Handler>
  }
}
 80002f0:	46c0      	nop			; (mov r8, r8)
 80002f2:	46bd      	mov	sp, r7
 80002f4:	b011      	add	sp, #68	; 0x44
 80002f6:	bd90      	pop	{r4, r7, pc}

080002f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002f8:	b590      	push	{r4, r7, lr}
 80002fa:	b08d      	sub	sp, #52	; 0x34
 80002fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80002fe:	240c      	movs	r4, #12
 8000300:	193b      	adds	r3, r7, r4
 8000302:	0018      	movs	r0, r3
 8000304:	2324      	movs	r3, #36	; 0x24
 8000306:	001a      	movs	r2, r3
 8000308:	2100      	movs	r1, #0
 800030a:	f001 ff9b 	bl	8002244 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	0018      	movs	r0, r3
 8000312:	2308      	movs	r3, #8
 8000314:	001a      	movs	r2, r3
 8000316:	2100      	movs	r1, #0
 8000318:	f001 ff94 	bl	8002244 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800031c:	4b27      	ldr	r3, [pc, #156]	; (80003bc <MX_TIM1_Init+0xc4>)
 800031e:	4a28      	ldr	r2, [pc, #160]	; (80003c0 <MX_TIM1_Init+0xc8>)
 8000320:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000322:	4b26      	ldr	r3, [pc, #152]	; (80003bc <MX_TIM1_Init+0xc4>)
 8000324:	2200      	movs	r2, #0
 8000326:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000328:	4b24      	ldr	r3, [pc, #144]	; (80003bc <MX_TIM1_Init+0xc4>)
 800032a:	2200      	movs	r2, #0
 800032c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 150;
 800032e:	4b23      	ldr	r3, [pc, #140]	; (80003bc <MX_TIM1_Init+0xc4>)
 8000330:	2296      	movs	r2, #150	; 0x96
 8000332:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000334:	4b21      	ldr	r3, [pc, #132]	; (80003bc <MX_TIM1_Init+0xc4>)
 8000336:	2200      	movs	r2, #0
 8000338:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800033a:	4b20      	ldr	r3, [pc, #128]	; (80003bc <MX_TIM1_Init+0xc4>)
 800033c:	2200      	movs	r2, #0
 800033e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000340:	4b1e      	ldr	r3, [pc, #120]	; (80003bc <MX_TIM1_Init+0xc4>)
 8000342:	2200      	movs	r2, #0
 8000344:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000346:	0021      	movs	r1, r4
 8000348:	187b      	adds	r3, r7, r1
 800034a:	2201      	movs	r2, #1
 800034c:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800034e:	187b      	adds	r3, r7, r1
 8000350:	2202      	movs	r2, #2
 8000352:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000354:	187b      	adds	r3, r7, r1
 8000356:	2201      	movs	r2, #1
 8000358:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800035a:	187b      	adds	r3, r7, r1
 800035c:	2200      	movs	r2, #0
 800035e:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8000360:	187b      	adds	r3, r7, r1
 8000362:	2200      	movs	r2, #0
 8000364:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000366:	187b      	adds	r3, r7, r1
 8000368:	2200      	movs	r2, #0
 800036a:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800036c:	187b      	adds	r3, r7, r1
 800036e:	2201      	movs	r2, #1
 8000370:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000372:	187b      	adds	r3, r7, r1
 8000374:	2200      	movs	r2, #0
 8000376:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8000378:	187b      	adds	r3, r7, r1
 800037a:	2200      	movs	r2, #0
 800037c:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800037e:	187a      	adds	r2, r7, r1
 8000380:	4b0e      	ldr	r3, [pc, #56]	; (80003bc <MX_TIM1_Init+0xc4>)
 8000382:	0011      	movs	r1, r2
 8000384:	0018      	movs	r0, r3
 8000386:	f001 f9a7 	bl	80016d8 <HAL_TIM_Encoder_Init>
 800038a:	1e03      	subs	r3, r0, #0
 800038c:	d001      	beq.n	8000392 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800038e:	f000 f8dd 	bl	800054c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000392:	1d3b      	adds	r3, r7, #4
 8000394:	2200      	movs	r2, #0
 8000396:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000398:	1d3b      	adds	r3, r7, #4
 800039a:	2200      	movs	r2, #0
 800039c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800039e:	1d3a      	adds	r2, r7, #4
 80003a0:	4b06      	ldr	r3, [pc, #24]	; (80003bc <MX_TIM1_Init+0xc4>)
 80003a2:	0011      	movs	r1, r2
 80003a4:	0018      	movs	r0, r3
 80003a6:	f001 fb7d 	bl	8001aa4 <HAL_TIMEx_MasterConfigSynchronization>
 80003aa:	1e03      	subs	r3, r0, #0
 80003ac:	d001      	beq.n	80003b2 <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 80003ae:	f000 f8cd 	bl	800054c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80003b2:	46c0      	nop			; (mov r8, r8)
 80003b4:	46bd      	mov	sp, r7
 80003b6:	b00d      	add	sp, #52	; 0x34
 80003b8:	bd90      	pop	{r4, r7, pc}
 80003ba:	46c0      	nop			; (mov r8, r8)
 80003bc:	20000028 	.word	0x20000028
 80003c0:	40012c00 	.word	0x40012c00

080003c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003c8:	4b14      	ldr	r3, [pc, #80]	; (800041c <MX_USART2_UART_Init+0x58>)
 80003ca:	4a15      	ldr	r2, [pc, #84]	; (8000420 <MX_USART2_UART_Init+0x5c>)
 80003cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80003ce:	4b13      	ldr	r3, [pc, #76]	; (800041c <MX_USART2_UART_Init+0x58>)
 80003d0:	2296      	movs	r2, #150	; 0x96
 80003d2:	0212      	lsls	r2, r2, #8
 80003d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003d6:	4b11      	ldr	r3, [pc, #68]	; (800041c <MX_USART2_UART_Init+0x58>)
 80003d8:	2200      	movs	r2, #0
 80003da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003dc:	4b0f      	ldr	r3, [pc, #60]	; (800041c <MX_USART2_UART_Init+0x58>)
 80003de:	2200      	movs	r2, #0
 80003e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003e2:	4b0e      	ldr	r3, [pc, #56]	; (800041c <MX_USART2_UART_Init+0x58>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003e8:	4b0c      	ldr	r3, [pc, #48]	; (800041c <MX_USART2_UART_Init+0x58>)
 80003ea:	220c      	movs	r2, #12
 80003ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ee:	4b0b      	ldr	r3, [pc, #44]	; (800041c <MX_USART2_UART_Init+0x58>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003f4:	4b09      	ldr	r3, [pc, #36]	; (800041c <MX_USART2_UART_Init+0x58>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003fa:	4b08      	ldr	r3, [pc, #32]	; (800041c <MX_USART2_UART_Init+0x58>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000400:	4b06      	ldr	r3, [pc, #24]	; (800041c <MX_USART2_UART_Init+0x58>)
 8000402:	2200      	movs	r2, #0
 8000404:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000406:	4b05      	ldr	r3, [pc, #20]	; (800041c <MX_USART2_UART_Init+0x58>)
 8000408:	0018      	movs	r0, r3
 800040a:	f001 fba3 	bl	8001b54 <HAL_UART_Init>
 800040e:	1e03      	subs	r3, r0, #0
 8000410:	d001      	beq.n	8000416 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000412:	f000 f89b 	bl	800054c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	20000070 	.word	0x20000070
 8000420:	40004400 	.word	0x40004400

08000424 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000424:	b590      	push	{r4, r7, lr}
 8000426:	b08b      	sub	sp, #44	; 0x2c
 8000428:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800042a:	2414      	movs	r4, #20
 800042c:	193b      	adds	r3, r7, r4
 800042e:	0018      	movs	r0, r3
 8000430:	2314      	movs	r3, #20
 8000432:	001a      	movs	r2, r3
 8000434:	2100      	movs	r1, #0
 8000436:	f001 ff05 	bl	8002244 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800043a:	4b41      	ldr	r3, [pc, #260]	; (8000540 <MX_GPIO_Init+0x11c>)
 800043c:	695a      	ldr	r2, [r3, #20]
 800043e:	4b40      	ldr	r3, [pc, #256]	; (8000540 <MX_GPIO_Init+0x11c>)
 8000440:	2180      	movs	r1, #128	; 0x80
 8000442:	0309      	lsls	r1, r1, #12
 8000444:	430a      	orrs	r2, r1
 8000446:	615a      	str	r2, [r3, #20]
 8000448:	4b3d      	ldr	r3, [pc, #244]	; (8000540 <MX_GPIO_Init+0x11c>)
 800044a:	695a      	ldr	r2, [r3, #20]
 800044c:	2380      	movs	r3, #128	; 0x80
 800044e:	031b      	lsls	r3, r3, #12
 8000450:	4013      	ands	r3, r2
 8000452:	613b      	str	r3, [r7, #16]
 8000454:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000456:	4b3a      	ldr	r3, [pc, #232]	; (8000540 <MX_GPIO_Init+0x11c>)
 8000458:	695a      	ldr	r2, [r3, #20]
 800045a:	4b39      	ldr	r3, [pc, #228]	; (8000540 <MX_GPIO_Init+0x11c>)
 800045c:	2180      	movs	r1, #128	; 0x80
 800045e:	03c9      	lsls	r1, r1, #15
 8000460:	430a      	orrs	r2, r1
 8000462:	615a      	str	r2, [r3, #20]
 8000464:	4b36      	ldr	r3, [pc, #216]	; (8000540 <MX_GPIO_Init+0x11c>)
 8000466:	695a      	ldr	r2, [r3, #20]
 8000468:	2380      	movs	r3, #128	; 0x80
 800046a:	03db      	lsls	r3, r3, #15
 800046c:	4013      	ands	r3, r2
 800046e:	60fb      	str	r3, [r7, #12]
 8000470:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000472:	4b33      	ldr	r3, [pc, #204]	; (8000540 <MX_GPIO_Init+0x11c>)
 8000474:	695a      	ldr	r2, [r3, #20]
 8000476:	4b32      	ldr	r3, [pc, #200]	; (8000540 <MX_GPIO_Init+0x11c>)
 8000478:	2180      	movs	r1, #128	; 0x80
 800047a:	0289      	lsls	r1, r1, #10
 800047c:	430a      	orrs	r2, r1
 800047e:	615a      	str	r2, [r3, #20]
 8000480:	4b2f      	ldr	r3, [pc, #188]	; (8000540 <MX_GPIO_Init+0x11c>)
 8000482:	695a      	ldr	r2, [r3, #20]
 8000484:	2380      	movs	r3, #128	; 0x80
 8000486:	029b      	lsls	r3, r3, #10
 8000488:	4013      	ands	r3, r2
 800048a:	60bb      	str	r3, [r7, #8]
 800048c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800048e:	4b2c      	ldr	r3, [pc, #176]	; (8000540 <MX_GPIO_Init+0x11c>)
 8000490:	695a      	ldr	r2, [r3, #20]
 8000492:	4b2b      	ldr	r3, [pc, #172]	; (8000540 <MX_GPIO_Init+0x11c>)
 8000494:	2180      	movs	r1, #128	; 0x80
 8000496:	02c9      	lsls	r1, r1, #11
 8000498:	430a      	orrs	r2, r1
 800049a:	615a      	str	r2, [r3, #20]
 800049c:	4b28      	ldr	r3, [pc, #160]	; (8000540 <MX_GPIO_Init+0x11c>)
 800049e:	695a      	ldr	r2, [r3, #20]
 80004a0:	2380      	movs	r3, #128	; 0x80
 80004a2:	02db      	lsls	r3, r3, #11
 80004a4:	4013      	ands	r3, r2
 80004a6:	607b      	str	r3, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004aa:	2390      	movs	r3, #144	; 0x90
 80004ac:	05db      	lsls	r3, r3, #23
 80004ae:	2200      	movs	r2, #0
 80004b0:	2120      	movs	r1, #32
 80004b2:	0018      	movs	r0, r3
 80004b4:	f000 fc86 	bl	8000dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCT_NOE_Pin|SCT_CLK_Pin|SCT_SDI_Pin|SCT_NLA_Pin, GPIO_PIN_RESET);
 80004b8:	2387      	movs	r3, #135	; 0x87
 80004ba:	00db      	lsls	r3, r3, #3
 80004bc:	4821      	ldr	r0, [pc, #132]	; (8000544 <MX_GPIO_Init+0x120>)
 80004be:	2200      	movs	r2, #0
 80004c0:	0019      	movs	r1, r3
 80004c2:	f000 fc7f 	bl	8000dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004c6:	193b      	adds	r3, r7, r4
 80004c8:	2280      	movs	r2, #128	; 0x80
 80004ca:	0192      	lsls	r2, r2, #6
 80004cc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004ce:	193b      	adds	r3, r7, r4
 80004d0:	2284      	movs	r2, #132	; 0x84
 80004d2:	0392      	lsls	r2, r2, #14
 80004d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d6:	193b      	adds	r3, r7, r4
 80004d8:	2200      	movs	r2, #0
 80004da:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004dc:	193b      	adds	r3, r7, r4
 80004de:	4a1a      	ldr	r2, [pc, #104]	; (8000548 <MX_GPIO_Init+0x124>)
 80004e0:	0019      	movs	r1, r3
 80004e2:	0010      	movs	r0, r2
 80004e4:	f000 fafe 	bl	8000ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80004e8:	193b      	adds	r3, r7, r4
 80004ea:	2220      	movs	r2, #32
 80004ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ee:	193b      	adds	r3, r7, r4
 80004f0:	2201      	movs	r2, #1
 80004f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f4:	193b      	adds	r3, r7, r4
 80004f6:	2200      	movs	r2, #0
 80004f8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004fa:	193b      	adds	r3, r7, r4
 80004fc:	2200      	movs	r2, #0
 80004fe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000500:	193a      	adds	r2, r7, r4
 8000502:	2390      	movs	r3, #144	; 0x90
 8000504:	05db      	lsls	r3, r3, #23
 8000506:	0011      	movs	r1, r2
 8000508:	0018      	movs	r0, r3
 800050a:	f000 faeb 	bl	8000ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCT_NOE_Pin SCT_CLK_Pin SCT_SDI_Pin SCT_NLA_Pin */
  GPIO_InitStruct.Pin = SCT_NOE_Pin|SCT_CLK_Pin|SCT_SDI_Pin|SCT_NLA_Pin;
 800050e:	0021      	movs	r1, r4
 8000510:	187b      	adds	r3, r7, r1
 8000512:	2287      	movs	r2, #135	; 0x87
 8000514:	00d2      	lsls	r2, r2, #3
 8000516:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000518:	187b      	adds	r3, r7, r1
 800051a:	2201      	movs	r2, #1
 800051c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051e:	187b      	adds	r3, r7, r1
 8000520:	2200      	movs	r2, #0
 8000522:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000524:	187b      	adds	r3, r7, r1
 8000526:	2200      	movs	r2, #0
 8000528:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800052a:	187b      	adds	r3, r7, r1
 800052c:	4a05      	ldr	r2, [pc, #20]	; (8000544 <MX_GPIO_Init+0x120>)
 800052e:	0019      	movs	r1, r3
 8000530:	0010      	movs	r0, r2
 8000532:	f000 fad7 	bl	8000ae4 <HAL_GPIO_Init>

}
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	46bd      	mov	sp, r7
 800053a:	b00b      	add	sp, #44	; 0x2c
 800053c:	bd90      	pop	{r4, r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	40021000 	.word	0x40021000
 8000544:	48000400 	.word	0x48000400
 8000548:	48000800 	.word	0x48000800

0800054c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000550:	b672      	cpsid	i
}
 8000552:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000554:	e7fe      	b.n	8000554 <Error_Handler+0x8>
	...

08000558 <sct_led>:
#include "sct.h"
#include "main.h"



void sct_led(uint32_t value){
 8000558:	b580      	push	{r7, lr}
 800055a:	b084      	sub	sp, #16
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0; (i < sizeof(value)*8); i++){
 8000560:	2300      	movs	r3, #0
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	e01b      	b.n	800059e <sct_led+0x46>
		HAL_GPIO_WritePin(SCT_SDI_GPIO_Port, SCT_SDI_Pin, value&1);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	b2db      	uxtb	r3, r3
 800056a:	2201      	movs	r2, #1
 800056c:	4013      	ands	r3, r2
 800056e:	b2db      	uxtb	r3, r3
 8000570:	4814      	ldr	r0, [pc, #80]	; (80005c4 <sct_led+0x6c>)
 8000572:	001a      	movs	r2, r3
 8000574:	2110      	movs	r1, #16
 8000576:	f000 fc25 	bl	8000dc4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SCT_CLK_GPIO_Port, SCT_CLK_Pin, 1);
 800057a:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <sct_led+0x6c>)
 800057c:	2201      	movs	r2, #1
 800057e:	2108      	movs	r1, #8
 8000580:	0018      	movs	r0, r3
 8000582:	f000 fc1f 	bl	8000dc4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SCT_CLK_GPIO_Port, SCT_CLK_Pin, 0);
 8000586:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <sct_led+0x6c>)
 8000588:	2200      	movs	r2, #0
 800058a:	2108      	movs	r1, #8
 800058c:	0018      	movs	r0, r3
 800058e:	f000 fc19 	bl	8000dc4 <HAL_GPIO_WritePin>
		value>>=1;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	085b      	lsrs	r3, r3, #1
 8000596:	607b      	str	r3, [r7, #4]
	for(uint32_t i = 0; (i < sizeof(value)*8); i++){
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	3301      	adds	r3, #1
 800059c:	60fb      	str	r3, [r7, #12]
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	2b1f      	cmp	r3, #31
 80005a2:	d9e0      	bls.n	8000566 <sct_led+0xe>
	}
	HAL_GPIO_WritePin(SCT_NLA_GPIO_Port, SCT_NLA_Pin, 1);
 80005a4:	4b07      	ldr	r3, [pc, #28]	; (80005c4 <sct_led+0x6c>)
 80005a6:	2201      	movs	r2, #1
 80005a8:	2120      	movs	r1, #32
 80005aa:	0018      	movs	r0, r3
 80005ac:	f000 fc0a 	bl	8000dc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCT_NLA_GPIO_Port, SCT_NLA_Pin, 0);
 80005b0:	4b04      	ldr	r3, [pc, #16]	; (80005c4 <sct_led+0x6c>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	2120      	movs	r1, #32
 80005b6:	0018      	movs	r0, r3
 80005b8:	f000 fc04 	bl	8000dc4 <HAL_GPIO_WritePin>
}
 80005bc:	46c0      	nop			; (mov r8, r8)
 80005be:	46bd      	mov	sp, r7
 80005c0:	b004      	add	sp, #16
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	48000400 	.word	0x48000400

080005c8 <sct_value>:
				0b0111000000001111 << 0,
				0b0110000000001111 << 0,
		},
};

void sct_value(uint16_t value){
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	0002      	movs	r2, r0
 80005d0:	1dbb      	adds	r3, r7, #6
 80005d2:	801a      	strh	r2, [r3, #0]

	uint32_t reg = 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	60fb      	str	r3, [r7, #12]
	reg |= reg_values[0][value / 100 % 10];
 80005d8:	1dbb      	adds	r3, r7, #6
 80005da:	881b      	ldrh	r3, [r3, #0]
 80005dc:	2164      	movs	r1, #100	; 0x64
 80005de:	0018      	movs	r0, r3
 80005e0:	f7ff fd92 	bl	8000108 <__udivsi3>
 80005e4:	0003      	movs	r3, r0
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	210a      	movs	r1, #10
 80005ea:	0018      	movs	r0, r3
 80005ec:	f7ff fe12 	bl	8000214 <__aeabi_uidivmod>
 80005f0:	000b      	movs	r3, r1
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	001a      	movs	r2, r3
 80005f6:	4b1a      	ldr	r3, [pc, #104]	; (8000660 <sct_value+0x98>)
 80005f8:	0092      	lsls	r2, r2, #2
 80005fa:	58d3      	ldr	r3, [r2, r3]
 80005fc:	68fa      	ldr	r2, [r7, #12]
 80005fe:	4313      	orrs	r3, r2
 8000600:	60fb      	str	r3, [r7, #12]
	reg |= reg_values[1][value / 10 % 10];
 8000602:	1dbb      	adds	r3, r7, #6
 8000604:	881b      	ldrh	r3, [r3, #0]
 8000606:	210a      	movs	r1, #10
 8000608:	0018      	movs	r0, r3
 800060a:	f7ff fd7d 	bl	8000108 <__udivsi3>
 800060e:	0003      	movs	r3, r0
 8000610:	b29b      	uxth	r3, r3
 8000612:	210a      	movs	r1, #10
 8000614:	0018      	movs	r0, r3
 8000616:	f7ff fdfd 	bl	8000214 <__aeabi_uidivmod>
 800061a:	000b      	movs	r3, r1
 800061c:	b29b      	uxth	r3, r3
 800061e:	001a      	movs	r2, r3
 8000620:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <sct_value+0x98>)
 8000622:	320a      	adds	r2, #10
 8000624:	0092      	lsls	r2, r2, #2
 8000626:	58d3      	ldr	r3, [r2, r3]
 8000628:	68fa      	ldr	r2, [r7, #12]
 800062a:	4313      	orrs	r3, r2
 800062c:	60fb      	str	r3, [r7, #12]
	reg |= reg_values[2][value / 1 % 10];
 800062e:	1dbb      	adds	r3, r7, #6
 8000630:	881b      	ldrh	r3, [r3, #0]
 8000632:	210a      	movs	r1, #10
 8000634:	0018      	movs	r0, r3
 8000636:	f7ff fded 	bl	8000214 <__aeabi_uidivmod>
 800063a:	000b      	movs	r3, r1
 800063c:	b29b      	uxth	r3, r3
 800063e:	001a      	movs	r2, r3
 8000640:	4b07      	ldr	r3, [pc, #28]	; (8000660 <sct_value+0x98>)
 8000642:	3214      	adds	r2, #20
 8000644:	0092      	lsls	r2, r2, #2
 8000646:	58d3      	ldr	r3, [r2, r3]
 8000648:	68fa      	ldr	r2, [r7, #12]
 800064a:	4313      	orrs	r3, r2
 800064c:	60fb      	str	r3, [r7, #12]
	sct_led(reg);
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	0018      	movs	r0, r3
 8000652:	f7ff ff81 	bl	8000558 <sct_led>

}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	46bd      	mov	sp, r7
 800065a:	b004      	add	sp, #16
 800065c:	bd80      	pop	{r7, pc}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	0800228c 	.word	0x0800228c

08000664 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800066a:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <HAL_MspInit+0x44>)
 800066c:	699a      	ldr	r2, [r3, #24]
 800066e:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <HAL_MspInit+0x44>)
 8000670:	2101      	movs	r1, #1
 8000672:	430a      	orrs	r2, r1
 8000674:	619a      	str	r2, [r3, #24]
 8000676:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <HAL_MspInit+0x44>)
 8000678:	699b      	ldr	r3, [r3, #24]
 800067a:	2201      	movs	r2, #1
 800067c:	4013      	ands	r3, r2
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000682:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <HAL_MspInit+0x44>)
 8000684:	69da      	ldr	r2, [r3, #28]
 8000686:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <HAL_MspInit+0x44>)
 8000688:	2180      	movs	r1, #128	; 0x80
 800068a:	0549      	lsls	r1, r1, #21
 800068c:	430a      	orrs	r2, r1
 800068e:	61da      	str	r2, [r3, #28]
 8000690:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <HAL_MspInit+0x44>)
 8000692:	69da      	ldr	r2, [r3, #28]
 8000694:	2380      	movs	r3, #128	; 0x80
 8000696:	055b      	lsls	r3, r3, #21
 8000698:	4013      	ands	r3, r2
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	46bd      	mov	sp, r7
 80006a2:	b002      	add	sp, #8
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	40021000 	.word	0x40021000

080006ac <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80006ac:	b590      	push	{r4, r7, lr}
 80006ae:	b08b      	sub	sp, #44	; 0x2c
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b4:	2414      	movs	r4, #20
 80006b6:	193b      	adds	r3, r7, r4
 80006b8:	0018      	movs	r0, r3
 80006ba:	2314      	movs	r3, #20
 80006bc:	001a      	movs	r2, r3
 80006be:	2100      	movs	r1, #0
 80006c0:	f001 fdc0 	bl	8002244 <memset>
  if(htim_encoder->Instance==TIM1)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a1d      	ldr	r2, [pc, #116]	; (8000740 <HAL_TIM_Encoder_MspInit+0x94>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d133      	bne.n	8000736 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80006ce:	4b1d      	ldr	r3, [pc, #116]	; (8000744 <HAL_TIM_Encoder_MspInit+0x98>)
 80006d0:	699a      	ldr	r2, [r3, #24]
 80006d2:	4b1c      	ldr	r3, [pc, #112]	; (8000744 <HAL_TIM_Encoder_MspInit+0x98>)
 80006d4:	2180      	movs	r1, #128	; 0x80
 80006d6:	0109      	lsls	r1, r1, #4
 80006d8:	430a      	orrs	r2, r1
 80006da:	619a      	str	r2, [r3, #24]
 80006dc:	4b19      	ldr	r3, [pc, #100]	; (8000744 <HAL_TIM_Encoder_MspInit+0x98>)
 80006de:	699a      	ldr	r2, [r3, #24]
 80006e0:	2380      	movs	r3, #128	; 0x80
 80006e2:	011b      	lsls	r3, r3, #4
 80006e4:	4013      	ands	r3, r2
 80006e6:	613b      	str	r3, [r7, #16]
 80006e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ea:	4b16      	ldr	r3, [pc, #88]	; (8000744 <HAL_TIM_Encoder_MspInit+0x98>)
 80006ec:	695a      	ldr	r2, [r3, #20]
 80006ee:	4b15      	ldr	r3, [pc, #84]	; (8000744 <HAL_TIM_Encoder_MspInit+0x98>)
 80006f0:	2180      	movs	r1, #128	; 0x80
 80006f2:	0289      	lsls	r1, r1, #10
 80006f4:	430a      	orrs	r2, r1
 80006f6:	615a      	str	r2, [r3, #20]
 80006f8:	4b12      	ldr	r3, [pc, #72]	; (8000744 <HAL_TIM_Encoder_MspInit+0x98>)
 80006fa:	695a      	ldr	r2, [r3, #20]
 80006fc:	2380      	movs	r3, #128	; 0x80
 80006fe:	029b      	lsls	r3, r3, #10
 8000700:	4013      	ands	r3, r2
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000706:	193b      	adds	r3, r7, r4
 8000708:	22c0      	movs	r2, #192	; 0xc0
 800070a:	0092      	lsls	r2, r2, #2
 800070c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070e:	0021      	movs	r1, r4
 8000710:	187b      	adds	r3, r7, r1
 8000712:	2202      	movs	r2, #2
 8000714:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	187b      	adds	r3, r7, r1
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071c:	187b      	adds	r3, r7, r1
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000722:	187b      	adds	r3, r7, r1
 8000724:	2202      	movs	r2, #2
 8000726:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000728:	187a      	adds	r2, r7, r1
 800072a:	2390      	movs	r3, #144	; 0x90
 800072c:	05db      	lsls	r3, r3, #23
 800072e:	0011      	movs	r1, r2
 8000730:	0018      	movs	r0, r3
 8000732:	f000 f9d7 	bl	8000ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	46bd      	mov	sp, r7
 800073a:	b00b      	add	sp, #44	; 0x2c
 800073c:	bd90      	pop	{r4, r7, pc}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	40012c00 	.word	0x40012c00
 8000744:	40021000 	.word	0x40021000

08000748 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000748:	b590      	push	{r4, r7, lr}
 800074a:	b08b      	sub	sp, #44	; 0x2c
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000750:	2414      	movs	r4, #20
 8000752:	193b      	adds	r3, r7, r4
 8000754:	0018      	movs	r0, r3
 8000756:	2314      	movs	r3, #20
 8000758:	001a      	movs	r2, r3
 800075a:	2100      	movs	r1, #0
 800075c:	f001 fd72 	bl	8002244 <memset>
  if(huart->Instance==USART2)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a1c      	ldr	r2, [pc, #112]	; (80007d8 <HAL_UART_MspInit+0x90>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d132      	bne.n	80007d0 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800076a:	4b1c      	ldr	r3, [pc, #112]	; (80007dc <HAL_UART_MspInit+0x94>)
 800076c:	69da      	ldr	r2, [r3, #28]
 800076e:	4b1b      	ldr	r3, [pc, #108]	; (80007dc <HAL_UART_MspInit+0x94>)
 8000770:	2180      	movs	r1, #128	; 0x80
 8000772:	0289      	lsls	r1, r1, #10
 8000774:	430a      	orrs	r2, r1
 8000776:	61da      	str	r2, [r3, #28]
 8000778:	4b18      	ldr	r3, [pc, #96]	; (80007dc <HAL_UART_MspInit+0x94>)
 800077a:	69da      	ldr	r2, [r3, #28]
 800077c:	2380      	movs	r3, #128	; 0x80
 800077e:	029b      	lsls	r3, r3, #10
 8000780:	4013      	ands	r3, r2
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	4b15      	ldr	r3, [pc, #84]	; (80007dc <HAL_UART_MspInit+0x94>)
 8000788:	695a      	ldr	r2, [r3, #20]
 800078a:	4b14      	ldr	r3, [pc, #80]	; (80007dc <HAL_UART_MspInit+0x94>)
 800078c:	2180      	movs	r1, #128	; 0x80
 800078e:	0289      	lsls	r1, r1, #10
 8000790:	430a      	orrs	r2, r1
 8000792:	615a      	str	r2, [r3, #20]
 8000794:	4b11      	ldr	r3, [pc, #68]	; (80007dc <HAL_UART_MspInit+0x94>)
 8000796:	695a      	ldr	r2, [r3, #20]
 8000798:	2380      	movs	r3, #128	; 0x80
 800079a:	029b      	lsls	r3, r3, #10
 800079c:	4013      	ands	r3, r2
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007a2:	0021      	movs	r1, r4
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	220c      	movs	r2, #12
 80007a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007aa:	187b      	adds	r3, r7, r1
 80007ac:	2202      	movs	r2, #2
 80007ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	187b      	adds	r3, r7, r1
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b6:	187b      	adds	r3, r7, r1
 80007b8:	2200      	movs	r2, #0
 80007ba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80007bc:	187b      	adds	r3, r7, r1
 80007be:	2201      	movs	r2, #1
 80007c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c2:	187a      	adds	r2, r7, r1
 80007c4:	2390      	movs	r3, #144	; 0x90
 80007c6:	05db      	lsls	r3, r3, #23
 80007c8:	0011      	movs	r1, r2
 80007ca:	0018      	movs	r0, r3
 80007cc:	f000 f98a 	bl	8000ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007d0:	46c0      	nop			; (mov r8, r8)
 80007d2:	46bd      	mov	sp, r7
 80007d4:	b00b      	add	sp, #44	; 0x2c
 80007d6:	bd90      	pop	{r4, r7, pc}
 80007d8:	40004400 	.word	0x40004400
 80007dc:	40021000 	.word	0x40021000

080007e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <NMI_Handler+0x4>

080007e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ea:	e7fe      	b.n	80007ea <HardFault_Handler+0x4>

080007ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007f0:	46c0      	nop			; (mov r8, r8)
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000804:	f000 f87a 	bl	80008fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000808:	46c0      	nop			; (mov r8, r8)
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}

08000818 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000818:	480d      	ldr	r0, [pc, #52]	; (8000850 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800081a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800081c:	480d      	ldr	r0, [pc, #52]	; (8000854 <LoopForever+0x6>)
  ldr r1, =_edata
 800081e:	490e      	ldr	r1, [pc, #56]	; (8000858 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000820:	4a0e      	ldr	r2, [pc, #56]	; (800085c <LoopForever+0xe>)
  movs r3, #0
 8000822:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000824:	e002      	b.n	800082c <LoopCopyDataInit>

08000826 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000826:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000828:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800082a:	3304      	adds	r3, #4

0800082c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800082c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800082e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000830:	d3f9      	bcc.n	8000826 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000832:	4a0b      	ldr	r2, [pc, #44]	; (8000860 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000834:	4c0b      	ldr	r4, [pc, #44]	; (8000864 <LoopForever+0x16>)
  movs r3, #0
 8000836:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000838:	e001      	b.n	800083e <LoopFillZerobss>

0800083a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800083a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800083c:	3204      	adds	r2, #4

0800083e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800083e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000840:	d3fb      	bcc.n	800083a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000842:	f7ff ffe4 	bl	800080e <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000846:	f001 fcd9 	bl	80021fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800084a:	f7ff fce9 	bl	8000220 <main>

0800084e <LoopForever>:

LoopForever:
    b LoopForever
 800084e:	e7fe      	b.n	800084e <LoopForever>
  ldr   r0, =_estack
 8000850:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000854:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000858:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800085c:	08002324 	.word	0x08002324
  ldr r2, =_sbss
 8000860:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000864:	200000f8 	.word	0x200000f8

08000868 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000868:	e7fe      	b.n	8000868 <ADC1_IRQHandler>
	...

0800086c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000870:	4b07      	ldr	r3, [pc, #28]	; (8000890 <HAL_Init+0x24>)
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <HAL_Init+0x24>)
 8000876:	2110      	movs	r1, #16
 8000878:	430a      	orrs	r2, r1
 800087a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800087c:	2000      	movs	r0, #0
 800087e:	f000 f809 	bl	8000894 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000882:	f7ff feef 	bl	8000664 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000886:	2300      	movs	r3, #0
}
 8000888:	0018      	movs	r0, r3
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	40022000 	.word	0x40022000

08000894 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000894:	b590      	push	{r4, r7, lr}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800089c:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <HAL_InitTick+0x5c>)
 800089e:	681c      	ldr	r4, [r3, #0]
 80008a0:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <HAL_InitTick+0x60>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	0019      	movs	r1, r3
 80008a6:	23fa      	movs	r3, #250	; 0xfa
 80008a8:	0098      	lsls	r0, r3, #2
 80008aa:	f7ff fc2d 	bl	8000108 <__udivsi3>
 80008ae:	0003      	movs	r3, r0
 80008b0:	0019      	movs	r1, r3
 80008b2:	0020      	movs	r0, r4
 80008b4:	f7ff fc28 	bl	8000108 <__udivsi3>
 80008b8:	0003      	movs	r3, r0
 80008ba:	0018      	movs	r0, r3
 80008bc:	f000 f905 	bl	8000aca <HAL_SYSTICK_Config>
 80008c0:	1e03      	subs	r3, r0, #0
 80008c2:	d001      	beq.n	80008c8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80008c4:	2301      	movs	r3, #1
 80008c6:	e00f      	b.n	80008e8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2b03      	cmp	r3, #3
 80008cc:	d80b      	bhi.n	80008e6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008ce:	6879      	ldr	r1, [r7, #4]
 80008d0:	2301      	movs	r3, #1
 80008d2:	425b      	negs	r3, r3
 80008d4:	2200      	movs	r2, #0
 80008d6:	0018      	movs	r0, r3
 80008d8:	f000 f8e2 	bl	8000aa0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <HAL_InitTick+0x64>)
 80008de:	687a      	ldr	r2, [r7, #4]
 80008e0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80008e2:	2300      	movs	r3, #0
 80008e4:	e000      	b.n	80008e8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
}
 80008e8:	0018      	movs	r0, r3
 80008ea:	46bd      	mov	sp, r7
 80008ec:	b003      	add	sp, #12
 80008ee:	bd90      	pop	{r4, r7, pc}
 80008f0:	20000000 	.word	0x20000000
 80008f4:	20000008 	.word	0x20000008
 80008f8:	20000004 	.word	0x20000004

080008fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000900:	4b05      	ldr	r3, [pc, #20]	; (8000918 <HAL_IncTick+0x1c>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	001a      	movs	r2, r3
 8000906:	4b05      	ldr	r3, [pc, #20]	; (800091c <HAL_IncTick+0x20>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	18d2      	adds	r2, r2, r3
 800090c:	4b03      	ldr	r3, [pc, #12]	; (800091c <HAL_IncTick+0x20>)
 800090e:	601a      	str	r2, [r3, #0]
}
 8000910:	46c0      	nop			; (mov r8, r8)
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	46c0      	nop			; (mov r8, r8)
 8000918:	20000008 	.word	0x20000008
 800091c:	200000f4 	.word	0x200000f4

08000920 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  return uwTick;
 8000924:	4b02      	ldr	r3, [pc, #8]	; (8000930 <HAL_GetTick+0x10>)
 8000926:	681b      	ldr	r3, [r3, #0]
}
 8000928:	0018      	movs	r0, r3
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	200000f4 	.word	0x200000f4

08000934 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800093c:	f7ff fff0 	bl	8000920 <HAL_GetTick>
 8000940:	0003      	movs	r3, r0
 8000942:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	3301      	adds	r3, #1
 800094c:	d005      	beq.n	800095a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800094e:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <HAL_Delay+0x44>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	001a      	movs	r2, r3
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	189b      	adds	r3, r3, r2
 8000958:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	f7ff ffe0 	bl	8000920 <HAL_GetTick>
 8000960:	0002      	movs	r2, r0
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	1ad3      	subs	r3, r2, r3
 8000966:	68fa      	ldr	r2, [r7, #12]
 8000968:	429a      	cmp	r2, r3
 800096a:	d8f7      	bhi.n	800095c <HAL_Delay+0x28>
  {
  }
}
 800096c:	46c0      	nop			; (mov r8, r8)
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	46bd      	mov	sp, r7
 8000972:	b004      	add	sp, #16
 8000974:	bd80      	pop	{r7, pc}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	20000008 	.word	0x20000008

0800097c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800097c:	b590      	push	{r4, r7, lr}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	0002      	movs	r2, r0
 8000984:	6039      	str	r1, [r7, #0]
 8000986:	1dfb      	adds	r3, r7, #7
 8000988:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800098a:	1dfb      	adds	r3, r7, #7
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b7f      	cmp	r3, #127	; 0x7f
 8000990:	d828      	bhi.n	80009e4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000992:	4a2f      	ldr	r2, [pc, #188]	; (8000a50 <__NVIC_SetPriority+0xd4>)
 8000994:	1dfb      	adds	r3, r7, #7
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	b25b      	sxtb	r3, r3
 800099a:	089b      	lsrs	r3, r3, #2
 800099c:	33c0      	adds	r3, #192	; 0xc0
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	589b      	ldr	r3, [r3, r2]
 80009a2:	1dfa      	adds	r2, r7, #7
 80009a4:	7812      	ldrb	r2, [r2, #0]
 80009a6:	0011      	movs	r1, r2
 80009a8:	2203      	movs	r2, #3
 80009aa:	400a      	ands	r2, r1
 80009ac:	00d2      	lsls	r2, r2, #3
 80009ae:	21ff      	movs	r1, #255	; 0xff
 80009b0:	4091      	lsls	r1, r2
 80009b2:	000a      	movs	r2, r1
 80009b4:	43d2      	mvns	r2, r2
 80009b6:	401a      	ands	r2, r3
 80009b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	019b      	lsls	r3, r3, #6
 80009be:	22ff      	movs	r2, #255	; 0xff
 80009c0:	401a      	ands	r2, r3
 80009c2:	1dfb      	adds	r3, r7, #7
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	0018      	movs	r0, r3
 80009c8:	2303      	movs	r3, #3
 80009ca:	4003      	ands	r3, r0
 80009cc:	00db      	lsls	r3, r3, #3
 80009ce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009d0:	481f      	ldr	r0, [pc, #124]	; (8000a50 <__NVIC_SetPriority+0xd4>)
 80009d2:	1dfb      	adds	r3, r7, #7
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	b25b      	sxtb	r3, r3
 80009d8:	089b      	lsrs	r3, r3, #2
 80009da:	430a      	orrs	r2, r1
 80009dc:	33c0      	adds	r3, #192	; 0xc0
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009e2:	e031      	b.n	8000a48 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009e4:	4a1b      	ldr	r2, [pc, #108]	; (8000a54 <__NVIC_SetPriority+0xd8>)
 80009e6:	1dfb      	adds	r3, r7, #7
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	0019      	movs	r1, r3
 80009ec:	230f      	movs	r3, #15
 80009ee:	400b      	ands	r3, r1
 80009f0:	3b08      	subs	r3, #8
 80009f2:	089b      	lsrs	r3, r3, #2
 80009f4:	3306      	adds	r3, #6
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	18d3      	adds	r3, r2, r3
 80009fa:	3304      	adds	r3, #4
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	1dfa      	adds	r2, r7, #7
 8000a00:	7812      	ldrb	r2, [r2, #0]
 8000a02:	0011      	movs	r1, r2
 8000a04:	2203      	movs	r2, #3
 8000a06:	400a      	ands	r2, r1
 8000a08:	00d2      	lsls	r2, r2, #3
 8000a0a:	21ff      	movs	r1, #255	; 0xff
 8000a0c:	4091      	lsls	r1, r2
 8000a0e:	000a      	movs	r2, r1
 8000a10:	43d2      	mvns	r2, r2
 8000a12:	401a      	ands	r2, r3
 8000a14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	019b      	lsls	r3, r3, #6
 8000a1a:	22ff      	movs	r2, #255	; 0xff
 8000a1c:	401a      	ands	r2, r3
 8000a1e:	1dfb      	adds	r3, r7, #7
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	0018      	movs	r0, r3
 8000a24:	2303      	movs	r3, #3
 8000a26:	4003      	ands	r3, r0
 8000a28:	00db      	lsls	r3, r3, #3
 8000a2a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a2c:	4809      	ldr	r0, [pc, #36]	; (8000a54 <__NVIC_SetPriority+0xd8>)
 8000a2e:	1dfb      	adds	r3, r7, #7
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	001c      	movs	r4, r3
 8000a34:	230f      	movs	r3, #15
 8000a36:	4023      	ands	r3, r4
 8000a38:	3b08      	subs	r3, #8
 8000a3a:	089b      	lsrs	r3, r3, #2
 8000a3c:	430a      	orrs	r2, r1
 8000a3e:	3306      	adds	r3, #6
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	18c3      	adds	r3, r0, r3
 8000a44:	3304      	adds	r3, #4
 8000a46:	601a      	str	r2, [r3, #0]
}
 8000a48:	46c0      	nop			; (mov r8, r8)
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	b003      	add	sp, #12
 8000a4e:	bd90      	pop	{r4, r7, pc}
 8000a50:	e000e100 	.word	0xe000e100
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	1e5a      	subs	r2, r3, #1
 8000a64:	2380      	movs	r3, #128	; 0x80
 8000a66:	045b      	lsls	r3, r3, #17
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d301      	bcc.n	8000a70 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	e010      	b.n	8000a92 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a70:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <SysTick_Config+0x44>)
 8000a72:	687a      	ldr	r2, [r7, #4]
 8000a74:	3a01      	subs	r2, #1
 8000a76:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a78:	2301      	movs	r3, #1
 8000a7a:	425b      	negs	r3, r3
 8000a7c:	2103      	movs	r1, #3
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f7ff ff7c 	bl	800097c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a84:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <SysTick_Config+0x44>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a8a:	4b04      	ldr	r3, [pc, #16]	; (8000a9c <SysTick_Config+0x44>)
 8000a8c:	2207      	movs	r2, #7
 8000a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a90:	2300      	movs	r3, #0
}
 8000a92:	0018      	movs	r0, r3
 8000a94:	46bd      	mov	sp, r7
 8000a96:	b002      	add	sp, #8
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	e000e010 	.word	0xe000e010

08000aa0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60b9      	str	r1, [r7, #8]
 8000aa8:	607a      	str	r2, [r7, #4]
 8000aaa:	210f      	movs	r1, #15
 8000aac:	187b      	adds	r3, r7, r1
 8000aae:	1c02      	adds	r2, r0, #0
 8000ab0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000ab2:	68ba      	ldr	r2, [r7, #8]
 8000ab4:	187b      	adds	r3, r7, r1
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	b25b      	sxtb	r3, r3
 8000aba:	0011      	movs	r1, r2
 8000abc:	0018      	movs	r0, r3
 8000abe:	f7ff ff5d 	bl	800097c <__NVIC_SetPriority>
}
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	b004      	add	sp, #16
 8000ac8:	bd80      	pop	{r7, pc}

08000aca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	b082      	sub	sp, #8
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f7ff ffbf 	bl	8000a58 <SysTick_Config>
 8000ada:	0003      	movs	r3, r0
}
 8000adc:	0018      	movs	r0, r3
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	b002      	add	sp, #8
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b086      	sub	sp, #24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aee:	2300      	movs	r3, #0
 8000af0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000af2:	e14f      	b.n	8000d94 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2101      	movs	r1, #1
 8000afa:	697a      	ldr	r2, [r7, #20]
 8000afc:	4091      	lsls	r1, r2
 8000afe:	000a      	movs	r2, r1
 8000b00:	4013      	ands	r3, r2
 8000b02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d100      	bne.n	8000b0c <HAL_GPIO_Init+0x28>
 8000b0a:	e140      	b.n	8000d8e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	2203      	movs	r2, #3
 8000b12:	4013      	ands	r3, r2
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d005      	beq.n	8000b24 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	2203      	movs	r2, #3
 8000b1e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b20:	2b02      	cmp	r3, #2
 8000b22:	d130      	bne.n	8000b86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	689b      	ldr	r3, [r3, #8]
 8000b28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	005b      	lsls	r3, r3, #1
 8000b2e:	2203      	movs	r2, #3
 8000b30:	409a      	lsls	r2, r3
 8000b32:	0013      	movs	r3, r2
 8000b34:	43da      	mvns	r2, r3
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	68da      	ldr	r2, [r3, #12]
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	409a      	lsls	r2, r3
 8000b46:	0013      	movs	r3, r2
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	693a      	ldr	r2, [r7, #16]
 8000b52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	409a      	lsls	r2, r3
 8000b60:	0013      	movs	r3, r2
 8000b62:	43da      	mvns	r2, r3
 8000b64:	693b      	ldr	r3, [r7, #16]
 8000b66:	4013      	ands	r3, r2
 8000b68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	091b      	lsrs	r3, r3, #4
 8000b70:	2201      	movs	r2, #1
 8000b72:	401a      	ands	r2, r3
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	409a      	lsls	r2, r3
 8000b78:	0013      	movs	r3, r2
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	2203      	movs	r2, #3
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	2b03      	cmp	r3, #3
 8000b90:	d017      	beq.n	8000bc2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	68db      	ldr	r3, [r3, #12]
 8000b96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	2203      	movs	r2, #3
 8000b9e:	409a      	lsls	r2, r3
 8000ba0:	0013      	movs	r3, r2
 8000ba2:	43da      	mvns	r2, r3
 8000ba4:	693b      	ldr	r3, [r7, #16]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	689a      	ldr	r2, [r3, #8]
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	409a      	lsls	r2, r3
 8000bb4:	0013      	movs	r3, r2
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	2203      	movs	r2, #3
 8000bc8:	4013      	ands	r3, r2
 8000bca:	2b02      	cmp	r3, #2
 8000bcc:	d123      	bne.n	8000c16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	08da      	lsrs	r2, r3, #3
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	3208      	adds	r2, #8
 8000bd6:	0092      	lsls	r2, r2, #2
 8000bd8:	58d3      	ldr	r3, [r2, r3]
 8000bda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	2207      	movs	r2, #7
 8000be0:	4013      	ands	r3, r2
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	220f      	movs	r2, #15
 8000be6:	409a      	lsls	r2, r3
 8000be8:	0013      	movs	r3, r2
 8000bea:	43da      	mvns	r2, r3
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	691a      	ldr	r2, [r3, #16]
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	2107      	movs	r1, #7
 8000bfa:	400b      	ands	r3, r1
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	409a      	lsls	r2, r3
 8000c00:	0013      	movs	r3, r2
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	08da      	lsrs	r2, r3, #3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3208      	adds	r2, #8
 8000c10:	0092      	lsls	r2, r2, #2
 8000c12:	6939      	ldr	r1, [r7, #16]
 8000c14:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	2203      	movs	r2, #3
 8000c22:	409a      	lsls	r2, r3
 8000c24:	0013      	movs	r3, r2
 8000c26:	43da      	mvns	r2, r3
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	2203      	movs	r2, #3
 8000c34:	401a      	ands	r2, r3
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	409a      	lsls	r2, r3
 8000c3c:	0013      	movs	r3, r2
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	4313      	orrs	r3, r2
 8000c42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685a      	ldr	r2, [r3, #4]
 8000c4e:	23c0      	movs	r3, #192	; 0xc0
 8000c50:	029b      	lsls	r3, r3, #10
 8000c52:	4013      	ands	r3, r2
 8000c54:	d100      	bne.n	8000c58 <HAL_GPIO_Init+0x174>
 8000c56:	e09a      	b.n	8000d8e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c58:	4b54      	ldr	r3, [pc, #336]	; (8000dac <HAL_GPIO_Init+0x2c8>)
 8000c5a:	699a      	ldr	r2, [r3, #24]
 8000c5c:	4b53      	ldr	r3, [pc, #332]	; (8000dac <HAL_GPIO_Init+0x2c8>)
 8000c5e:	2101      	movs	r1, #1
 8000c60:	430a      	orrs	r2, r1
 8000c62:	619a      	str	r2, [r3, #24]
 8000c64:	4b51      	ldr	r3, [pc, #324]	; (8000dac <HAL_GPIO_Init+0x2c8>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	2201      	movs	r2, #1
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c70:	4a4f      	ldr	r2, [pc, #316]	; (8000db0 <HAL_GPIO_Init+0x2cc>)
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	089b      	lsrs	r3, r3, #2
 8000c76:	3302      	adds	r3, #2
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	589b      	ldr	r3, [r3, r2]
 8000c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	2203      	movs	r2, #3
 8000c82:	4013      	ands	r3, r2
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	220f      	movs	r2, #15
 8000c88:	409a      	lsls	r2, r3
 8000c8a:	0013      	movs	r3, r2
 8000c8c:	43da      	mvns	r2, r3
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	4013      	ands	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c94:	687a      	ldr	r2, [r7, #4]
 8000c96:	2390      	movs	r3, #144	; 0x90
 8000c98:	05db      	lsls	r3, r3, #23
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	d013      	beq.n	8000cc6 <HAL_GPIO_Init+0x1e2>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4a44      	ldr	r2, [pc, #272]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d00d      	beq.n	8000cc2 <HAL_GPIO_Init+0x1de>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4a43      	ldr	r2, [pc, #268]	; (8000db8 <HAL_GPIO_Init+0x2d4>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d007      	beq.n	8000cbe <HAL_GPIO_Init+0x1da>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a42      	ldr	r2, [pc, #264]	; (8000dbc <HAL_GPIO_Init+0x2d8>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d101      	bne.n	8000cba <HAL_GPIO_Init+0x1d6>
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	e006      	b.n	8000cc8 <HAL_GPIO_Init+0x1e4>
 8000cba:	2305      	movs	r3, #5
 8000cbc:	e004      	b.n	8000cc8 <HAL_GPIO_Init+0x1e4>
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	e002      	b.n	8000cc8 <HAL_GPIO_Init+0x1e4>
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e000      	b.n	8000cc8 <HAL_GPIO_Init+0x1e4>
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	697a      	ldr	r2, [r7, #20]
 8000cca:	2103      	movs	r1, #3
 8000ccc:	400a      	ands	r2, r1
 8000cce:	0092      	lsls	r2, r2, #2
 8000cd0:	4093      	lsls	r3, r2
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cd8:	4935      	ldr	r1, [pc, #212]	; (8000db0 <HAL_GPIO_Init+0x2cc>)
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	089b      	lsrs	r3, r3, #2
 8000cde:	3302      	adds	r3, #2
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ce6:	4b36      	ldr	r3, [pc, #216]	; (8000dc0 <HAL_GPIO_Init+0x2dc>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	43da      	mvns	r2, r3
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685a      	ldr	r2, [r3, #4]
 8000cfa:	2380      	movs	r3, #128	; 0x80
 8000cfc:	025b      	lsls	r3, r3, #9
 8000cfe:	4013      	ands	r3, r2
 8000d00:	d003      	beq.n	8000d0a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d0a:	4b2d      	ldr	r3, [pc, #180]	; (8000dc0 <HAL_GPIO_Init+0x2dc>)
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000d10:	4b2b      	ldr	r3, [pc, #172]	; (8000dc0 <HAL_GPIO_Init+0x2dc>)
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	43da      	mvns	r2, r3
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685a      	ldr	r2, [r3, #4]
 8000d24:	2380      	movs	r3, #128	; 0x80
 8000d26:	029b      	lsls	r3, r3, #10
 8000d28:	4013      	ands	r3, r2
 8000d2a:	d003      	beq.n	8000d34 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d34:	4b22      	ldr	r3, [pc, #136]	; (8000dc0 <HAL_GPIO_Init+0x2dc>)
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d3a:	4b21      	ldr	r3, [pc, #132]	; (8000dc0 <HAL_GPIO_Init+0x2dc>)
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	43da      	mvns	r2, r3
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	4013      	ands	r3, r2
 8000d48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685a      	ldr	r2, [r3, #4]
 8000d4e:	2380      	movs	r3, #128	; 0x80
 8000d50:	035b      	lsls	r3, r3, #13
 8000d52:	4013      	ands	r3, r2
 8000d54:	d003      	beq.n	8000d5e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d5e:	4b18      	ldr	r3, [pc, #96]	; (8000dc0 <HAL_GPIO_Init+0x2dc>)
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000d64:	4b16      	ldr	r3, [pc, #88]	; (8000dc0 <HAL_GPIO_Init+0x2dc>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	43da      	mvns	r2, r3
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	4013      	ands	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685a      	ldr	r2, [r3, #4]
 8000d78:	2380      	movs	r3, #128	; 0x80
 8000d7a:	039b      	lsls	r3, r3, #14
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	d003      	beq.n	8000d88 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d88:	4b0d      	ldr	r3, [pc, #52]	; (8000dc0 <HAL_GPIO_Init+0x2dc>)
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	3301      	adds	r3, #1
 8000d92:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	40da      	lsrs	r2, r3
 8000d9c:	1e13      	subs	r3, r2, #0
 8000d9e:	d000      	beq.n	8000da2 <HAL_GPIO_Init+0x2be>
 8000da0:	e6a8      	b.n	8000af4 <HAL_GPIO_Init+0x10>
  } 
}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	46c0      	nop			; (mov r8, r8)
 8000da6:	46bd      	mov	sp, r7
 8000da8:	b006      	add	sp, #24
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40021000 	.word	0x40021000
 8000db0:	40010000 	.word	0x40010000
 8000db4:	48000400 	.word	0x48000400
 8000db8:	48000800 	.word	0x48000800
 8000dbc:	48000c00 	.word	0x48000c00
 8000dc0:	40010400 	.word	0x40010400

08000dc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	0008      	movs	r0, r1
 8000dce:	0011      	movs	r1, r2
 8000dd0:	1cbb      	adds	r3, r7, #2
 8000dd2:	1c02      	adds	r2, r0, #0
 8000dd4:	801a      	strh	r2, [r3, #0]
 8000dd6:	1c7b      	adds	r3, r7, #1
 8000dd8:	1c0a      	adds	r2, r1, #0
 8000dda:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ddc:	1c7b      	adds	r3, r7, #1
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d004      	beq.n	8000dee <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000de4:	1cbb      	adds	r3, r7, #2
 8000de6:	881a      	ldrh	r2, [r3, #0]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000dec:	e003      	b.n	8000df6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dee:	1cbb      	adds	r3, r7, #2
 8000df0:	881a      	ldrh	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000df6:	46c0      	nop			; (mov r8, r8)
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	b002      	add	sp, #8
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b088      	sub	sp, #32
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d101      	bne.n	8000e12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e301      	b.n	8001416 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2201      	movs	r2, #1
 8000e18:	4013      	ands	r3, r2
 8000e1a:	d100      	bne.n	8000e1e <HAL_RCC_OscConfig+0x1e>
 8000e1c:	e08d      	b.n	8000f3a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e1e:	4bc3      	ldr	r3, [pc, #780]	; (800112c <HAL_RCC_OscConfig+0x32c>)
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	220c      	movs	r2, #12
 8000e24:	4013      	ands	r3, r2
 8000e26:	2b04      	cmp	r3, #4
 8000e28:	d00e      	beq.n	8000e48 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e2a:	4bc0      	ldr	r3, [pc, #768]	; (800112c <HAL_RCC_OscConfig+0x32c>)
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	220c      	movs	r2, #12
 8000e30:	4013      	ands	r3, r2
 8000e32:	2b08      	cmp	r3, #8
 8000e34:	d116      	bne.n	8000e64 <HAL_RCC_OscConfig+0x64>
 8000e36:	4bbd      	ldr	r3, [pc, #756]	; (800112c <HAL_RCC_OscConfig+0x32c>)
 8000e38:	685a      	ldr	r2, [r3, #4]
 8000e3a:	2380      	movs	r3, #128	; 0x80
 8000e3c:	025b      	lsls	r3, r3, #9
 8000e3e:	401a      	ands	r2, r3
 8000e40:	2380      	movs	r3, #128	; 0x80
 8000e42:	025b      	lsls	r3, r3, #9
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d10d      	bne.n	8000e64 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e48:	4bb8      	ldr	r3, [pc, #736]	; (800112c <HAL_RCC_OscConfig+0x32c>)
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	2380      	movs	r3, #128	; 0x80
 8000e4e:	029b      	lsls	r3, r3, #10
 8000e50:	4013      	ands	r3, r2
 8000e52:	d100      	bne.n	8000e56 <HAL_RCC_OscConfig+0x56>
 8000e54:	e070      	b.n	8000f38 <HAL_RCC_OscConfig+0x138>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d000      	beq.n	8000e60 <HAL_RCC_OscConfig+0x60>
 8000e5e:	e06b      	b.n	8000f38 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000e60:	2301      	movs	r3, #1
 8000e62:	e2d8      	b.n	8001416 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d107      	bne.n	8000e7c <HAL_RCC_OscConfig+0x7c>
 8000e6c:	4baf      	ldr	r3, [pc, #700]	; (800112c <HAL_RCC_OscConfig+0x32c>)
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	4bae      	ldr	r3, [pc, #696]	; (800112c <HAL_RCC_OscConfig+0x32c>)
 8000e72:	2180      	movs	r1, #128	; 0x80
 8000e74:	0249      	lsls	r1, r1, #9
 8000e76:	430a      	orrs	r2, r1
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	e02f      	b.n	8000edc <HAL_RCC_OscConfig+0xdc>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d10c      	bne.n	8000e9e <HAL_RCC_OscConfig+0x9e>
 8000e84:	4ba9      	ldr	r3, [pc, #676]	; (800112c <HAL_RCC_OscConfig+0x32c>)
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	4ba8      	ldr	r3, [pc, #672]	; (800112c <HAL_RCC_OscConfig+0x32c>)
 8000e8a:	49a9      	ldr	r1, [pc, #676]	; (8001130 <HAL_RCC_OscConfig+0x330>)
 8000e8c:	400a      	ands	r2, r1
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	4ba6      	ldr	r3, [pc, #664]	; (800112c <HAL_RCC_OscConfig+0x32c>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4ba5      	ldr	r3, [pc, #660]	; (800112c <HAL_RCC_OscConfig+0x32c>)
 8000e96:	49a7      	ldr	r1, [pc, #668]	; (8001134 <HAL_RCC_OscConfig+0x334>)
 8000e98:	400a      	ands	r2, r1
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	e01e      	b.n	8000edc <HAL_RCC_OscConfig+0xdc>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	2b05      	cmp	r3, #5
 8000ea4:	d10e      	bne.n	8000ec4 <HAL_RCC_OscConfig+0xc4>
 8000ea6:	4ba1      	ldr	r3, [pc, #644]	; (800112c <HAL_RCC_OscConfig+0x32c>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	4ba0      	ldr	r3, [pc, #640]	; (800112c <HAL_RCC_OscConfig+0x32c>)
 8000eac:	2180      	movs	r1, #128	; 0x80
 8000eae:	02c9      	lsls	r1, r1, #11
 8000eb0:	430a      	orrs	r2, r1
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	4b9d      	ldr	r3, [pc, #628]	; (800112c <HAL_RCC_OscConfig+0x32c>)
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	4b9c      	ldr	r3, [pc, #624]	; (800112c <HAL_RCC_OscConfig+0x32c>)
 8000eba:	2180      	movs	r1, #128	; 0x80
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	430a      	orrs	r2, r1
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	e00b      	b.n	8000edc <HAL_RCC_OscConfig+0xdc>
 8000ec4:	4b99      	ldr	r3, [pc, #612]	; (800112c <HAL_RCC_OscConfig+0x32c>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	4b98      	ldr	r3, [pc, #608]	; (800112c <HAL_RCC_OscConfig+0x32c>)
 8000eca:	4999      	ldr	r1, [pc, #612]	; (8001130 <HAL_RCC_OscConfig+0x330>)
 8000ecc:	400a      	ands	r2, r1
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	4b96      	ldr	r3, [pc, #600]	; (800112c <HAL_RCC_OscConfig+0x32c>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b95      	ldr	r3, [pc, #596]	; (800112c <HAL_RCC_OscConfig+0x32c>)
 8000ed6:	4997      	ldr	r1, [pc, #604]	; (8001134 <HAL_RCC_OscConfig+0x334>)
 8000ed8:	400a      	ands	r2, r1
 8000eda:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d014      	beq.n	8000f0e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee4:	f7ff fd1c 	bl	8000920 <HAL_GetTick>
 8000ee8:	0003      	movs	r3, r0
 8000eea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eec:	e008      	b.n	8000f00 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eee:	f7ff fd17 	bl	8000920 <HAL_GetTick>
 8000ef2:	0002      	movs	r2, r0
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	2b64      	cmp	r3, #100	; 0x64
 8000efa:	d901      	bls.n	8000f00 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000efc:	2303      	movs	r3, #3
 8000efe:	e28a      	b.n	8001416 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f00:	4b8a      	ldr	r3, [pc, #552]	; (800112c <HAL_RCC_OscConfig+0x32c>)
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	2380      	movs	r3, #128	; 0x80
 8000f06:	029b      	lsls	r3, r3, #10
 8000f08:	4013      	ands	r3, r2
 8000f0a:	d0f0      	beq.n	8000eee <HAL_RCC_OscConfig+0xee>
 8000f0c:	e015      	b.n	8000f3a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f0e:	f7ff fd07 	bl	8000920 <HAL_GetTick>
 8000f12:	0003      	movs	r3, r0
 8000f14:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f16:	e008      	b.n	8000f2a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f18:	f7ff fd02 	bl	8000920 <HAL_GetTick>
 8000f1c:	0002      	movs	r2, r0
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	2b64      	cmp	r3, #100	; 0x64
 8000f24:	d901      	bls.n	8000f2a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000f26:	2303      	movs	r3, #3
 8000f28:	e275      	b.n	8001416 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f2a:	4b80      	ldr	r3, [pc, #512]	; (800112c <HAL_RCC_OscConfig+0x32c>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	2380      	movs	r3, #128	; 0x80
 8000f30:	029b      	lsls	r3, r3, #10
 8000f32:	4013      	ands	r3, r2
 8000f34:	d1f0      	bne.n	8000f18 <HAL_RCC_OscConfig+0x118>
 8000f36:	e000      	b.n	8000f3a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f38:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2202      	movs	r2, #2
 8000f40:	4013      	ands	r3, r2
 8000f42:	d100      	bne.n	8000f46 <HAL_RCC_OscConfig+0x146>
 8000f44:	e069      	b.n	800101a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f46:	4b79      	ldr	r3, [pc, #484]	; (800112c <HAL_RCC_OscConfig+0x32c>)
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	220c      	movs	r2, #12
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	d00b      	beq.n	8000f68 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f50:	4b76      	ldr	r3, [pc, #472]	; (800112c <HAL_RCC_OscConfig+0x32c>)
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	220c      	movs	r2, #12
 8000f56:	4013      	ands	r3, r2
 8000f58:	2b08      	cmp	r3, #8
 8000f5a:	d11c      	bne.n	8000f96 <HAL_RCC_OscConfig+0x196>
 8000f5c:	4b73      	ldr	r3, [pc, #460]	; (800112c <HAL_RCC_OscConfig+0x32c>)
 8000f5e:	685a      	ldr	r2, [r3, #4]
 8000f60:	2380      	movs	r3, #128	; 0x80
 8000f62:	025b      	lsls	r3, r3, #9
 8000f64:	4013      	ands	r3, r2
 8000f66:	d116      	bne.n	8000f96 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f68:	4b70      	ldr	r3, [pc, #448]	; (800112c <HAL_RCC_OscConfig+0x32c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2202      	movs	r2, #2
 8000f6e:	4013      	ands	r3, r2
 8000f70:	d005      	beq.n	8000f7e <HAL_RCC_OscConfig+0x17e>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	68db      	ldr	r3, [r3, #12]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d001      	beq.n	8000f7e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e24b      	b.n	8001416 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f7e:	4b6b      	ldr	r3, [pc, #428]	; (800112c <HAL_RCC_OscConfig+0x32c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	22f8      	movs	r2, #248	; 0xf8
 8000f84:	4393      	bics	r3, r2
 8000f86:	0019      	movs	r1, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	691b      	ldr	r3, [r3, #16]
 8000f8c:	00da      	lsls	r2, r3, #3
 8000f8e:	4b67      	ldr	r3, [pc, #412]	; (800112c <HAL_RCC_OscConfig+0x32c>)
 8000f90:	430a      	orrs	r2, r1
 8000f92:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f94:	e041      	b.n	800101a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	68db      	ldr	r3, [r3, #12]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d024      	beq.n	8000fe8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f9e:	4b63      	ldr	r3, [pc, #396]	; (800112c <HAL_RCC_OscConfig+0x32c>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	4b62      	ldr	r3, [pc, #392]	; (800112c <HAL_RCC_OscConfig+0x32c>)
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	430a      	orrs	r2, r1
 8000fa8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000faa:	f7ff fcb9 	bl	8000920 <HAL_GetTick>
 8000fae:	0003      	movs	r3, r0
 8000fb0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fb2:	e008      	b.n	8000fc6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fb4:	f7ff fcb4 	bl	8000920 <HAL_GetTick>
 8000fb8:	0002      	movs	r2, r0
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d901      	bls.n	8000fc6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e227      	b.n	8001416 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fc6:	4b59      	ldr	r3, [pc, #356]	; (800112c <HAL_RCC_OscConfig+0x32c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2202      	movs	r2, #2
 8000fcc:	4013      	ands	r3, r2
 8000fce:	d0f1      	beq.n	8000fb4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fd0:	4b56      	ldr	r3, [pc, #344]	; (800112c <HAL_RCC_OscConfig+0x32c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	22f8      	movs	r2, #248	; 0xf8
 8000fd6:	4393      	bics	r3, r2
 8000fd8:	0019      	movs	r1, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	691b      	ldr	r3, [r3, #16]
 8000fde:	00da      	lsls	r2, r3, #3
 8000fe0:	4b52      	ldr	r3, [pc, #328]	; (800112c <HAL_RCC_OscConfig+0x32c>)
 8000fe2:	430a      	orrs	r2, r1
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	e018      	b.n	800101a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fe8:	4b50      	ldr	r3, [pc, #320]	; (800112c <HAL_RCC_OscConfig+0x32c>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4b4f      	ldr	r3, [pc, #316]	; (800112c <HAL_RCC_OscConfig+0x32c>)
 8000fee:	2101      	movs	r1, #1
 8000ff0:	438a      	bics	r2, r1
 8000ff2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff4:	f7ff fc94 	bl	8000920 <HAL_GetTick>
 8000ff8:	0003      	movs	r3, r0
 8000ffa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ffc:	e008      	b.n	8001010 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ffe:	f7ff fc8f 	bl	8000920 <HAL_GetTick>
 8001002:	0002      	movs	r2, r0
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	2b02      	cmp	r3, #2
 800100a:	d901      	bls.n	8001010 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800100c:	2303      	movs	r3, #3
 800100e:	e202      	b.n	8001416 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001010:	4b46      	ldr	r3, [pc, #280]	; (800112c <HAL_RCC_OscConfig+0x32c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2202      	movs	r2, #2
 8001016:	4013      	ands	r3, r2
 8001018:	d1f1      	bne.n	8000ffe <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2208      	movs	r2, #8
 8001020:	4013      	ands	r3, r2
 8001022:	d036      	beq.n	8001092 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	69db      	ldr	r3, [r3, #28]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d019      	beq.n	8001060 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800102c:	4b3f      	ldr	r3, [pc, #252]	; (800112c <HAL_RCC_OscConfig+0x32c>)
 800102e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001030:	4b3e      	ldr	r3, [pc, #248]	; (800112c <HAL_RCC_OscConfig+0x32c>)
 8001032:	2101      	movs	r1, #1
 8001034:	430a      	orrs	r2, r1
 8001036:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001038:	f7ff fc72 	bl	8000920 <HAL_GetTick>
 800103c:	0003      	movs	r3, r0
 800103e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001040:	e008      	b.n	8001054 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001042:	f7ff fc6d 	bl	8000920 <HAL_GetTick>
 8001046:	0002      	movs	r2, r0
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	2b02      	cmp	r3, #2
 800104e:	d901      	bls.n	8001054 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001050:	2303      	movs	r3, #3
 8001052:	e1e0      	b.n	8001416 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001054:	4b35      	ldr	r3, [pc, #212]	; (800112c <HAL_RCC_OscConfig+0x32c>)
 8001056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001058:	2202      	movs	r2, #2
 800105a:	4013      	ands	r3, r2
 800105c:	d0f1      	beq.n	8001042 <HAL_RCC_OscConfig+0x242>
 800105e:	e018      	b.n	8001092 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001060:	4b32      	ldr	r3, [pc, #200]	; (800112c <HAL_RCC_OscConfig+0x32c>)
 8001062:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001064:	4b31      	ldr	r3, [pc, #196]	; (800112c <HAL_RCC_OscConfig+0x32c>)
 8001066:	2101      	movs	r1, #1
 8001068:	438a      	bics	r2, r1
 800106a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800106c:	f7ff fc58 	bl	8000920 <HAL_GetTick>
 8001070:	0003      	movs	r3, r0
 8001072:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001074:	e008      	b.n	8001088 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001076:	f7ff fc53 	bl	8000920 <HAL_GetTick>
 800107a:	0002      	movs	r2, r0
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	2b02      	cmp	r3, #2
 8001082:	d901      	bls.n	8001088 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001084:	2303      	movs	r3, #3
 8001086:	e1c6      	b.n	8001416 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001088:	4b28      	ldr	r3, [pc, #160]	; (800112c <HAL_RCC_OscConfig+0x32c>)
 800108a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108c:	2202      	movs	r2, #2
 800108e:	4013      	ands	r3, r2
 8001090:	d1f1      	bne.n	8001076 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2204      	movs	r2, #4
 8001098:	4013      	ands	r3, r2
 800109a:	d100      	bne.n	800109e <HAL_RCC_OscConfig+0x29e>
 800109c:	e0b4      	b.n	8001208 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800109e:	201f      	movs	r0, #31
 80010a0:	183b      	adds	r3, r7, r0
 80010a2:	2200      	movs	r2, #0
 80010a4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010a6:	4b21      	ldr	r3, [pc, #132]	; (800112c <HAL_RCC_OscConfig+0x32c>)
 80010a8:	69da      	ldr	r2, [r3, #28]
 80010aa:	2380      	movs	r3, #128	; 0x80
 80010ac:	055b      	lsls	r3, r3, #21
 80010ae:	4013      	ands	r3, r2
 80010b0:	d110      	bne.n	80010d4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010b2:	4b1e      	ldr	r3, [pc, #120]	; (800112c <HAL_RCC_OscConfig+0x32c>)
 80010b4:	69da      	ldr	r2, [r3, #28]
 80010b6:	4b1d      	ldr	r3, [pc, #116]	; (800112c <HAL_RCC_OscConfig+0x32c>)
 80010b8:	2180      	movs	r1, #128	; 0x80
 80010ba:	0549      	lsls	r1, r1, #21
 80010bc:	430a      	orrs	r2, r1
 80010be:	61da      	str	r2, [r3, #28]
 80010c0:	4b1a      	ldr	r3, [pc, #104]	; (800112c <HAL_RCC_OscConfig+0x32c>)
 80010c2:	69da      	ldr	r2, [r3, #28]
 80010c4:	2380      	movs	r3, #128	; 0x80
 80010c6:	055b      	lsls	r3, r3, #21
 80010c8:	4013      	ands	r3, r2
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80010ce:	183b      	adds	r3, r7, r0
 80010d0:	2201      	movs	r2, #1
 80010d2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010d4:	4b18      	ldr	r3, [pc, #96]	; (8001138 <HAL_RCC_OscConfig+0x338>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	2380      	movs	r3, #128	; 0x80
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	4013      	ands	r3, r2
 80010de:	d11a      	bne.n	8001116 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010e0:	4b15      	ldr	r3, [pc, #84]	; (8001138 <HAL_RCC_OscConfig+0x338>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	4b14      	ldr	r3, [pc, #80]	; (8001138 <HAL_RCC_OscConfig+0x338>)
 80010e6:	2180      	movs	r1, #128	; 0x80
 80010e8:	0049      	lsls	r1, r1, #1
 80010ea:	430a      	orrs	r2, r1
 80010ec:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010ee:	f7ff fc17 	bl	8000920 <HAL_GetTick>
 80010f2:	0003      	movs	r3, r0
 80010f4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010f6:	e008      	b.n	800110a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010f8:	f7ff fc12 	bl	8000920 <HAL_GetTick>
 80010fc:	0002      	movs	r2, r0
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b64      	cmp	r3, #100	; 0x64
 8001104:	d901      	bls.n	800110a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e185      	b.n	8001416 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800110a:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <HAL_RCC_OscConfig+0x338>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	2380      	movs	r3, #128	; 0x80
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	4013      	ands	r3, r2
 8001114:	d0f0      	beq.n	80010f8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d10e      	bne.n	800113c <HAL_RCC_OscConfig+0x33c>
 800111e:	4b03      	ldr	r3, [pc, #12]	; (800112c <HAL_RCC_OscConfig+0x32c>)
 8001120:	6a1a      	ldr	r2, [r3, #32]
 8001122:	4b02      	ldr	r3, [pc, #8]	; (800112c <HAL_RCC_OscConfig+0x32c>)
 8001124:	2101      	movs	r1, #1
 8001126:	430a      	orrs	r2, r1
 8001128:	621a      	str	r2, [r3, #32]
 800112a:	e035      	b.n	8001198 <HAL_RCC_OscConfig+0x398>
 800112c:	40021000 	.word	0x40021000
 8001130:	fffeffff 	.word	0xfffeffff
 8001134:	fffbffff 	.word	0xfffbffff
 8001138:	40007000 	.word	0x40007000
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d10c      	bne.n	800115e <HAL_RCC_OscConfig+0x35e>
 8001144:	4bb6      	ldr	r3, [pc, #728]	; (8001420 <HAL_RCC_OscConfig+0x620>)
 8001146:	6a1a      	ldr	r2, [r3, #32]
 8001148:	4bb5      	ldr	r3, [pc, #724]	; (8001420 <HAL_RCC_OscConfig+0x620>)
 800114a:	2101      	movs	r1, #1
 800114c:	438a      	bics	r2, r1
 800114e:	621a      	str	r2, [r3, #32]
 8001150:	4bb3      	ldr	r3, [pc, #716]	; (8001420 <HAL_RCC_OscConfig+0x620>)
 8001152:	6a1a      	ldr	r2, [r3, #32]
 8001154:	4bb2      	ldr	r3, [pc, #712]	; (8001420 <HAL_RCC_OscConfig+0x620>)
 8001156:	2104      	movs	r1, #4
 8001158:	438a      	bics	r2, r1
 800115a:	621a      	str	r2, [r3, #32]
 800115c:	e01c      	b.n	8001198 <HAL_RCC_OscConfig+0x398>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	2b05      	cmp	r3, #5
 8001164:	d10c      	bne.n	8001180 <HAL_RCC_OscConfig+0x380>
 8001166:	4bae      	ldr	r3, [pc, #696]	; (8001420 <HAL_RCC_OscConfig+0x620>)
 8001168:	6a1a      	ldr	r2, [r3, #32]
 800116a:	4bad      	ldr	r3, [pc, #692]	; (8001420 <HAL_RCC_OscConfig+0x620>)
 800116c:	2104      	movs	r1, #4
 800116e:	430a      	orrs	r2, r1
 8001170:	621a      	str	r2, [r3, #32]
 8001172:	4bab      	ldr	r3, [pc, #684]	; (8001420 <HAL_RCC_OscConfig+0x620>)
 8001174:	6a1a      	ldr	r2, [r3, #32]
 8001176:	4baa      	ldr	r3, [pc, #680]	; (8001420 <HAL_RCC_OscConfig+0x620>)
 8001178:	2101      	movs	r1, #1
 800117a:	430a      	orrs	r2, r1
 800117c:	621a      	str	r2, [r3, #32]
 800117e:	e00b      	b.n	8001198 <HAL_RCC_OscConfig+0x398>
 8001180:	4ba7      	ldr	r3, [pc, #668]	; (8001420 <HAL_RCC_OscConfig+0x620>)
 8001182:	6a1a      	ldr	r2, [r3, #32]
 8001184:	4ba6      	ldr	r3, [pc, #664]	; (8001420 <HAL_RCC_OscConfig+0x620>)
 8001186:	2101      	movs	r1, #1
 8001188:	438a      	bics	r2, r1
 800118a:	621a      	str	r2, [r3, #32]
 800118c:	4ba4      	ldr	r3, [pc, #656]	; (8001420 <HAL_RCC_OscConfig+0x620>)
 800118e:	6a1a      	ldr	r2, [r3, #32]
 8001190:	4ba3      	ldr	r3, [pc, #652]	; (8001420 <HAL_RCC_OscConfig+0x620>)
 8001192:	2104      	movs	r1, #4
 8001194:	438a      	bics	r2, r1
 8001196:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d014      	beq.n	80011ca <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011a0:	f7ff fbbe 	bl	8000920 <HAL_GetTick>
 80011a4:	0003      	movs	r3, r0
 80011a6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011a8:	e009      	b.n	80011be <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011aa:	f7ff fbb9 	bl	8000920 <HAL_GetTick>
 80011ae:	0002      	movs	r2, r0
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	4a9b      	ldr	r2, [pc, #620]	; (8001424 <HAL_RCC_OscConfig+0x624>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d901      	bls.n	80011be <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e12b      	b.n	8001416 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011be:	4b98      	ldr	r3, [pc, #608]	; (8001420 <HAL_RCC_OscConfig+0x620>)
 80011c0:	6a1b      	ldr	r3, [r3, #32]
 80011c2:	2202      	movs	r2, #2
 80011c4:	4013      	ands	r3, r2
 80011c6:	d0f0      	beq.n	80011aa <HAL_RCC_OscConfig+0x3aa>
 80011c8:	e013      	b.n	80011f2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ca:	f7ff fba9 	bl	8000920 <HAL_GetTick>
 80011ce:	0003      	movs	r3, r0
 80011d0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011d2:	e009      	b.n	80011e8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011d4:	f7ff fba4 	bl	8000920 <HAL_GetTick>
 80011d8:	0002      	movs	r2, r0
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	4a91      	ldr	r2, [pc, #580]	; (8001424 <HAL_RCC_OscConfig+0x624>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d901      	bls.n	80011e8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80011e4:	2303      	movs	r3, #3
 80011e6:	e116      	b.n	8001416 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011e8:	4b8d      	ldr	r3, [pc, #564]	; (8001420 <HAL_RCC_OscConfig+0x620>)
 80011ea:	6a1b      	ldr	r3, [r3, #32]
 80011ec:	2202      	movs	r2, #2
 80011ee:	4013      	ands	r3, r2
 80011f0:	d1f0      	bne.n	80011d4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80011f2:	231f      	movs	r3, #31
 80011f4:	18fb      	adds	r3, r7, r3
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d105      	bne.n	8001208 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011fc:	4b88      	ldr	r3, [pc, #544]	; (8001420 <HAL_RCC_OscConfig+0x620>)
 80011fe:	69da      	ldr	r2, [r3, #28]
 8001200:	4b87      	ldr	r3, [pc, #540]	; (8001420 <HAL_RCC_OscConfig+0x620>)
 8001202:	4989      	ldr	r1, [pc, #548]	; (8001428 <HAL_RCC_OscConfig+0x628>)
 8001204:	400a      	ands	r2, r1
 8001206:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2210      	movs	r2, #16
 800120e:	4013      	ands	r3, r2
 8001210:	d063      	beq.n	80012da <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d12a      	bne.n	8001270 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800121a:	4b81      	ldr	r3, [pc, #516]	; (8001420 <HAL_RCC_OscConfig+0x620>)
 800121c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800121e:	4b80      	ldr	r3, [pc, #512]	; (8001420 <HAL_RCC_OscConfig+0x620>)
 8001220:	2104      	movs	r1, #4
 8001222:	430a      	orrs	r2, r1
 8001224:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001226:	4b7e      	ldr	r3, [pc, #504]	; (8001420 <HAL_RCC_OscConfig+0x620>)
 8001228:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800122a:	4b7d      	ldr	r3, [pc, #500]	; (8001420 <HAL_RCC_OscConfig+0x620>)
 800122c:	2101      	movs	r1, #1
 800122e:	430a      	orrs	r2, r1
 8001230:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001232:	f7ff fb75 	bl	8000920 <HAL_GetTick>
 8001236:	0003      	movs	r3, r0
 8001238:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800123a:	e008      	b.n	800124e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800123c:	f7ff fb70 	bl	8000920 <HAL_GetTick>
 8001240:	0002      	movs	r2, r0
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b02      	cmp	r3, #2
 8001248:	d901      	bls.n	800124e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e0e3      	b.n	8001416 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800124e:	4b74      	ldr	r3, [pc, #464]	; (8001420 <HAL_RCC_OscConfig+0x620>)
 8001250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001252:	2202      	movs	r2, #2
 8001254:	4013      	ands	r3, r2
 8001256:	d0f1      	beq.n	800123c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001258:	4b71      	ldr	r3, [pc, #452]	; (8001420 <HAL_RCC_OscConfig+0x620>)
 800125a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800125c:	22f8      	movs	r2, #248	; 0xf8
 800125e:	4393      	bics	r3, r2
 8001260:	0019      	movs	r1, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	00da      	lsls	r2, r3, #3
 8001268:	4b6d      	ldr	r3, [pc, #436]	; (8001420 <HAL_RCC_OscConfig+0x620>)
 800126a:	430a      	orrs	r2, r1
 800126c:	635a      	str	r2, [r3, #52]	; 0x34
 800126e:	e034      	b.n	80012da <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	695b      	ldr	r3, [r3, #20]
 8001274:	3305      	adds	r3, #5
 8001276:	d111      	bne.n	800129c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001278:	4b69      	ldr	r3, [pc, #420]	; (8001420 <HAL_RCC_OscConfig+0x620>)
 800127a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800127c:	4b68      	ldr	r3, [pc, #416]	; (8001420 <HAL_RCC_OscConfig+0x620>)
 800127e:	2104      	movs	r1, #4
 8001280:	438a      	bics	r2, r1
 8001282:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001284:	4b66      	ldr	r3, [pc, #408]	; (8001420 <HAL_RCC_OscConfig+0x620>)
 8001286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001288:	22f8      	movs	r2, #248	; 0xf8
 800128a:	4393      	bics	r3, r2
 800128c:	0019      	movs	r1, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	00da      	lsls	r2, r3, #3
 8001294:	4b62      	ldr	r3, [pc, #392]	; (8001420 <HAL_RCC_OscConfig+0x620>)
 8001296:	430a      	orrs	r2, r1
 8001298:	635a      	str	r2, [r3, #52]	; 0x34
 800129a:	e01e      	b.n	80012da <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800129c:	4b60      	ldr	r3, [pc, #384]	; (8001420 <HAL_RCC_OscConfig+0x620>)
 800129e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012a0:	4b5f      	ldr	r3, [pc, #380]	; (8001420 <HAL_RCC_OscConfig+0x620>)
 80012a2:	2104      	movs	r1, #4
 80012a4:	430a      	orrs	r2, r1
 80012a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80012a8:	4b5d      	ldr	r3, [pc, #372]	; (8001420 <HAL_RCC_OscConfig+0x620>)
 80012aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012ac:	4b5c      	ldr	r3, [pc, #368]	; (8001420 <HAL_RCC_OscConfig+0x620>)
 80012ae:	2101      	movs	r1, #1
 80012b0:	438a      	bics	r2, r1
 80012b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b4:	f7ff fb34 	bl	8000920 <HAL_GetTick>
 80012b8:	0003      	movs	r3, r0
 80012ba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80012bc:	e008      	b.n	80012d0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80012be:	f7ff fb2f 	bl	8000920 <HAL_GetTick>
 80012c2:	0002      	movs	r2, r0
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d901      	bls.n	80012d0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e0a2      	b.n	8001416 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80012d0:	4b53      	ldr	r3, [pc, #332]	; (8001420 <HAL_RCC_OscConfig+0x620>)
 80012d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012d4:	2202      	movs	r2, #2
 80012d6:	4013      	ands	r3, r2
 80012d8:	d1f1      	bne.n	80012be <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6a1b      	ldr	r3, [r3, #32]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d100      	bne.n	80012e4 <HAL_RCC_OscConfig+0x4e4>
 80012e2:	e097      	b.n	8001414 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012e4:	4b4e      	ldr	r3, [pc, #312]	; (8001420 <HAL_RCC_OscConfig+0x620>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	220c      	movs	r2, #12
 80012ea:	4013      	ands	r3, r2
 80012ec:	2b08      	cmp	r3, #8
 80012ee:	d100      	bne.n	80012f2 <HAL_RCC_OscConfig+0x4f2>
 80012f0:	e06b      	b.n	80013ca <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a1b      	ldr	r3, [r3, #32]
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d14c      	bne.n	8001394 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012fa:	4b49      	ldr	r3, [pc, #292]	; (8001420 <HAL_RCC_OscConfig+0x620>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	4b48      	ldr	r3, [pc, #288]	; (8001420 <HAL_RCC_OscConfig+0x620>)
 8001300:	494a      	ldr	r1, [pc, #296]	; (800142c <HAL_RCC_OscConfig+0x62c>)
 8001302:	400a      	ands	r2, r1
 8001304:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001306:	f7ff fb0b 	bl	8000920 <HAL_GetTick>
 800130a:	0003      	movs	r3, r0
 800130c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001310:	f7ff fb06 	bl	8000920 <HAL_GetTick>
 8001314:	0002      	movs	r2, r0
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e079      	b.n	8001416 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001322:	4b3f      	ldr	r3, [pc, #252]	; (8001420 <HAL_RCC_OscConfig+0x620>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	2380      	movs	r3, #128	; 0x80
 8001328:	049b      	lsls	r3, r3, #18
 800132a:	4013      	ands	r3, r2
 800132c:	d1f0      	bne.n	8001310 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800132e:	4b3c      	ldr	r3, [pc, #240]	; (8001420 <HAL_RCC_OscConfig+0x620>)
 8001330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001332:	220f      	movs	r2, #15
 8001334:	4393      	bics	r3, r2
 8001336:	0019      	movs	r1, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800133c:	4b38      	ldr	r3, [pc, #224]	; (8001420 <HAL_RCC_OscConfig+0x620>)
 800133e:	430a      	orrs	r2, r1
 8001340:	62da      	str	r2, [r3, #44]	; 0x2c
 8001342:	4b37      	ldr	r3, [pc, #220]	; (8001420 <HAL_RCC_OscConfig+0x620>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	4a3a      	ldr	r2, [pc, #232]	; (8001430 <HAL_RCC_OscConfig+0x630>)
 8001348:	4013      	ands	r3, r2
 800134a:	0019      	movs	r1, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001354:	431a      	orrs	r2, r3
 8001356:	4b32      	ldr	r3, [pc, #200]	; (8001420 <HAL_RCC_OscConfig+0x620>)
 8001358:	430a      	orrs	r2, r1
 800135a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800135c:	4b30      	ldr	r3, [pc, #192]	; (8001420 <HAL_RCC_OscConfig+0x620>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4b2f      	ldr	r3, [pc, #188]	; (8001420 <HAL_RCC_OscConfig+0x620>)
 8001362:	2180      	movs	r1, #128	; 0x80
 8001364:	0449      	lsls	r1, r1, #17
 8001366:	430a      	orrs	r2, r1
 8001368:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136a:	f7ff fad9 	bl	8000920 <HAL_GetTick>
 800136e:	0003      	movs	r3, r0
 8001370:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001372:	e008      	b.n	8001386 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001374:	f7ff fad4 	bl	8000920 <HAL_GetTick>
 8001378:	0002      	movs	r2, r0
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b02      	cmp	r3, #2
 8001380:	d901      	bls.n	8001386 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e047      	b.n	8001416 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001386:	4b26      	ldr	r3, [pc, #152]	; (8001420 <HAL_RCC_OscConfig+0x620>)
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	2380      	movs	r3, #128	; 0x80
 800138c:	049b      	lsls	r3, r3, #18
 800138e:	4013      	ands	r3, r2
 8001390:	d0f0      	beq.n	8001374 <HAL_RCC_OscConfig+0x574>
 8001392:	e03f      	b.n	8001414 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001394:	4b22      	ldr	r3, [pc, #136]	; (8001420 <HAL_RCC_OscConfig+0x620>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	4b21      	ldr	r3, [pc, #132]	; (8001420 <HAL_RCC_OscConfig+0x620>)
 800139a:	4924      	ldr	r1, [pc, #144]	; (800142c <HAL_RCC_OscConfig+0x62c>)
 800139c:	400a      	ands	r2, r1
 800139e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a0:	f7ff fabe 	bl	8000920 <HAL_GetTick>
 80013a4:	0003      	movs	r3, r0
 80013a6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013a8:	e008      	b.n	80013bc <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013aa:	f7ff fab9 	bl	8000920 <HAL_GetTick>
 80013ae:	0002      	movs	r2, r0
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d901      	bls.n	80013bc <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e02c      	b.n	8001416 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013bc:	4b18      	ldr	r3, [pc, #96]	; (8001420 <HAL_RCC_OscConfig+0x620>)
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	2380      	movs	r3, #128	; 0x80
 80013c2:	049b      	lsls	r3, r3, #18
 80013c4:	4013      	ands	r3, r2
 80013c6:	d1f0      	bne.n	80013aa <HAL_RCC_OscConfig+0x5aa>
 80013c8:	e024      	b.n	8001414 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a1b      	ldr	r3, [r3, #32]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d101      	bne.n	80013d6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e01f      	b.n	8001416 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80013d6:	4b12      	ldr	r3, [pc, #72]	; (8001420 <HAL_RCC_OscConfig+0x620>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80013dc:	4b10      	ldr	r3, [pc, #64]	; (8001420 <HAL_RCC_OscConfig+0x620>)
 80013de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013e2:	697a      	ldr	r2, [r7, #20]
 80013e4:	2380      	movs	r3, #128	; 0x80
 80013e6:	025b      	lsls	r3, r3, #9
 80013e8:	401a      	ands	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d10e      	bne.n	8001410 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	220f      	movs	r2, #15
 80013f6:	401a      	ands	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d107      	bne.n	8001410 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001400:	697a      	ldr	r2, [r7, #20]
 8001402:	23f0      	movs	r3, #240	; 0xf0
 8001404:	039b      	lsls	r3, r3, #14
 8001406:	401a      	ands	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800140c:	429a      	cmp	r2, r3
 800140e:	d001      	beq.n	8001414 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e000      	b.n	8001416 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001414:	2300      	movs	r3, #0
}
 8001416:	0018      	movs	r0, r3
 8001418:	46bd      	mov	sp, r7
 800141a:	b008      	add	sp, #32
 800141c:	bd80      	pop	{r7, pc}
 800141e:	46c0      	nop			; (mov r8, r8)
 8001420:	40021000 	.word	0x40021000
 8001424:	00001388 	.word	0x00001388
 8001428:	efffffff 	.word	0xefffffff
 800142c:	feffffff 	.word	0xfeffffff
 8001430:	ffc2ffff 	.word	0xffc2ffff

08001434 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d101      	bne.n	8001448 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e0b3      	b.n	80015b0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001448:	4b5b      	ldr	r3, [pc, #364]	; (80015b8 <HAL_RCC_ClockConfig+0x184>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2201      	movs	r2, #1
 800144e:	4013      	ands	r3, r2
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	429a      	cmp	r2, r3
 8001454:	d911      	bls.n	800147a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001456:	4b58      	ldr	r3, [pc, #352]	; (80015b8 <HAL_RCC_ClockConfig+0x184>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2201      	movs	r2, #1
 800145c:	4393      	bics	r3, r2
 800145e:	0019      	movs	r1, r3
 8001460:	4b55      	ldr	r3, [pc, #340]	; (80015b8 <HAL_RCC_ClockConfig+0x184>)
 8001462:	683a      	ldr	r2, [r7, #0]
 8001464:	430a      	orrs	r2, r1
 8001466:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001468:	4b53      	ldr	r3, [pc, #332]	; (80015b8 <HAL_RCC_ClockConfig+0x184>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2201      	movs	r2, #1
 800146e:	4013      	ands	r3, r2
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	429a      	cmp	r2, r3
 8001474:	d001      	beq.n	800147a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e09a      	b.n	80015b0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2202      	movs	r2, #2
 8001480:	4013      	ands	r3, r2
 8001482:	d015      	beq.n	80014b0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2204      	movs	r2, #4
 800148a:	4013      	ands	r3, r2
 800148c:	d006      	beq.n	800149c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800148e:	4b4b      	ldr	r3, [pc, #300]	; (80015bc <HAL_RCC_ClockConfig+0x188>)
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	4b4a      	ldr	r3, [pc, #296]	; (80015bc <HAL_RCC_ClockConfig+0x188>)
 8001494:	21e0      	movs	r1, #224	; 0xe0
 8001496:	00c9      	lsls	r1, r1, #3
 8001498:	430a      	orrs	r2, r1
 800149a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800149c:	4b47      	ldr	r3, [pc, #284]	; (80015bc <HAL_RCC_ClockConfig+0x188>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	22f0      	movs	r2, #240	; 0xf0
 80014a2:	4393      	bics	r3, r2
 80014a4:	0019      	movs	r1, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	689a      	ldr	r2, [r3, #8]
 80014aa:	4b44      	ldr	r3, [pc, #272]	; (80015bc <HAL_RCC_ClockConfig+0x188>)
 80014ac:	430a      	orrs	r2, r1
 80014ae:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2201      	movs	r2, #1
 80014b6:	4013      	ands	r3, r2
 80014b8:	d040      	beq.n	800153c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d107      	bne.n	80014d2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c2:	4b3e      	ldr	r3, [pc, #248]	; (80015bc <HAL_RCC_ClockConfig+0x188>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	2380      	movs	r3, #128	; 0x80
 80014c8:	029b      	lsls	r3, r3, #10
 80014ca:	4013      	ands	r3, r2
 80014cc:	d114      	bne.n	80014f8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e06e      	b.n	80015b0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d107      	bne.n	80014ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014da:	4b38      	ldr	r3, [pc, #224]	; (80015bc <HAL_RCC_ClockConfig+0x188>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	2380      	movs	r3, #128	; 0x80
 80014e0:	049b      	lsls	r3, r3, #18
 80014e2:	4013      	ands	r3, r2
 80014e4:	d108      	bne.n	80014f8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e062      	b.n	80015b0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ea:	4b34      	ldr	r3, [pc, #208]	; (80015bc <HAL_RCC_ClockConfig+0x188>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2202      	movs	r2, #2
 80014f0:	4013      	ands	r3, r2
 80014f2:	d101      	bne.n	80014f8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e05b      	b.n	80015b0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014f8:	4b30      	ldr	r3, [pc, #192]	; (80015bc <HAL_RCC_ClockConfig+0x188>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	2203      	movs	r2, #3
 80014fe:	4393      	bics	r3, r2
 8001500:	0019      	movs	r1, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685a      	ldr	r2, [r3, #4]
 8001506:	4b2d      	ldr	r3, [pc, #180]	; (80015bc <HAL_RCC_ClockConfig+0x188>)
 8001508:	430a      	orrs	r2, r1
 800150a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800150c:	f7ff fa08 	bl	8000920 <HAL_GetTick>
 8001510:	0003      	movs	r3, r0
 8001512:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001514:	e009      	b.n	800152a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001516:	f7ff fa03 	bl	8000920 <HAL_GetTick>
 800151a:	0002      	movs	r2, r0
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	4a27      	ldr	r2, [pc, #156]	; (80015c0 <HAL_RCC_ClockConfig+0x18c>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d901      	bls.n	800152a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e042      	b.n	80015b0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800152a:	4b24      	ldr	r3, [pc, #144]	; (80015bc <HAL_RCC_ClockConfig+0x188>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	220c      	movs	r2, #12
 8001530:	401a      	ands	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	429a      	cmp	r2, r3
 800153a:	d1ec      	bne.n	8001516 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800153c:	4b1e      	ldr	r3, [pc, #120]	; (80015b8 <HAL_RCC_ClockConfig+0x184>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2201      	movs	r2, #1
 8001542:	4013      	ands	r3, r2
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	429a      	cmp	r2, r3
 8001548:	d211      	bcs.n	800156e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800154a:	4b1b      	ldr	r3, [pc, #108]	; (80015b8 <HAL_RCC_ClockConfig+0x184>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2201      	movs	r2, #1
 8001550:	4393      	bics	r3, r2
 8001552:	0019      	movs	r1, r3
 8001554:	4b18      	ldr	r3, [pc, #96]	; (80015b8 <HAL_RCC_ClockConfig+0x184>)
 8001556:	683a      	ldr	r2, [r7, #0]
 8001558:	430a      	orrs	r2, r1
 800155a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800155c:	4b16      	ldr	r3, [pc, #88]	; (80015b8 <HAL_RCC_ClockConfig+0x184>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2201      	movs	r2, #1
 8001562:	4013      	ands	r3, r2
 8001564:	683a      	ldr	r2, [r7, #0]
 8001566:	429a      	cmp	r2, r3
 8001568:	d001      	beq.n	800156e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e020      	b.n	80015b0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2204      	movs	r2, #4
 8001574:	4013      	ands	r3, r2
 8001576:	d009      	beq.n	800158c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001578:	4b10      	ldr	r3, [pc, #64]	; (80015bc <HAL_RCC_ClockConfig+0x188>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	4a11      	ldr	r2, [pc, #68]	; (80015c4 <HAL_RCC_ClockConfig+0x190>)
 800157e:	4013      	ands	r3, r2
 8001580:	0019      	movs	r1, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68da      	ldr	r2, [r3, #12]
 8001586:	4b0d      	ldr	r3, [pc, #52]	; (80015bc <HAL_RCC_ClockConfig+0x188>)
 8001588:	430a      	orrs	r2, r1
 800158a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800158c:	f000 f820 	bl	80015d0 <HAL_RCC_GetSysClockFreq>
 8001590:	0001      	movs	r1, r0
 8001592:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <HAL_RCC_ClockConfig+0x188>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	091b      	lsrs	r3, r3, #4
 8001598:	220f      	movs	r2, #15
 800159a:	4013      	ands	r3, r2
 800159c:	4a0a      	ldr	r2, [pc, #40]	; (80015c8 <HAL_RCC_ClockConfig+0x194>)
 800159e:	5cd3      	ldrb	r3, [r2, r3]
 80015a0:	000a      	movs	r2, r1
 80015a2:	40da      	lsrs	r2, r3
 80015a4:	4b09      	ldr	r3, [pc, #36]	; (80015cc <HAL_RCC_ClockConfig+0x198>)
 80015a6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80015a8:	2000      	movs	r0, #0
 80015aa:	f7ff f973 	bl	8000894 <HAL_InitTick>
  
  return HAL_OK;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	0018      	movs	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	b004      	add	sp, #16
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40022000 	.word	0x40022000
 80015bc:	40021000 	.word	0x40021000
 80015c0:	00001388 	.word	0x00001388
 80015c4:	fffff8ff 	.word	0xfffff8ff
 80015c8:	08002304 	.word	0x08002304
 80015cc:	20000000 	.word	0x20000000

080015d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015d0:	b590      	push	{r4, r7, lr}
 80015d2:	b08f      	sub	sp, #60	; 0x3c
 80015d4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80015d6:	2314      	movs	r3, #20
 80015d8:	18fb      	adds	r3, r7, r3
 80015da:	4a2b      	ldr	r2, [pc, #172]	; (8001688 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015dc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80015de:	c313      	stmia	r3!, {r0, r1, r4}
 80015e0:	6812      	ldr	r2, [r2, #0]
 80015e2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	4a29      	ldr	r2, [pc, #164]	; (800168c <HAL_RCC_GetSysClockFreq+0xbc>)
 80015e8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80015ea:	c313      	stmia	r3!, {r0, r1, r4}
 80015ec:	6812      	ldr	r2, [r2, #0]
 80015ee:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015f0:	2300      	movs	r3, #0
 80015f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015f4:	2300      	movs	r3, #0
 80015f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80015f8:	2300      	movs	r3, #0
 80015fa:	637b      	str	r3, [r7, #52]	; 0x34
 80015fc:	2300      	movs	r3, #0
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001600:	2300      	movs	r3, #0
 8001602:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001604:	4b22      	ldr	r3, [pc, #136]	; (8001690 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800160a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800160c:	220c      	movs	r2, #12
 800160e:	4013      	ands	r3, r2
 8001610:	2b04      	cmp	r3, #4
 8001612:	d002      	beq.n	800161a <HAL_RCC_GetSysClockFreq+0x4a>
 8001614:	2b08      	cmp	r3, #8
 8001616:	d003      	beq.n	8001620 <HAL_RCC_GetSysClockFreq+0x50>
 8001618:	e02d      	b.n	8001676 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800161a:	4b1e      	ldr	r3, [pc, #120]	; (8001694 <HAL_RCC_GetSysClockFreq+0xc4>)
 800161c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800161e:	e02d      	b.n	800167c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001622:	0c9b      	lsrs	r3, r3, #18
 8001624:	220f      	movs	r2, #15
 8001626:	4013      	ands	r3, r2
 8001628:	2214      	movs	r2, #20
 800162a:	18ba      	adds	r2, r7, r2
 800162c:	5cd3      	ldrb	r3, [r2, r3]
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001630:	4b17      	ldr	r3, [pc, #92]	; (8001690 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001634:	220f      	movs	r2, #15
 8001636:	4013      	ands	r3, r2
 8001638:	1d3a      	adds	r2, r7, #4
 800163a:	5cd3      	ldrb	r3, [r2, r3]
 800163c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800163e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001640:	2380      	movs	r3, #128	; 0x80
 8001642:	025b      	lsls	r3, r3, #9
 8001644:	4013      	ands	r3, r2
 8001646:	d009      	beq.n	800165c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001648:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800164a:	4812      	ldr	r0, [pc, #72]	; (8001694 <HAL_RCC_GetSysClockFreq+0xc4>)
 800164c:	f7fe fd5c 	bl	8000108 <__udivsi3>
 8001650:	0003      	movs	r3, r0
 8001652:	001a      	movs	r2, r3
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	4353      	muls	r3, r2
 8001658:	637b      	str	r3, [r7, #52]	; 0x34
 800165a:	e009      	b.n	8001670 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800165c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800165e:	000a      	movs	r2, r1
 8001660:	0152      	lsls	r2, r2, #5
 8001662:	1a52      	subs	r2, r2, r1
 8001664:	0193      	lsls	r3, r2, #6
 8001666:	1a9b      	subs	r3, r3, r2
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	185b      	adds	r3, r3, r1
 800166c:	021b      	lsls	r3, r3, #8
 800166e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001672:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001674:	e002      	b.n	800167c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001676:	4b07      	ldr	r3, [pc, #28]	; (8001694 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001678:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800167a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800167c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800167e:	0018      	movs	r0, r3
 8001680:	46bd      	mov	sp, r7
 8001682:	b00f      	add	sp, #60	; 0x3c
 8001684:	bd90      	pop	{r4, r7, pc}
 8001686:	46c0      	nop			; (mov r8, r8)
 8001688:	0800226c 	.word	0x0800226c
 800168c:	0800227c 	.word	0x0800227c
 8001690:	40021000 	.word	0x40021000
 8001694:	007a1200 	.word	0x007a1200

08001698 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800169c:	4b02      	ldr	r3, [pc, #8]	; (80016a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800169e:	681b      	ldr	r3, [r3, #0]
}
 80016a0:	0018      	movs	r0, r3
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	46c0      	nop			; (mov r8, r8)
 80016a8:	20000000 	.word	0x20000000

080016ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80016b0:	f7ff fff2 	bl	8001698 <HAL_RCC_GetHCLKFreq>
 80016b4:	0001      	movs	r1, r0
 80016b6:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	0a1b      	lsrs	r3, r3, #8
 80016bc:	2207      	movs	r2, #7
 80016be:	4013      	ands	r3, r2
 80016c0:	4a04      	ldr	r2, [pc, #16]	; (80016d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80016c2:	5cd3      	ldrb	r3, [r2, r3]
 80016c4:	40d9      	lsrs	r1, r3
 80016c6:	000b      	movs	r3, r1
}    
 80016c8:	0018      	movs	r0, r3
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	46c0      	nop			; (mov r8, r8)
 80016d0:	40021000 	.word	0x40021000
 80016d4:	08002314 	.word	0x08002314

080016d8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d101      	bne.n	80016ec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e090      	b.n	800180e <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	223d      	movs	r2, #61	; 0x3d
 80016f0:	5c9b      	ldrb	r3, [r3, r2]
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d107      	bne.n	8001708 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	223c      	movs	r2, #60	; 0x3c
 80016fc:	2100      	movs	r1, #0
 80016fe:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	0018      	movs	r0, r3
 8001704:	f7fe ffd2 	bl	80006ac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	223d      	movs	r2, #61	; 0x3d
 800170c:	2102      	movs	r1, #2
 800170e:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	689a      	ldr	r2, [r3, #8]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	493f      	ldr	r1, [pc, #252]	; (8001818 <HAL_TIM_Encoder_Init+0x140>)
 800171c:	400a      	ands	r2, r1
 800171e:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3304      	adds	r3, #4
 8001728:	0019      	movs	r1, r3
 800172a:	0010      	movs	r0, r2
 800172c:	f000 f920 	bl	8001970 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	699b      	ldr	r3, [r3, #24]
 800173e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6a1b      	ldr	r3, [r3, #32]
 8001746:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	697a      	ldr	r2, [r7, #20]
 800174e:	4313      	orrs	r3, r2
 8001750:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	4a31      	ldr	r2, [pc, #196]	; (800181c <HAL_TIM_Encoder_Init+0x144>)
 8001756:	4013      	ands	r3, r2
 8001758:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	689a      	ldr	r2, [r3, #8]
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	699b      	ldr	r3, [r3, #24]
 8001762:	021b      	lsls	r3, r3, #8
 8001764:	4313      	orrs	r3, r2
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	4313      	orrs	r3, r2
 800176a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	4a2c      	ldr	r2, [pc, #176]	; (8001820 <HAL_TIM_Encoder_Init+0x148>)
 8001770:	4013      	ands	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	4a2b      	ldr	r2, [pc, #172]	; (8001824 <HAL_TIM_Encoder_Init+0x14c>)
 8001778:	4013      	ands	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	68da      	ldr	r2, [r3, #12]
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	69db      	ldr	r3, [r3, #28]
 8001784:	021b      	lsls	r3, r3, #8
 8001786:	4313      	orrs	r3, r2
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	4313      	orrs	r3, r2
 800178c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	011a      	lsls	r2, r3, #4
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	6a1b      	ldr	r3, [r3, #32]
 8001798:	031b      	lsls	r3, r3, #12
 800179a:	4313      	orrs	r3, r2
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	4313      	orrs	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2222      	movs	r2, #34	; 0x22
 80017a6:	4393      	bics	r3, r2
 80017a8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2288      	movs	r2, #136	; 0x88
 80017ae:	4393      	bics	r3, r2
 80017b0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685a      	ldr	r2, [r3, #4]
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	011b      	lsls	r3, r3, #4
 80017bc:	4313      	orrs	r3, r2
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	697a      	ldr	r2, [r7, #20]
 80017ca:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	68fa      	ldr	r2, [r7, #12]
 80017da:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2246      	movs	r2, #70	; 0x46
 80017e0:	2101      	movs	r1, #1
 80017e2:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	223e      	movs	r2, #62	; 0x3e
 80017e8:	2101      	movs	r1, #1
 80017ea:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	223f      	movs	r2, #63	; 0x3f
 80017f0:	2101      	movs	r1, #1
 80017f2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2242      	movs	r2, #66	; 0x42
 80017f8:	2101      	movs	r1, #1
 80017fa:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2243      	movs	r2, #67	; 0x43
 8001800:	2101      	movs	r1, #1
 8001802:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	223d      	movs	r2, #61	; 0x3d
 8001808:	2101      	movs	r1, #1
 800180a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	0018      	movs	r0, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	b006      	add	sp, #24
 8001814:	bd80      	pop	{r7, pc}
 8001816:	46c0      	nop			; (mov r8, r8)
 8001818:	ffffbff8 	.word	0xffffbff8
 800181c:	fffffcfc 	.word	0xfffffcfc
 8001820:	fffff3f3 	.word	0xfffff3f3
 8001824:	ffff0f0f 	.word	0xffff0f0f

08001828 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001828:	b590      	push	{r4, r7, lr}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8001832:	200f      	movs	r0, #15
 8001834:	183b      	adds	r3, r7, r0
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	213e      	movs	r1, #62	; 0x3e
 800183a:	5c52      	ldrb	r2, [r2, r1]
 800183c:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800183e:	230e      	movs	r3, #14
 8001840:	18fb      	adds	r3, r7, r3
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	213f      	movs	r1, #63	; 0x3f
 8001846:	5c52      	ldrb	r2, [r2, r1]
 8001848:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800184a:	240d      	movs	r4, #13
 800184c:	193b      	adds	r3, r7, r4
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	2142      	movs	r1, #66	; 0x42
 8001852:	5c52      	ldrb	r2, [r2, r1]
 8001854:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8001856:	230c      	movs	r3, #12
 8001858:	18fb      	adds	r3, r7, r3
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	2143      	movs	r1, #67	; 0x43
 800185e:	5c52      	ldrb	r2, [r2, r1]
 8001860:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d112      	bne.n	800188e <HAL_TIM_Encoder_Start+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001868:	183b      	adds	r3, r7, r0
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d103      	bne.n	8001878 <HAL_TIM_Encoder_Start+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8001870:	193b      	adds	r3, r7, r4
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d001      	beq.n	800187c <HAL_TIM_Encoder_Start+0x54>
    {
      return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e075      	b.n	8001968 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	223e      	movs	r2, #62	; 0x3e
 8001880:	2102      	movs	r1, #2
 8001882:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2242      	movs	r2, #66	; 0x42
 8001888:	2102      	movs	r1, #2
 800188a:	5499      	strb	r1, [r3, r2]
 800188c:	e03d      	b.n	800190a <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	2b04      	cmp	r3, #4
 8001892:	d114      	bne.n	80018be <HAL_TIM_Encoder_Start+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001894:	230e      	movs	r3, #14
 8001896:	18fb      	adds	r3, r7, r3
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d104      	bne.n	80018a8 <HAL_TIM_Encoder_Start+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800189e:	230c      	movs	r3, #12
 80018a0:	18fb      	adds	r3, r7, r3
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d001      	beq.n	80018ac <HAL_TIM_Encoder_Start+0x84>
    {
      return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e05d      	b.n	8001968 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	223f      	movs	r2, #63	; 0x3f
 80018b0:	2102      	movs	r1, #2
 80018b2:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2243      	movs	r2, #67	; 0x43
 80018b8:	2102      	movs	r1, #2
 80018ba:	5499      	strb	r1, [r3, r2]
 80018bc:	e025      	b.n	800190a <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80018be:	230f      	movs	r3, #15
 80018c0:	18fb      	adds	r3, r7, r3
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d10e      	bne.n	80018e6 <HAL_TIM_Encoder_Start+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80018c8:	230e      	movs	r3, #14
 80018ca:	18fb      	adds	r3, r7, r3
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d109      	bne.n	80018e6 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80018d2:	230d      	movs	r3, #13
 80018d4:	18fb      	adds	r3, r7, r3
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d104      	bne.n	80018e6 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80018dc:	230c      	movs	r3, #12
 80018de:	18fb      	adds	r3, r7, r3
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d001      	beq.n	80018ea <HAL_TIM_Encoder_Start+0xc2>
    {
      return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e03e      	b.n	8001968 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	223e      	movs	r2, #62	; 0x3e
 80018ee:	2102      	movs	r1, #2
 80018f0:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	223f      	movs	r2, #63	; 0x3f
 80018f6:	2102      	movs	r1, #2
 80018f8:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2242      	movs	r2, #66	; 0x42
 80018fe:	2102      	movs	r1, #2
 8001900:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2243      	movs	r2, #67	; 0x43
 8001906:	2102      	movs	r1, #2
 8001908:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d003      	beq.n	8001918 <HAL_TIM_Encoder_Start+0xf0>
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	2b04      	cmp	r3, #4
 8001914:	d008      	beq.n	8001928 <HAL_TIM_Encoder_Start+0x100>
 8001916:	e00f      	b.n	8001938 <HAL_TIM_Encoder_Start+0x110>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2201      	movs	r2, #1
 800191e:	2100      	movs	r1, #0
 8001920:	0018      	movs	r0, r3
 8001922:	f000 f89b 	bl	8001a5c <TIM_CCxChannelCmd>
      break;
 8001926:	e016      	b.n	8001956 <HAL_TIM_Encoder_Start+0x12e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2201      	movs	r2, #1
 800192e:	2104      	movs	r1, #4
 8001930:	0018      	movs	r0, r3
 8001932:	f000 f893 	bl	8001a5c <TIM_CCxChannelCmd>
      break;
 8001936:	e00e      	b.n	8001956 <HAL_TIM_Encoder_Start+0x12e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2201      	movs	r2, #1
 800193e:	2100      	movs	r1, #0
 8001940:	0018      	movs	r0, r3
 8001942:	f000 f88b 	bl	8001a5c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2201      	movs	r2, #1
 800194c:	2104      	movs	r1, #4
 800194e:	0018      	movs	r0, r3
 8001950:	f000 f884 	bl	8001a5c <TIM_CCxChannelCmd>
      break;
 8001954:	46c0      	nop			; (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2101      	movs	r1, #1
 8001962:	430a      	orrs	r2, r1
 8001964:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001966:	2300      	movs	r3, #0
}
 8001968:	0018      	movs	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	b005      	add	sp, #20
 800196e:	bd90      	pop	{r4, r7, pc}

08001970 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a2f      	ldr	r2, [pc, #188]	; (8001a40 <TIM_Base_SetConfig+0xd0>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d003      	beq.n	8001990 <TIM_Base_SetConfig+0x20>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a2e      	ldr	r2, [pc, #184]	; (8001a44 <TIM_Base_SetConfig+0xd4>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d108      	bne.n	80019a2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2270      	movs	r2, #112	; 0x70
 8001994:	4393      	bics	r3, r2
 8001996:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	4313      	orrs	r3, r2
 80019a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a26      	ldr	r2, [pc, #152]	; (8001a40 <TIM_Base_SetConfig+0xd0>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d013      	beq.n	80019d2 <TIM_Base_SetConfig+0x62>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a25      	ldr	r2, [pc, #148]	; (8001a44 <TIM_Base_SetConfig+0xd4>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d00f      	beq.n	80019d2 <TIM_Base_SetConfig+0x62>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a24      	ldr	r2, [pc, #144]	; (8001a48 <TIM_Base_SetConfig+0xd8>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d00b      	beq.n	80019d2 <TIM_Base_SetConfig+0x62>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a23      	ldr	r2, [pc, #140]	; (8001a4c <TIM_Base_SetConfig+0xdc>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d007      	beq.n	80019d2 <TIM_Base_SetConfig+0x62>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a22      	ldr	r2, [pc, #136]	; (8001a50 <TIM_Base_SetConfig+0xe0>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d003      	beq.n	80019d2 <TIM_Base_SetConfig+0x62>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a21      	ldr	r2, [pc, #132]	; (8001a54 <TIM_Base_SetConfig+0xe4>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d108      	bne.n	80019e4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	4a20      	ldr	r2, [pc, #128]	; (8001a58 <TIM_Base_SetConfig+0xe8>)
 80019d6:	4013      	ands	r3, r2
 80019d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2280      	movs	r2, #128	; 0x80
 80019e8:	4393      	bics	r3, r2
 80019ea:	001a      	movs	r2, r3
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	695b      	ldr	r3, [r3, #20]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	689a      	ldr	r2, [r3, #8]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a0c      	ldr	r2, [pc, #48]	; (8001a40 <TIM_Base_SetConfig+0xd0>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d00b      	beq.n	8001a2a <TIM_Base_SetConfig+0xba>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a0d      	ldr	r2, [pc, #52]	; (8001a4c <TIM_Base_SetConfig+0xdc>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d007      	beq.n	8001a2a <TIM_Base_SetConfig+0xba>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a0c      	ldr	r2, [pc, #48]	; (8001a50 <TIM_Base_SetConfig+0xe0>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d003      	beq.n	8001a2a <TIM_Base_SetConfig+0xba>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a0b      	ldr	r2, [pc, #44]	; (8001a54 <TIM_Base_SetConfig+0xe4>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d103      	bne.n	8001a32 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	691a      	ldr	r2, [r3, #16]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2201      	movs	r2, #1
 8001a36:	615a      	str	r2, [r3, #20]
}
 8001a38:	46c0      	nop			; (mov r8, r8)
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	b004      	add	sp, #16
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40012c00 	.word	0x40012c00
 8001a44:	40000400 	.word	0x40000400
 8001a48:	40002000 	.word	0x40002000
 8001a4c:	40014000 	.word	0x40014000
 8001a50:	40014400 	.word	0x40014400
 8001a54:	40014800 	.word	0x40014800
 8001a58:	fffffcff 	.word	0xfffffcff

08001a5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	221f      	movs	r2, #31
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	2201      	movs	r2, #1
 8001a70:	409a      	lsls	r2, r3
 8001a72:	0013      	movs	r3, r2
 8001a74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	6a1b      	ldr	r3, [r3, #32]
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	43d2      	mvns	r2, r2
 8001a7e:	401a      	ands	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6a1a      	ldr	r2, [r3, #32]
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	211f      	movs	r1, #31
 8001a8c:	400b      	ands	r3, r1
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	4099      	lsls	r1, r3
 8001a92:	000b      	movs	r3, r1
 8001a94:	431a      	orrs	r2, r3
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	621a      	str	r2, [r3, #32]
}
 8001a9a:	46c0      	nop			; (mov r8, r8)
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	b006      	add	sp, #24
 8001aa0:	bd80      	pop	{r7, pc}
	...

08001aa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	223c      	movs	r2, #60	; 0x3c
 8001ab2:	5c9b      	ldrb	r3, [r3, r2]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d101      	bne.n	8001abc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001ab8:	2302      	movs	r3, #2
 8001aba:	e041      	b.n	8001b40 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	223c      	movs	r2, #60	; 0x3c
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	223d      	movs	r2, #61	; 0x3d
 8001ac8:	2102      	movs	r1, #2
 8001aca:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2270      	movs	r2, #112	; 0x70
 8001ae0:	4393      	bics	r3, r2
 8001ae2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	68fa      	ldr	r2, [r7, #12]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a13      	ldr	r2, [pc, #76]	; (8001b48 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d009      	beq.n	8001b14 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a11      	ldr	r2, [pc, #68]	; (8001b4c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d004      	beq.n	8001b14 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a10      	ldr	r2, [pc, #64]	; (8001b50 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d10c      	bne.n	8001b2e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	2280      	movs	r2, #128	; 0x80
 8001b18:	4393      	bics	r3, r2
 8001b1a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	68ba      	ldr	r2, [r7, #8]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	68ba      	ldr	r2, [r7, #8]
 8001b2c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	223d      	movs	r2, #61	; 0x3d
 8001b32:	2101      	movs	r1, #1
 8001b34:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	223c      	movs	r2, #60	; 0x3c
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	0018      	movs	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	b004      	add	sp, #16
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40012c00 	.word	0x40012c00
 8001b4c:	40000400 	.word	0x40000400
 8001b50:	40014000 	.word	0x40014000

08001b54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e044      	b.n	8001bf0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d107      	bne.n	8001b7e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2274      	movs	r2, #116	; 0x74
 8001b72:	2100      	movs	r1, #0
 8001b74:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	0018      	movs	r0, r3
 8001b7a:	f7fe fde5 	bl	8000748 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2224      	movs	r2, #36	; 0x24
 8001b82:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2101      	movs	r1, #1
 8001b90:	438a      	bics	r2, r1
 8001b92:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	0018      	movs	r0, r3
 8001b98:	f000 f830 	bl	8001bfc <UART_SetConfig>
 8001b9c:	0003      	movs	r3, r0
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d101      	bne.n	8001ba6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e024      	b.n	8001bf0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	f000 f963 	bl	8001e7c <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	685a      	ldr	r2, [r3, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	490d      	ldr	r1, [pc, #52]	; (8001bf8 <HAL_UART_Init+0xa4>)
 8001bc2:	400a      	ands	r2, r1
 8001bc4:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2108      	movs	r1, #8
 8001bd2:	438a      	bics	r2, r1
 8001bd4:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2101      	movs	r1, #1
 8001be2:	430a      	orrs	r2, r1
 8001be4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	0018      	movs	r0, r3
 8001bea:	f000 f9fb 	bl	8001fe4 <UART_CheckIdleState>
 8001bee:	0003      	movs	r3, r0
}
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	b002      	add	sp, #8
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	fffff7ff 	.word	0xfffff7ff

08001bfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b088      	sub	sp, #32
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001c04:	231e      	movs	r3, #30
 8001c06:	18fb      	adds	r3, r7, r3
 8001c08:	2200      	movs	r2, #0
 8001c0a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	431a      	orrs	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69db      	ldr	r3, [r3, #28]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a8d      	ldr	r2, [pc, #564]	; (8001e60 <UART_SetConfig+0x264>)
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	0019      	movs	r1, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	697a      	ldr	r2, [r7, #20]
 8001c36:	430a      	orrs	r2, r1
 8001c38:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	4a88      	ldr	r2, [pc, #544]	; (8001e64 <UART_SetConfig+0x268>)
 8001c42:	4013      	ands	r3, r2
 8001c44:	0019      	movs	r1, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68da      	ldr	r2, [r3, #12]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a1b      	ldr	r3, [r3, #32]
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	4a7f      	ldr	r2, [pc, #508]	; (8001e68 <UART_SetConfig+0x26c>)
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	0019      	movs	r1, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	697a      	ldr	r2, [r7, #20]
 8001c74:	430a      	orrs	r2, r1
 8001c76:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a7b      	ldr	r2, [pc, #492]	; (8001e6c <UART_SetConfig+0x270>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d127      	bne.n	8001cd2 <UART_SetConfig+0xd6>
 8001c82:	4b7b      	ldr	r3, [pc, #492]	; (8001e70 <UART_SetConfig+0x274>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	2203      	movs	r2, #3
 8001c88:	4013      	ands	r3, r2
 8001c8a:	2b03      	cmp	r3, #3
 8001c8c:	d00d      	beq.n	8001caa <UART_SetConfig+0xae>
 8001c8e:	d81b      	bhi.n	8001cc8 <UART_SetConfig+0xcc>
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d014      	beq.n	8001cbe <UART_SetConfig+0xc2>
 8001c94:	d818      	bhi.n	8001cc8 <UART_SetConfig+0xcc>
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d002      	beq.n	8001ca0 <UART_SetConfig+0xa4>
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d00a      	beq.n	8001cb4 <UART_SetConfig+0xb8>
 8001c9e:	e013      	b.n	8001cc8 <UART_SetConfig+0xcc>
 8001ca0:	231f      	movs	r3, #31
 8001ca2:	18fb      	adds	r3, r7, r3
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	701a      	strb	r2, [r3, #0]
 8001ca8:	e021      	b.n	8001cee <UART_SetConfig+0xf2>
 8001caa:	231f      	movs	r3, #31
 8001cac:	18fb      	adds	r3, r7, r3
 8001cae:	2202      	movs	r2, #2
 8001cb0:	701a      	strb	r2, [r3, #0]
 8001cb2:	e01c      	b.n	8001cee <UART_SetConfig+0xf2>
 8001cb4:	231f      	movs	r3, #31
 8001cb6:	18fb      	adds	r3, r7, r3
 8001cb8:	2204      	movs	r2, #4
 8001cba:	701a      	strb	r2, [r3, #0]
 8001cbc:	e017      	b.n	8001cee <UART_SetConfig+0xf2>
 8001cbe:	231f      	movs	r3, #31
 8001cc0:	18fb      	adds	r3, r7, r3
 8001cc2:	2208      	movs	r2, #8
 8001cc4:	701a      	strb	r2, [r3, #0]
 8001cc6:	e012      	b.n	8001cee <UART_SetConfig+0xf2>
 8001cc8:	231f      	movs	r3, #31
 8001cca:	18fb      	adds	r3, r7, r3
 8001ccc:	2210      	movs	r2, #16
 8001cce:	701a      	strb	r2, [r3, #0]
 8001cd0:	e00d      	b.n	8001cee <UART_SetConfig+0xf2>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a67      	ldr	r2, [pc, #412]	; (8001e74 <UART_SetConfig+0x278>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d104      	bne.n	8001ce6 <UART_SetConfig+0xea>
 8001cdc:	231f      	movs	r3, #31
 8001cde:	18fb      	adds	r3, r7, r3
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	701a      	strb	r2, [r3, #0]
 8001ce4:	e003      	b.n	8001cee <UART_SetConfig+0xf2>
 8001ce6:	231f      	movs	r3, #31
 8001ce8:	18fb      	adds	r3, r7, r3
 8001cea:	2210      	movs	r2, #16
 8001cec:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	69da      	ldr	r2, [r3, #28]
 8001cf2:	2380      	movs	r3, #128	; 0x80
 8001cf4:	021b      	lsls	r3, r3, #8
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d15d      	bne.n	8001db6 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8001cfa:	231f      	movs	r3, #31
 8001cfc:	18fb      	adds	r3, r7, r3
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b08      	cmp	r3, #8
 8001d02:	d015      	beq.n	8001d30 <UART_SetConfig+0x134>
 8001d04:	dc18      	bgt.n	8001d38 <UART_SetConfig+0x13c>
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	d00d      	beq.n	8001d26 <UART_SetConfig+0x12a>
 8001d0a:	dc15      	bgt.n	8001d38 <UART_SetConfig+0x13c>
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d002      	beq.n	8001d16 <UART_SetConfig+0x11a>
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d005      	beq.n	8001d20 <UART_SetConfig+0x124>
 8001d14:	e010      	b.n	8001d38 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001d16:	f7ff fcc9 	bl	80016ac <HAL_RCC_GetPCLK1Freq>
 8001d1a:	0003      	movs	r3, r0
 8001d1c:	61bb      	str	r3, [r7, #24]
        break;
 8001d1e:	e012      	b.n	8001d46 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001d20:	4b55      	ldr	r3, [pc, #340]	; (8001e78 <UART_SetConfig+0x27c>)
 8001d22:	61bb      	str	r3, [r7, #24]
        break;
 8001d24:	e00f      	b.n	8001d46 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001d26:	f7ff fc53 	bl	80015d0 <HAL_RCC_GetSysClockFreq>
 8001d2a:	0003      	movs	r3, r0
 8001d2c:	61bb      	str	r3, [r7, #24]
        break;
 8001d2e:	e00a      	b.n	8001d46 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001d30:	2380      	movs	r3, #128	; 0x80
 8001d32:	021b      	lsls	r3, r3, #8
 8001d34:	61bb      	str	r3, [r7, #24]
        break;
 8001d36:	e006      	b.n	8001d46 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001d3c:	231e      	movs	r3, #30
 8001d3e:	18fb      	adds	r3, r7, r3
 8001d40:	2201      	movs	r2, #1
 8001d42:	701a      	strb	r2, [r3, #0]
        break;
 8001d44:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d100      	bne.n	8001d4e <UART_SetConfig+0x152>
 8001d4c:	e07b      	b.n	8001e46 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	005a      	lsls	r2, r3, #1
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	085b      	lsrs	r3, r3, #1
 8001d58:	18d2      	adds	r2, r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	0019      	movs	r1, r3
 8001d60:	0010      	movs	r0, r2
 8001d62:	f7fe f9d1 	bl	8000108 <__udivsi3>
 8001d66:	0003      	movs	r3, r0
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	2b0f      	cmp	r3, #15
 8001d70:	d91c      	bls.n	8001dac <UART_SetConfig+0x1b0>
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	2380      	movs	r3, #128	; 0x80
 8001d76:	025b      	lsls	r3, r3, #9
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d217      	bcs.n	8001dac <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	200e      	movs	r0, #14
 8001d82:	183b      	adds	r3, r7, r0
 8001d84:	210f      	movs	r1, #15
 8001d86:	438a      	bics	r2, r1
 8001d88:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	085b      	lsrs	r3, r3, #1
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	2207      	movs	r2, #7
 8001d92:	4013      	ands	r3, r2
 8001d94:	b299      	uxth	r1, r3
 8001d96:	183b      	adds	r3, r7, r0
 8001d98:	183a      	adds	r2, r7, r0
 8001d9a:	8812      	ldrh	r2, [r2, #0]
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	183a      	adds	r2, r7, r0
 8001da6:	8812      	ldrh	r2, [r2, #0]
 8001da8:	60da      	str	r2, [r3, #12]
 8001daa:	e04c      	b.n	8001e46 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8001dac:	231e      	movs	r3, #30
 8001dae:	18fb      	adds	r3, r7, r3
 8001db0:	2201      	movs	r2, #1
 8001db2:	701a      	strb	r2, [r3, #0]
 8001db4:	e047      	b.n	8001e46 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001db6:	231f      	movs	r3, #31
 8001db8:	18fb      	adds	r3, r7, r3
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	2b08      	cmp	r3, #8
 8001dbe:	d015      	beq.n	8001dec <UART_SetConfig+0x1f0>
 8001dc0:	dc18      	bgt.n	8001df4 <UART_SetConfig+0x1f8>
 8001dc2:	2b04      	cmp	r3, #4
 8001dc4:	d00d      	beq.n	8001de2 <UART_SetConfig+0x1e6>
 8001dc6:	dc15      	bgt.n	8001df4 <UART_SetConfig+0x1f8>
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d002      	beq.n	8001dd2 <UART_SetConfig+0x1d6>
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d005      	beq.n	8001ddc <UART_SetConfig+0x1e0>
 8001dd0:	e010      	b.n	8001df4 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001dd2:	f7ff fc6b 	bl	80016ac <HAL_RCC_GetPCLK1Freq>
 8001dd6:	0003      	movs	r3, r0
 8001dd8:	61bb      	str	r3, [r7, #24]
        break;
 8001dda:	e012      	b.n	8001e02 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001ddc:	4b26      	ldr	r3, [pc, #152]	; (8001e78 <UART_SetConfig+0x27c>)
 8001dde:	61bb      	str	r3, [r7, #24]
        break;
 8001de0:	e00f      	b.n	8001e02 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001de2:	f7ff fbf5 	bl	80015d0 <HAL_RCC_GetSysClockFreq>
 8001de6:	0003      	movs	r3, r0
 8001de8:	61bb      	str	r3, [r7, #24]
        break;
 8001dea:	e00a      	b.n	8001e02 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001dec:	2380      	movs	r3, #128	; 0x80
 8001dee:	021b      	lsls	r3, r3, #8
 8001df0:	61bb      	str	r3, [r7, #24]
        break;
 8001df2:	e006      	b.n	8001e02 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001df8:	231e      	movs	r3, #30
 8001dfa:	18fb      	adds	r3, r7, r3
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	701a      	strb	r2, [r3, #0]
        break;
 8001e00:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d01e      	beq.n	8001e46 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	085a      	lsrs	r2, r3, #1
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	18d2      	adds	r2, r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	0019      	movs	r1, r3
 8001e18:	0010      	movs	r0, r2
 8001e1a:	f7fe f975 	bl	8000108 <__udivsi3>
 8001e1e:	0003      	movs	r3, r0
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	2b0f      	cmp	r3, #15
 8001e28:	d909      	bls.n	8001e3e <UART_SetConfig+0x242>
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	2380      	movs	r3, #128	; 0x80
 8001e2e:	025b      	lsls	r3, r3, #9
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d204      	bcs.n	8001e3e <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	60da      	str	r2, [r3, #12]
 8001e3c:	e003      	b.n	8001e46 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8001e3e:	231e      	movs	r3, #30
 8001e40:	18fb      	adds	r3, r7, r3
 8001e42:	2201      	movs	r2, #1
 8001e44:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8001e52:	231e      	movs	r3, #30
 8001e54:	18fb      	adds	r3, r7, r3
 8001e56:	781b      	ldrb	r3, [r3, #0]
}
 8001e58:	0018      	movs	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	b008      	add	sp, #32
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	ffff69f3 	.word	0xffff69f3
 8001e64:	ffffcfff 	.word	0xffffcfff
 8001e68:	fffff4ff 	.word	0xfffff4ff
 8001e6c:	40013800 	.word	0x40013800
 8001e70:	40021000 	.word	0x40021000
 8001e74:	40004400 	.word	0x40004400
 8001e78:	007a1200 	.word	0x007a1200

08001e7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e88:	2201      	movs	r2, #1
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	d00b      	beq.n	8001ea6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	4a4a      	ldr	r2, [pc, #296]	; (8001fc0 <UART_AdvFeatureConfig+0x144>)
 8001e96:	4013      	ands	r3, r2
 8001e98:	0019      	movs	r1, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eaa:	2202      	movs	r2, #2
 8001eac:	4013      	ands	r3, r2
 8001eae:	d00b      	beq.n	8001ec8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	4a43      	ldr	r2, [pc, #268]	; (8001fc4 <UART_AdvFeatureConfig+0x148>)
 8001eb8:	4013      	ands	r3, r2
 8001eba:	0019      	movs	r1, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ecc:	2204      	movs	r2, #4
 8001ece:	4013      	ands	r3, r2
 8001ed0:	d00b      	beq.n	8001eea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	4a3b      	ldr	r2, [pc, #236]	; (8001fc8 <UART_AdvFeatureConfig+0x14c>)
 8001eda:	4013      	ands	r3, r2
 8001edc:	0019      	movs	r1, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eee:	2208      	movs	r2, #8
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d00b      	beq.n	8001f0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	4a34      	ldr	r2, [pc, #208]	; (8001fcc <UART_AdvFeatureConfig+0x150>)
 8001efc:	4013      	ands	r3, r2
 8001efe:	0019      	movs	r1, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f10:	2210      	movs	r2, #16
 8001f12:	4013      	ands	r3, r2
 8001f14:	d00b      	beq.n	8001f2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	4a2c      	ldr	r2, [pc, #176]	; (8001fd0 <UART_AdvFeatureConfig+0x154>)
 8001f1e:	4013      	ands	r3, r2
 8001f20:	0019      	movs	r1, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f32:	2220      	movs	r2, #32
 8001f34:	4013      	ands	r3, r2
 8001f36:	d00b      	beq.n	8001f50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	4a25      	ldr	r2, [pc, #148]	; (8001fd4 <UART_AdvFeatureConfig+0x158>)
 8001f40:	4013      	ands	r3, r2
 8001f42:	0019      	movs	r1, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f54:	2240      	movs	r2, #64	; 0x40
 8001f56:	4013      	ands	r3, r2
 8001f58:	d01d      	beq.n	8001f96 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	4a1d      	ldr	r2, [pc, #116]	; (8001fd8 <UART_AdvFeatureConfig+0x15c>)
 8001f62:	4013      	ands	r3, r2
 8001f64:	0019      	movs	r1, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f76:	2380      	movs	r3, #128	; 0x80
 8001f78:	035b      	lsls	r3, r3, #13
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d10b      	bne.n	8001f96 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	4a15      	ldr	r2, [pc, #84]	; (8001fdc <UART_AdvFeatureConfig+0x160>)
 8001f86:	4013      	ands	r3, r2
 8001f88:	0019      	movs	r1, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9a:	2280      	movs	r2, #128	; 0x80
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	d00b      	beq.n	8001fb8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	4a0e      	ldr	r2, [pc, #56]	; (8001fe0 <UART_AdvFeatureConfig+0x164>)
 8001fa8:	4013      	ands	r3, r2
 8001faa:	0019      	movs	r1, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	605a      	str	r2, [r3, #4]
  }
}
 8001fb8:	46c0      	nop			; (mov r8, r8)
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	b002      	add	sp, #8
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	fffdffff 	.word	0xfffdffff
 8001fc4:	fffeffff 	.word	0xfffeffff
 8001fc8:	fffbffff 	.word	0xfffbffff
 8001fcc:	ffff7fff 	.word	0xffff7fff
 8001fd0:	ffffefff 	.word	0xffffefff
 8001fd4:	ffffdfff 	.word	0xffffdfff
 8001fd8:	ffefffff 	.word	0xffefffff
 8001fdc:	ff9fffff 	.word	0xff9fffff
 8001fe0:	fff7ffff 	.word	0xfff7ffff

08001fe4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af02      	add	r7, sp, #8
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2280      	movs	r2, #128	; 0x80
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001ff4:	f7fe fc94 	bl	8000920 <HAL_GetTick>
 8001ff8:	0003      	movs	r3, r0
 8001ffa:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2208      	movs	r2, #8
 8002004:	4013      	ands	r3, r2
 8002006:	2b08      	cmp	r3, #8
 8002008:	d10c      	bne.n	8002024 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2280      	movs	r2, #128	; 0x80
 800200e:	0391      	lsls	r1, r2, #14
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	4a17      	ldr	r2, [pc, #92]	; (8002070 <UART_CheckIdleState+0x8c>)
 8002014:	9200      	str	r2, [sp, #0]
 8002016:	2200      	movs	r2, #0
 8002018:	f000 f82c 	bl	8002074 <UART_WaitOnFlagUntilTimeout>
 800201c:	1e03      	subs	r3, r0, #0
 800201e:	d001      	beq.n	8002024 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e021      	b.n	8002068 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2204      	movs	r2, #4
 800202c:	4013      	ands	r3, r2
 800202e:	2b04      	cmp	r3, #4
 8002030:	d10c      	bne.n	800204c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2280      	movs	r2, #128	; 0x80
 8002036:	03d1      	lsls	r1, r2, #15
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	4a0d      	ldr	r2, [pc, #52]	; (8002070 <UART_CheckIdleState+0x8c>)
 800203c:	9200      	str	r2, [sp, #0]
 800203e:	2200      	movs	r2, #0
 8002040:	f000 f818 	bl	8002074 <UART_WaitOnFlagUntilTimeout>
 8002044:	1e03      	subs	r3, r0, #0
 8002046:	d001      	beq.n	800204c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e00d      	b.n	8002068 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2220      	movs	r2, #32
 8002050:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2220      	movs	r2, #32
 8002056:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2274      	movs	r2, #116	; 0x74
 8002062:	2100      	movs	r1, #0
 8002064:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	0018      	movs	r0, r3
 800206a:	46bd      	mov	sp, r7
 800206c:	b004      	add	sp, #16
 800206e:	bd80      	pop	{r7, pc}
 8002070:	01ffffff 	.word	0x01ffffff

08002074 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b094      	sub	sp, #80	; 0x50
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	603b      	str	r3, [r7, #0]
 8002080:	1dfb      	adds	r3, r7, #7
 8002082:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002084:	e0a3      	b.n	80021ce <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002086:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002088:	3301      	adds	r3, #1
 800208a:	d100      	bne.n	800208e <UART_WaitOnFlagUntilTimeout+0x1a>
 800208c:	e09f      	b.n	80021ce <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800208e:	f7fe fc47 	bl	8000920 <HAL_GetTick>
 8002092:	0002      	movs	r2, r0
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800209a:	429a      	cmp	r2, r3
 800209c:	d302      	bcc.n	80020a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800209e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d13d      	bne.n	8002120 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020a4:	f3ef 8310 	mrs	r3, PRIMASK
 80020a8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80020aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020ac:	647b      	str	r3, [r7, #68]	; 0x44
 80020ae:	2301      	movs	r3, #1
 80020b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b4:	f383 8810 	msr	PRIMASK, r3
}
 80020b8:	46c0      	nop			; (mov r8, r8)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	494c      	ldr	r1, [pc, #304]	; (80021f8 <UART_WaitOnFlagUntilTimeout+0x184>)
 80020c6:	400a      	ands	r2, r1
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020cc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d0:	f383 8810 	msr	PRIMASK, r3
}
 80020d4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020d6:	f3ef 8310 	mrs	r3, PRIMASK
 80020da:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80020dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020de:	643b      	str	r3, [r7, #64]	; 0x40
 80020e0:	2301      	movs	r3, #1
 80020e2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020e6:	f383 8810 	msr	PRIMASK, r3
}
 80020ea:	46c0      	nop			; (mov r8, r8)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	689a      	ldr	r2, [r3, #8]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2101      	movs	r1, #1
 80020f8:	438a      	bics	r2, r1
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002102:	f383 8810 	msr	PRIMASK, r3
}
 8002106:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2220      	movs	r2, #32
 800210c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2220      	movs	r2, #32
 8002112:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2274      	movs	r2, #116	; 0x74
 8002118:	2100      	movs	r1, #0
 800211a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e067      	b.n	80021f0 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2204      	movs	r2, #4
 8002128:	4013      	ands	r3, r2
 800212a:	d050      	beq.n	80021ce <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	69da      	ldr	r2, [r3, #28]
 8002132:	2380      	movs	r3, #128	; 0x80
 8002134:	011b      	lsls	r3, r3, #4
 8002136:	401a      	ands	r2, r3
 8002138:	2380      	movs	r3, #128	; 0x80
 800213a:	011b      	lsls	r3, r3, #4
 800213c:	429a      	cmp	r2, r3
 800213e:	d146      	bne.n	80021ce <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2280      	movs	r2, #128	; 0x80
 8002146:	0112      	lsls	r2, r2, #4
 8002148:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800214a:	f3ef 8310 	mrs	r3, PRIMASK
 800214e:	613b      	str	r3, [r7, #16]
  return(result);
 8002150:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002152:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002154:	2301      	movs	r3, #1
 8002156:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	f383 8810 	msr	PRIMASK, r3
}
 800215e:	46c0      	nop			; (mov r8, r8)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4923      	ldr	r1, [pc, #140]	; (80021f8 <UART_WaitOnFlagUntilTimeout+0x184>)
 800216c:	400a      	ands	r2, r1
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002172:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	f383 8810 	msr	PRIMASK, r3
}
 800217a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800217c:	f3ef 8310 	mrs	r3, PRIMASK
 8002180:	61fb      	str	r3, [r7, #28]
  return(result);
 8002182:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002184:	64bb      	str	r3, [r7, #72]	; 0x48
 8002186:	2301      	movs	r3, #1
 8002188:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800218a:	6a3b      	ldr	r3, [r7, #32]
 800218c:	f383 8810 	msr	PRIMASK, r3
}
 8002190:	46c0      	nop			; (mov r8, r8)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2101      	movs	r1, #1
 800219e:	438a      	bics	r2, r1
 80021a0:	609a      	str	r2, [r3, #8]
 80021a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	f383 8810 	msr	PRIMASK, r3
}
 80021ac:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2220      	movs	r2, #32
 80021b2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2220      	movs	r2, #32
 80021b8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2280      	movs	r2, #128	; 0x80
 80021be:	2120      	movs	r1, #32
 80021c0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2274      	movs	r2, #116	; 0x74
 80021c6:	2100      	movs	r1, #0
 80021c8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e010      	b.n	80021f0 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	69db      	ldr	r3, [r3, #28]
 80021d4:	68ba      	ldr	r2, [r7, #8]
 80021d6:	4013      	ands	r3, r2
 80021d8:	68ba      	ldr	r2, [r7, #8]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	425a      	negs	r2, r3
 80021de:	4153      	adcs	r3, r2
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	001a      	movs	r2, r3
 80021e4:	1dfb      	adds	r3, r7, #7
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d100      	bne.n	80021ee <UART_WaitOnFlagUntilTimeout+0x17a>
 80021ec:	e74b      	b.n	8002086 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	0018      	movs	r0, r3
 80021f2:	46bd      	mov	sp, r7
 80021f4:	b014      	add	sp, #80	; 0x50
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	fffffe5f 	.word	0xfffffe5f

080021fc <__libc_init_array>:
 80021fc:	b570      	push	{r4, r5, r6, lr}
 80021fe:	2600      	movs	r6, #0
 8002200:	4d0c      	ldr	r5, [pc, #48]	; (8002234 <__libc_init_array+0x38>)
 8002202:	4c0d      	ldr	r4, [pc, #52]	; (8002238 <__libc_init_array+0x3c>)
 8002204:	1b64      	subs	r4, r4, r5
 8002206:	10a4      	asrs	r4, r4, #2
 8002208:	42a6      	cmp	r6, r4
 800220a:	d109      	bne.n	8002220 <__libc_init_array+0x24>
 800220c:	2600      	movs	r6, #0
 800220e:	f000 f821 	bl	8002254 <_init>
 8002212:	4d0a      	ldr	r5, [pc, #40]	; (800223c <__libc_init_array+0x40>)
 8002214:	4c0a      	ldr	r4, [pc, #40]	; (8002240 <__libc_init_array+0x44>)
 8002216:	1b64      	subs	r4, r4, r5
 8002218:	10a4      	asrs	r4, r4, #2
 800221a:	42a6      	cmp	r6, r4
 800221c:	d105      	bne.n	800222a <__libc_init_array+0x2e>
 800221e:	bd70      	pop	{r4, r5, r6, pc}
 8002220:	00b3      	lsls	r3, r6, #2
 8002222:	58eb      	ldr	r3, [r5, r3]
 8002224:	4798      	blx	r3
 8002226:	3601      	adds	r6, #1
 8002228:	e7ee      	b.n	8002208 <__libc_init_array+0xc>
 800222a:	00b3      	lsls	r3, r6, #2
 800222c:	58eb      	ldr	r3, [r5, r3]
 800222e:	4798      	blx	r3
 8002230:	3601      	adds	r6, #1
 8002232:	e7f2      	b.n	800221a <__libc_init_array+0x1e>
 8002234:	0800231c 	.word	0x0800231c
 8002238:	0800231c 	.word	0x0800231c
 800223c:	0800231c 	.word	0x0800231c
 8002240:	08002320 	.word	0x08002320

08002244 <memset>:
 8002244:	0003      	movs	r3, r0
 8002246:	1882      	adds	r2, r0, r2
 8002248:	4293      	cmp	r3, r2
 800224a:	d100      	bne.n	800224e <memset+0xa>
 800224c:	4770      	bx	lr
 800224e:	7019      	strb	r1, [r3, #0]
 8002250:	3301      	adds	r3, #1
 8002252:	e7f9      	b.n	8002248 <memset+0x4>

08002254 <_init>:
 8002254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002256:	46c0      	nop			; (mov r8, r8)
 8002258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800225a:	bc08      	pop	{r3}
 800225c:	469e      	mov	lr, r3
 800225e:	4770      	bx	lr

08002260 <_fini>:
 8002260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002262:	46c0      	nop			; (mov r8, r8)
 8002264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002266:	bc08      	pop	{r3}
 8002268:	469e      	mov	lr, r3
 800226a:	4770      	bx	lr
